from typing import Any, overload

class AbstractGeometryPath:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInEquivalentForces(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(selfs: State) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultColor(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPreScaleLength(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isVisualPath(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultColor(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPreScaleLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AbstractPathPoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def deletePathPoint(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(selfs: State) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(self) -> Any: ...
    def getdPointdQ(selfs: State) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActive(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AbstractTool:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addAnalysisSetToModel(self, *args, **kwargs) -> Any: ...
    def addControllerSetToModel(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def createExternalLoads(selfexternalLoadsFileName: str, model: Model) -> bool: ...
    def dump(self) -> str: ...
    def getAnalysisSet(self) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getControllerSet(self) -> Any: ...
    def getControlsFileName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getErrorTolerance(self) -> float: ...
    def getExternalLoads(self) -> Any: ...
    def getExternalLoadsFileName(self) -> str: ...
    def getFinalTime(self) -> float: ...
    def getForceSetFiles(self) -> Any: ...
    def getInitialTime(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getMaxDT(self) -> float: ...
    def getMaximumNumberOfSteps(self) -> int: ...
    def getMinDT(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelFilename(self) -> str: ...
    def getName(self) -> str: ...
    def getNextAvailableForceName(selfprefix: Any) -> str: ...
    def getNumProperties(self) -> int: ...
    def getOutputPrecision(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getReplaceForceSet(self) -> bool: ...
    def getResultsDir(self) -> str: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSolveForEquilibrium(self) -> bool: ...
    def getStartTime(self) -> float: ...
    def getToolOwnsModel(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def loadModel(self, *args, **kwargs) -> Any: ...
    def loadQStorage(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def modelHasExternalLoads(self) -> bool: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printResults(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def removeAnalysisSetFromModel(self, *args, **kwargs) -> Any: ...
    def removeControllerSetFromModel(self, *args, **kwargs) -> Any: ...
    def removeExternalLoadsFromModel(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def run(self) -> bool: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControlsFileName(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setErrorTolerance(self, *args, **kwargs) -> Any: ...
    def setExternalLoads(self, *args, **kwargs) -> Any: ...
    def setExternalLoadsFileName(self, *args, **kwargs) -> Any: ...
    def setFinalTime(self, *args, **kwargs) -> Any: ...
    def setForceSetFiles(self, *args, **kwargs) -> Any: ...
    def setInitialTime(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxDT(self, *args, **kwargs) -> Any: ...
    def setMaximumNumberOfSteps(self, *args, **kwargs) -> Any: ...
    def setMinDT(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setModelFilename(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOutputPrecision(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setReplaceForceSet(self, *args, **kwargs) -> Any: ...
    def setResultsDir(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSolveForEquilibrium(self, *args, **kwargs) -> Any: ...
    def setStartTime(self, *args, **kwargs) -> Any: ...
    def setToolOwnsModel(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updAnalysisSet(self) -> Any: ...
    def updControllerSet(self) -> Any: ...
    def updExternalLoads(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateModelForces(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ActivationFiberLengthMuscle:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_default_activation(selfvalue: Any) -> int: ...
    def append_default_fiber_length(selfvalue: Any) -> int: ...
    def append_ignore_activation_dynamics(selfvalue: Any) -> int: ...
    def append_ignore_tendon_compliance(selfvalue: Any) -> int: ...
    def append_max_contraction_velocity(selfvalue: Any) -> int: ...
    def append_max_control(selfvalue: Any) -> int: ...
    def append_max_isometric_force(selfvalue: Any) -> int: ...
    def append_min_control(selfvalue: Any) -> int: ...
    def append_optimal_fiber_length(selfvalue: Any) -> int: ...
    def append_optimal_force(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(selfvalue: Any) -> int: ...
    def append_tendon_slack_length(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActivationRate(selfs: State) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultActivation(self) -> float: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultFiberLength(self) -> float: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_default_activation(selfi: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_default_fiber_length(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultActivation(self, *args, **kwargs) -> Any: ...
    def setDefaultFiberLength(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setFiberLength(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_default_activation(self, *args, **kwargs) -> Any: ...
    def set_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_default_activation(selfi: int) -> float: ...
    @overload
    def upd_default_activation(self) -> Any: ...
    def upd_default_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_default_fiber_length(self) -> Any: ...
    def upd_ignore_activation_dynamics(selfi: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_tendon_compliance(selfi: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_max_contraction_velocity(selfi: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(selfi: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(selfi: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_min_control(selfi: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(selfi: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(selfi: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_slack_length(selfi: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ActiveForceLengthCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfminActiveNormFiberLength: float, transitionNormFiberLength: float, maxActiveNormFiberLength: float, shallowAscendingSlope: float, minimumValue: float) -> None: ...
    def append_max_norm_active_fiber_length(selfvalue: Any) -> int: ...
    def append_min_norm_active_fiber_length(selfvalue: Any) -> int: ...
    def append_minimum_value(selfvalue: Any) -> int: ...
    def append_shallow_ascending_slope(selfvalue: Any) -> int: ...
    def append_transition_norm_fiber_length(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfnormFiberLength: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcValue(selfx: Any) -> float: ...
    @overload
    def calcValue(selfnormFiberLength: float) -> float: ...
    def calcValueAndDerivative(selfnormFiberLength: float) -> SmoothSegmentedFunction: ...
    def clone(self) -> Any: ...
    def constructProperty_max_norm_active_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_norm_active_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_minimum_value(self, *args, **kwargs) -> Any: ...
    def constructProperty_shallow_ascending_slope(self, *args, **kwargs) -> Any: ...
    def constructProperty_transition_norm_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_norm_active_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_norm_active_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_minimum_value(self, *args, **kwargs) -> Any: ...
    def copyProperty_shallow_ascending_slope(self, *args, **kwargs) -> Any: ...
    def copyProperty_transition_norm_fiber_length(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxActiveFiberLength(self) -> float: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getMinActiveFiberLength(self) -> float: ...
    def getMinValue(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getShallowAscendingSlope(self) -> float: ...
    def getTransitionFiberLength(self) -> float: ...
    def get_max_norm_active_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_max_norm_active_fiber_length(self) -> Any: ...
    def get_min_norm_active_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_min_norm_active_fiber_length(self) -> Any: ...
    def get_minimum_value(selfi: int) -> Any: ...
    @overload
    def get_minimum_value(self) -> Any: ...
    def get_shallow_ascending_slope(selfi: int) -> Any: ...
    @overload
    def get_shallow_ascending_slope(self) -> Any: ...
    def get_transition_norm_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_transition_norm_fiber_length(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setActiveFiberLengths(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMinValue(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_max_norm_active_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_min_norm_active_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_minimum_value(self, *args, **kwargs) -> Any: ...
    def set_shallow_ascending_slope(self, *args, **kwargs) -> Any: ...
    def set_transition_norm_fiber_length(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_max_norm_active_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_max_norm_active_fiber_length(self) -> Any: ...
    def upd_min_norm_active_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_min_norm_active_fiber_length(self) -> Any: ...
    def upd_minimum_value(selfi: int) -> float: ...
    @overload
    def upd_minimum_value(self) -> Any: ...
    def upd_shallow_ascending_slope(selfi: int) -> float: ...
    @overload
    def upd_shallow_ascending_slope(self) -> Any: ...
    def upd_transition_norm_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_transition_norm_fiber_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Actuator:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ActuatorForceProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfactuator_names: Array, sum_forces_together: Any, exponent: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_actuator_names(selfvalue: str) -> int: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_exponent(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def append_sum_forces_together(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_actuator_names(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_exponent(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def constructProperty_sum_forces_together(self, *args, **kwargs) -> Any: ...
    def copyProperty_actuator_names(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_exponent(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_sum_forces_together(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendConnectToModel(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuatorNames(self) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExponent(self) -> float: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSumForcesTogether(self) -> bool: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_actuator_names(selfi: int) -> str: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_exponent(selfi: int) -> Any: ...
    @overload
    def get_exponent(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def get_sum_forces_together(selfi: int) -> Any: ...
    @overload
    def get_sum_forces_together(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuatorNames(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setExponent(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setSumForcesTogether(self, *args, **kwargs) -> Any: ...
    def set_actuator_names(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_exponent(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    def set_sum_forces_together(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_actuator_names(selfi: int) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_exponent(selfi: int) -> float: ...
    @overload
    def upd_exponent(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def upd_sum_forces_together(selfi: int) -> bool: ...
    @overload
    def upd_sum_forces_together(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ActuatorIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appliesForce(selfs: State) -> bool: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def numControls(self) -> int: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ActuatorList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class ActuatorPowerProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfactuator_names: Array, sum_powers_together: Any, exponent: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_actuator_names(selfvalue: str) -> int: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_exponent(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def append_sum_powers_together(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_actuator_names(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_exponent(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def constructProperty_sum_powers_together(self, *args, **kwargs) -> Any: ...
    def copyProperty_actuator_names(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_exponent(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_sum_powers_together(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendConnectToModel(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuatorNames(self) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExponent(self) -> float: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSumPowersTogether(self) -> bool: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_actuator_names(selfi: int) -> str: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_exponent(selfi: int) -> Any: ...
    @overload
    def get_exponent(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def get_sum_powers_together(selfi: int) -> Any: ...
    @overload
    def get_sum_powers_together(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuatorNames(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setExponent(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setSumPowersTogether(self, *args, **kwargs) -> Any: ...
    def set_actuator_names(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_exponent(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    def set_sum_powers_together(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_actuator_names(selfi: int) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_exponent(selfi: int) -> float: ...
    @overload
    def upd_exponent(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def upd_sum_powers_together(selfi: int) -> bool: ...
    @overload
    def upd_sum_powers_together(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Analysis:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def begin(selfs: State) -> int: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def end(selfs: State) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEndTime(self) -> float: ...
    def getInDegrees(self) -> bool: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getOn(self) -> bool: ...
    def getPrintResultFiles(self) -> bool: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStartTime(self) -> float: ...
    def getStepInterval(self) -> int: ...
    def getStorageList(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printResults(selfaBaseName: str, aDir: str, aDT: float, aExtension: str) -> int: ...
    def printToXML(selffileName: str) -> bool: ...
    def proceed(selfaStep: int) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setEndTime(self, *args, **kwargs) -> Any: ...
    def setInDegrees(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOn(self, *args, **kwargs) -> Any: ...
    def setPrintResultFiles(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStartTime(self, *args, **kwargs) -> Any: ...
    def setStatesStore(self, *args, **kwargs) -> Any: ...
    def setStepInterval(self, *args, **kwargs) -> Any: ...
    def step(selfs: State, stepNumber: int) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AnalysisSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaModel: Model) -> None: ...
    @overload
    def __init__(selfaFileName: str) -> None: ...
    @overload
    def __init__(selfaSet: AnalysisSet) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def begin(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Analysis) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def end(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getAvailableAnalyses(self, *args, **kwargs) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Analysis, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getOn(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Analysis) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printResults(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Analysis) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Analysis, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOn(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    def step(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AnalyticGeometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Appearance:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def append_SurfaceProperties(selfvalue: SurfaceProperties) -> int: ...
    def append_color(selfvalue: Vec3) -> int: ...
    def append_opacity(selfvalue: Any) -> int: ...
    def append_visible(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_SurfaceProperties(self, *args, **kwargs) -> Any: ...
    def constructProperty_color(self, *args, **kwargs) -> Any: ...
    def constructProperty_opacity(self, *args, **kwargs) -> Any: ...
    def constructProperty_visible(self, *args, **kwargs) -> Any: ...
    def copyProperty_SurfaceProperties(self, *args, **kwargs) -> Any: ...
    def copyProperty_color(self, *args, **kwargs) -> Any: ...
    def copyProperty_opacity(self, *args, **kwargs) -> Any: ...
    def copyProperty_visible(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_SurfaceProperties(selfi: int) -> Any: ...
    @overload
    def get_SurfaceProperties(self) -> Any: ...
    def get_color(selfi: int) -> Any: ...
    @overload
    def get_color(self) -> Any: ...
    def get_opacity(selfi: int) -> Any: ...
    @overload
    def get_opacity(self) -> Any: ...
    def get_representation(self) -> VisualRepresentation: ...
    def get_visible(selfi: int) -> Any: ...
    @overload
    def get_visible(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_SurfaceProperties(self, *args, **kwargs) -> Any: ...
    def set_color(self, *args, **kwargs) -> Any: ...
    def set_opacity(self, *args, **kwargs) -> Any: ...
    def set_representation(self, *args, **kwargs) -> Any: ...
    def set_visible(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_SurfaceProperties(selfi: int) -> Any: ...
    @overload
    def upd_SurfaceProperties(self) -> Any: ...
    def upd_color(selfi: int) -> Any: ...
    @overload
    def upd_color(self) -> Any: ...
    def upd_opacity(selfi: int) -> float: ...
    @overload
    def upd_opacity(self) -> Any: ...
    def upd_visible(selfi: int) -> bool: ...
    @overload
    def upd_visible(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ArrayPathPoint:
    def __init__(selfarg2: Array) -> None: ...
    @overload
    def __init__(selfarg2: Array) -> None: ...
    @overload
    def __init__(selfinitList: AbstractPathPoint) -> None: ...
    @overload
    def __init__(selfaDefaultValue: AbstractPathPoint, aSize: int, aCapacity: int) -> None: ...
    def append(selfaValue: AbstractPathPoint) -> int: ...
    @overload
    def append(selfaArray: Array) -> int: ...
    def arrayEquals(selfaArray: Array) -> bool: ...
    def findIndex(selfaValue: AbstractPathPoint) -> int: ...
    def get(selfaIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(selfindex: int) -> Any: ...
    def insert(selfaIndex: int, aValue: AbstractPathPoint) -> int: ...
    def remove(selfaIndex: int) -> int: ...
    def rfindIndex(selfaValue: AbstractPathPoint) -> int: ...
    def searchBinary(selfaValue: AbstractPathPoint, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayPointForceDirection:
    def __init__(selfarg2: Array) -> None: ...
    @overload
    def __init__(selfarg2: Array) -> None: ...
    @overload
    def __init__(selfinitList: PointForceDirection) -> None: ...
    @overload
    def __init__(selfaDefaultValue: PointForceDirection, aSize: int, aCapacity: int) -> None: ...
    def append(selfaValue: PointForceDirection) -> int: ...
    @overload
    def append(selfaArray: Array) -> int: ...
    def arrayEquals(selfaArray: Array) -> bool: ...
    def findIndex(selfaValue: PointForceDirection) -> int: ...
    def get(selfaIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(selfindex: int) -> Any: ...
    def insert(selfaIndex: int, aValue: PointForceDirection) -> int: ...
    def remove(selfaIndex: int) -> int: ...
    def rfindIndex(selfaValue: PointForceDirection) -> int: ...
    def searchBinary(selfaValue: PointForceDirection, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class Arrow:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfaPoint1: Vec3, aUnitDir: UnitVec3, aLength: float) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_direction(selfvalue: Vec3) -> int: ...
    def append_length(selfvalue: Any) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def append_start_point(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_direction(self, *args, **kwargs) -> Any: ...
    def constructProperty_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructProperty_start_point(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_direction(self, *args, **kwargs) -> Any: ...
    def copyProperty_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def copyProperty_start_point(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_direction(selfi: int) -> Any: ...
    @overload
    def get_direction(self) -> Any: ...
    def get_length(selfi: int) -> Any: ...
    @overload
    def get_length(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def get_start_point(selfi: int) -> Any: ...
    @overload
    def get_start_point(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_direction(self, *args, **kwargs) -> Any: ...
    def set_length(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    def set_start_point(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_direction(selfi: int) -> Any: ...
    @overload
    def upd_direction(self) -> Any: ...
    def upd_length(selfi: int) -> float: ...
    @overload
    def upd_length(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def upd_start_point(selfi: int) -> Any: ...
    @overload
    def upd_start_point(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AssemblySolver:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfmodel: Model, coordinateReferences: CoordinateReference, constraintWeight: float) -> None: ...
    def assemble(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAssembler(self) -> Assembler: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCoordinateReferences(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAccuracy(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setConstraintWeight(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def track(self, *args, **kwargs) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateCoordinateReference(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BallJoint:
    Coord_Rotation1X: Any
    Coord_Rotation2Y: Any
    Coord_Rotation3Z: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: BallJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: BallJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Bhargava2004MuscleMetabolicsProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfactivation_rate_on: Any, maintenance_rate_on: Any, shortening_rate_on: Any, basal_rate_on: Any, work_rate_on: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addMuscle(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(selfvalue: Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet) -> int: ...
    def append_activation_rate_on(selfvalue: Any) -> int: ...
    def append_basal_coefficient(selfvalue: Any) -> int: ...
    def append_basal_exponent(selfvalue: Any) -> int: ...
    def append_basal_rate_on(selfvalue: Any) -> int: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_enforce_minimum_heat_rate_per_muscle(selfvalue: Any) -> int: ...
    def append_forbid_negative_total_power(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_include_negative_mechanical_work(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_maintenance_rate_on(selfvalue: Any) -> int: ...
    def append_mechanical_work_rate_on(selfvalue: Any) -> int: ...
    def append_muscle_effort_scaling_factor(selfvalue: Any) -> int: ...
    def append_normalized_fiber_length_dependence_on_maintenance_rate(selfvalue: PiecewiseLinearFunction) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def append_report_total_metabolics_only(selfvalue: Any) -> int: ...
    def append_shortening_rate_on(selfvalue: Any) -> int: ...
    def append_use_force_dependent_shortening_prop_constant(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_exponent(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def constructProperty_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_maintenance_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_mechanical_work_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def constructProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_total_metabolics_only(self, *args, **kwargs) -> Any: ...
    def constructProperty_shortening_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_force_dependent_shortening_prop_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_exponent(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def copyProperty_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_maintenance_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_mechanical_work_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def copyProperty_normalized_fiber_length_dependence_on_maintenance_rate(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_total_metabolics_only(self, *args, **kwargs) -> Any: ...
    def copyProperty_shortening_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_force_dependent_shortening_prop_constant(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivationConstantFastTwitch(selfmuscleName: str) -> float: ...
    def getActivationConstantSlowTwitch(selfmuscleName: str) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDensity(selfmuscleName: str) -> float: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaintenanceConstantFastTwitch(selfmuscleName: str) -> float: ...
    def getMaintenanceConstantSlowTwitch(selfmuscleName: str) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMuscleMass(selfmuscleName: str) -> float: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumMetabolicMuscles(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRatioSlowTwitchFibers(selfmuscleName: str) -> float: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpecificTension(selfmuscleName: str) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(selfi: int) -> Any: ...
    @overload
    def get_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self) -> Any: ...
    def get_activation_rate_on(selfi: int) -> Any: ...
    @overload
    def get_activation_rate_on(self) -> Any: ...
    def get_basal_coefficient(selfi: int) -> Any: ...
    @overload
    def get_basal_coefficient(self) -> Any: ...
    def get_basal_exponent(selfi: int) -> Any: ...
    @overload
    def get_basal_exponent(self) -> Any: ...
    def get_basal_rate_on(selfi: int) -> Any: ...
    @overload
    def get_basal_rate_on(self) -> Any: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_enforce_minimum_heat_rate_per_muscle(selfi: int) -> Any: ...
    @overload
    def get_enforce_minimum_heat_rate_per_muscle(self) -> Any: ...
    def get_forbid_negative_total_power(selfi: int) -> Any: ...
    @overload
    def get_forbid_negative_total_power(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_include_negative_mechanical_work(selfi: int) -> Any: ...
    @overload
    def get_include_negative_mechanical_work(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_maintenance_rate_on(selfi: int) -> Any: ...
    @overload
    def get_maintenance_rate_on(self) -> Any: ...
    def get_mechanical_work_rate_on(selfi: int) -> Any: ...
    @overload
    def get_mechanical_work_rate_on(self) -> Any: ...
    def get_muscle_effort_scaling_factor(selfi: int) -> Any: ...
    @overload
    def get_muscle_effort_scaling_factor(self) -> Any: ...
    def get_normalized_fiber_length_dependence_on_maintenance_rate(selfi: int) -> Any: ...
    @overload
    def get_normalized_fiber_length_dependence_on_maintenance_rate(self) -> Any: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def get_report_total_metabolics_only(selfi: int) -> Any: ...
    @overload
    def get_report_total_metabolics_only(self) -> Any: ...
    def get_shortening_rate_on(selfi: int) -> Any: ...
    @overload
    def get_shortening_rate_on(self) -> Any: ...
    def get_use_force_dependent_shortening_prop_constant(selfi: int) -> Any: ...
    @overload
    def get_use_force_dependent_shortening_prop_constant(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isUsingProvidedMass(selfmuscleName: str) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def removeMuscle(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivationConstantFastTwitch(self, *args, **kwargs) -> Any: ...
    def setActivationConstantSlowTwitch(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDensity(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaintenanceConstantFastTwitch(self, *args, **kwargs) -> Any: ...
    def setMaintenanceConstantSlowTwitch(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setRatioSlowTwitchFibers(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSpecificTension(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args, **kwargs) -> Any: ...
    def set_activation_rate_on(self, *args, **kwargs) -> Any: ...
    def set_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def set_basal_exponent(self, *args, **kwargs) -> Any: ...
    def set_basal_rate_on(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def set_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_maintenance_rate_on(self, *args, **kwargs) -> Any: ...
    def set_mechanical_work_rate_on(self, *args, **kwargs) -> Any: ...
    def set_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def set_normalized_fiber_length_dependence_on_maintenance_rate(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    def set_report_total_metabolics_only(self, *args, **kwargs) -> Any: ...
    def set_shortening_rate_on(self, *args, **kwargs) -> Any: ...
    def set_use_force_dependent_shortening_prop_constant(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(selfi: int) -> Any: ...
    @overload
    def upd_Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self) -> Any: ...
    def upd_activation_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_activation_rate_on(self) -> Any: ...
    def upd_basal_coefficient(selfi: int) -> float: ...
    @overload
    def upd_basal_coefficient(self) -> Any: ...
    def upd_basal_exponent(selfi: int) -> float: ...
    @overload
    def upd_basal_exponent(self) -> Any: ...
    def upd_basal_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_basal_rate_on(self) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_enforce_minimum_heat_rate_per_muscle(selfi: int) -> bool: ...
    @overload
    def upd_enforce_minimum_heat_rate_per_muscle(self) -> Any: ...
    def upd_forbid_negative_total_power(selfi: int) -> bool: ...
    @overload
    def upd_forbid_negative_total_power(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_include_negative_mechanical_work(selfi: int) -> bool: ...
    @overload
    def upd_include_negative_mechanical_work(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_maintenance_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_maintenance_rate_on(self) -> Any: ...
    def upd_mechanical_work_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_mechanical_work_rate_on(self) -> Any: ...
    def upd_muscle_effort_scaling_factor(selfi: int) -> float: ...
    @overload
    def upd_muscle_effort_scaling_factor(self) -> Any: ...
    def upd_normalized_fiber_length_dependence_on_maintenance_rate(selfi: int) -> Any: ...
    @overload
    def upd_normalized_fiber_length_dependence_on_maintenance_rate(self) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def upd_report_total_metabolics_only(selfi: int) -> bool: ...
    @overload
    def upd_report_total_metabolics_only(self) -> Any: ...
    def upd_shortening_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_shortening_rate_on(self) -> Any: ...
    def upd_use_force_dependent_shortening_prop_constant(selfi: int) -> bool: ...
    @overload
    def upd_use_force_dependent_shortening_prop_constant(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def useCalculatedMass(self, *args, **kwargs) -> Any: ...
    def useProvidedMass(self, *args, **kwargs) -> Any: ...

class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameter:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfmuscleName: str, ratio_slow_twitch_fibers: float, muscle_mass: float) -> None: ...
    @overload
    def __init__(selfmuscleName: str, ratio_slow_twitch_fibers: float, activation_constant_slow_twitch: float, activation_constant_fast_twitch: float, maintenance_constant_slow_twitch: float, maintenance_constant_fast_twitch: float, muscle_mass: float) -> None: ...
    def append_activation_constant_fast_twitch(selfvalue: Any) -> int: ...
    def append_activation_constant_slow_twitch(selfvalue: Any) -> int: ...
    def append_density(selfvalue: Any) -> int: ...
    def append_maintenance_constant_fast_twitch(selfvalue: Any) -> int: ...
    def append_maintenance_constant_slow_twitch(selfvalue: Any) -> int: ...
    def append_provided_muscle_mass(selfvalue: Any) -> int: ...
    def append_ratio_slow_twitch_fibers(selfvalue: Any) -> int: ...
    def append_specific_tension(selfvalue: Any) -> int: ...
    def append_use_provided_muscle_mass(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_activation_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_density(self, *args, **kwargs) -> Any: ...
    def constructProperty_maintenance_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_maintenance_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def constructProperty_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def constructProperty_specific_tension(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_density(self, *args, **kwargs) -> Any: ...
    def copyProperty_maintenance_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_maintenance_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def copyProperty_specific_tension(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMuscle(self) -> Any: ...
    def getMuscleMass(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_activation_constant_fast_twitch(selfi: int) -> Any: ...
    @overload
    def get_activation_constant_fast_twitch(self) -> Any: ...
    def get_activation_constant_slow_twitch(selfi: int) -> Any: ...
    @overload
    def get_activation_constant_slow_twitch(self) -> Any: ...
    def get_density(selfi: int) -> Any: ...
    @overload
    def get_density(self) -> Any: ...
    def get_maintenance_constant_fast_twitch(selfi: int) -> Any: ...
    @overload
    def get_maintenance_constant_fast_twitch(self) -> Any: ...
    def get_maintenance_constant_slow_twitch(selfi: int) -> Any: ...
    @overload
    def get_maintenance_constant_slow_twitch(self) -> Any: ...
    def get_provided_muscle_mass(selfi: int) -> Any: ...
    @overload
    def get_provided_muscle_mass(self) -> Any: ...
    def get_ratio_slow_twitch_fibers(selfi: int) -> Any: ...
    @overload
    def get_ratio_slow_twitch_fibers(self) -> Any: ...
    def get_specific_tension(selfi: int) -> Any: ...
    @overload
    def get_specific_tension(self) -> Any: ...
    def get_use_provided_muscle_mass(selfi: int) -> Any: ...
    @overload
    def get_use_provided_muscle_mass(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMuscle(self, *args, **kwargs) -> Any: ...
    def setMuscleMass(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_activation_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def set_activation_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def set_density(self, *args, **kwargs) -> Any: ...
    def set_maintenance_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def set_maintenance_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def set_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def set_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def set_specific_tension(self, *args, **kwargs) -> Any: ...
    def set_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_activation_constant_fast_twitch(selfi: int) -> float: ...
    @overload
    def upd_activation_constant_fast_twitch(self) -> Any: ...
    def upd_activation_constant_slow_twitch(selfi: int) -> float: ...
    @overload
    def upd_activation_constant_slow_twitch(self) -> Any: ...
    def upd_density(selfi: int) -> float: ...
    @overload
    def upd_density(self) -> Any: ...
    def upd_maintenance_constant_fast_twitch(selfi: int) -> float: ...
    @overload
    def upd_maintenance_constant_fast_twitch(self) -> Any: ...
    def upd_maintenance_constant_slow_twitch(selfi: int) -> float: ...
    @overload
    def upd_maintenance_constant_slow_twitch(self) -> Any: ...
    def upd_provided_muscle_mass(selfi: int) -> float: ...
    @overload
    def upd_provided_muscle_mass(self) -> Any: ...
    def upd_ratio_slow_twitch_fibers(selfi: int) -> float: ...
    @overload
    def upd_ratio_slow_twitch_fibers(self) -> Any: ...
    def upd_specific_tension(selfi: int) -> float: ...
    @overload
    def upd_specific_tension(self) -> Any: ...
    def upd_use_provided_muscle_mass(selfi: int) -> bool: ...
    @overload
    def upd_use_provided_muscle_mass(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Bhargava2004MuscleMetabolicsProbe_MetabolicMuscleParameterSet:
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    thisown: Any

class Bhargava2004SmoothedMuscleMetabolics:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addMuscle(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_basal_coefficient(selfvalue: Any) -> int: ...
    def append_basal_exponent(selfvalue: Any) -> int: ...
    def append_enforce_minimum_heat_rate_per_muscle(selfvalue: Any) -> int: ...
    def append_forbid_negative_total_power(selfvalue: Any) -> int: ...
    def append_heat_rate_smoothing(selfvalue: Any) -> int: ...
    def append_include_negative_mechanical_work(selfvalue: Any) -> int: ...
    def append_muscle_effort_scaling_factor(selfvalue: Any) -> int: ...
    def append_muscle_parameters(selfvalue: Bhargava2004SmoothedMuscleMetabolics_MuscleParameters) -> int: ...
    def append_power_smoothing(selfvalue: Any) -> int: ...
    def append_smoothing_type(selfvalue: str) -> int: ...
    def append_use_force_dependent_shortening_prop_constant(selfvalue: Any) -> int: ...
    def append_use_smoothing(selfvalue: Any) -> int: ...
    def append_velocity_smoothing(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_exponent(self, *args, **kwargs) -> Any: ...
    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def constructProperty_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def constructProperty_heat_rate_smoothing(self, *args, **kwargs) -> Any: ...
    def constructProperty_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def constructProperty_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def constructProperty_muscle_parameters(self, *args, **kwargs) -> Any: ...
    def constructProperty_power_smoothing(self, *args, **kwargs) -> Any: ...
    def constructProperty_smoothing_type(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_force_dependent_shortening_prop_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_smoothing(self, *args, **kwargs) -> Any: ...
    def constructProperty_velocity_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_exponent(self, *args, **kwargs) -> Any: ...
    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def copyProperty_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def copyProperty_heat_rate_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def copyProperty_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def copyProperty_muscle_parameters(self, *args, **kwargs) -> Any: ...
    def copyProperty_power_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_smoothing_type(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_force_dependent_shortening_prop_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_velocity_smoothing(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMuscleMetabolicRate(selfs: State, channel: str) -> float: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumMetabolicMuscles(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTotalActivationRate(selfs: State) -> float: ...
    def getTotalMaintenanceRate(selfs: State) -> float: ...
    def getTotalMechanicalWorkRate(selfs: State) -> float: ...
    def getTotalMetabolicRate(selfs: State) -> float: ...
    def getTotalShorteningRate(selfs: State) -> float: ...
    def get_basal_coefficient(selfi: int) -> Any: ...
    @overload
    def get_basal_coefficient(self) -> Any: ...
    def get_basal_exponent(selfi: int) -> Any: ...
    @overload
    def get_basal_exponent(self) -> Any: ...
    def get_enforce_minimum_heat_rate_per_muscle(selfi: int) -> Any: ...
    @overload
    def get_enforce_minimum_heat_rate_per_muscle(self) -> Any: ...
    def get_forbid_negative_total_power(selfi: int) -> Any: ...
    @overload
    def get_forbid_negative_total_power(self) -> Any: ...
    def get_heat_rate_smoothing(selfi: int) -> Any: ...
    @overload
    def get_heat_rate_smoothing(self) -> Any: ...
    def get_include_negative_mechanical_work(selfi: int) -> Any: ...
    @overload
    def get_include_negative_mechanical_work(self) -> Any: ...
    def get_muscle_effort_scaling_factor(selfi: int) -> Any: ...
    @overload
    def get_muscle_effort_scaling_factor(self) -> Any: ...
    def get_muscle_parameters(selfi: int) -> Any: ...
    def get_power_smoothing(selfi: int) -> Any: ...
    @overload
    def get_power_smoothing(self) -> Any: ...
    def get_smoothing_type(selfi: int) -> Any: ...
    @overload
    def get_smoothing_type(self) -> str: ...
    def get_use_force_dependent_shortening_prop_constant(selfi: int) -> Any: ...
    @overload
    def get_use_force_dependent_shortening_prop_constant(self) -> Any: ...
    def get_use_smoothing(selfi: int) -> Any: ...
    @overload
    def get_use_smoothing(self) -> Any: ...
    def get_velocity_smoothing(selfi: int) -> Any: ...
    @overload
    def get_velocity_smoothing(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def set_basal_exponent(self, *args, **kwargs) -> Any: ...
    def set_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def set_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def set_heat_rate_smoothing(self, *args, **kwargs) -> Any: ...
    def set_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def set_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def set_muscle_parameters(self, *args, **kwargs) -> Any: ...
    def set_power_smoothing(self, *args, **kwargs) -> Any: ...
    def set_smoothing_type(self, *args, **kwargs) -> Any: ...
    def set_use_force_dependent_shortening_prop_constant(self, *args, **kwargs) -> Any: ...
    def set_use_smoothing(self, *args, **kwargs) -> Any: ...
    def set_velocity_smoothing(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_basal_coefficient(selfi: int) -> float: ...
    @overload
    def upd_basal_coefficient(self) -> Any: ...
    def upd_basal_exponent(selfi: int) -> float: ...
    @overload
    def upd_basal_exponent(self) -> Any: ...
    def upd_enforce_minimum_heat_rate_per_muscle(selfi: int) -> bool: ...
    @overload
    def upd_enforce_minimum_heat_rate_per_muscle(self) -> Any: ...
    def upd_forbid_negative_total_power(selfi: int) -> bool: ...
    @overload
    def upd_forbid_negative_total_power(self) -> Any: ...
    def upd_heat_rate_smoothing(selfi: int) -> float: ...
    @overload
    def upd_heat_rate_smoothing(self) -> Any: ...
    def upd_include_negative_mechanical_work(selfi: int) -> bool: ...
    @overload
    def upd_include_negative_mechanical_work(self) -> Any: ...
    def upd_muscle_effort_scaling_factor(selfi: int) -> float: ...
    @overload
    def upd_muscle_effort_scaling_factor(self) -> Any: ...
    def upd_muscle_parameters(selfi: int) -> Any: ...
    def upd_power_smoothing(selfi: int) -> float: ...
    @overload
    def upd_power_smoothing(self) -> Any: ...
    def upd_smoothing_type(selfi: int) -> str: ...
    @overload
    def upd_smoothing_type(self) -> Any: ...
    def upd_use_force_dependent_shortening_prop_constant(selfi: int) -> bool: ...
    @overload
    def upd_use_force_dependent_shortening_prop_constant(self) -> Any: ...
    def upd_use_smoothing(selfi: int) -> bool: ...
    @overload
    def upd_use_smoothing(self) -> Any: ...
    def upd_velocity_smoothing(selfi: int) -> float: ...
    @overload
    def upd_velocity_smoothing(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Bhargava2004SmoothedMuscleMetabolics_MuscleParameters:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_muscle: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_activation_constant_fast_twitch(selfvalue: Any) -> int: ...
    def append_activation_constant_slow_twitch(selfvalue: Any) -> int: ...
    def append_density(selfvalue: Any) -> int: ...
    def append_maintenance_constant_fast_twitch(selfvalue: Any) -> int: ...
    def append_maintenance_constant_slow_twitch(selfvalue: Any) -> int: ...
    def append_provided_muscle_mass(selfvalue: Any) -> int: ...
    def append_ratio_slow_twitch_fibers(selfvalue: Any) -> int: ...
    def append_specific_tension(selfvalue: Any) -> int: ...
    def append_use_provided_muscle_mass(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_muscle(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_density(self, *args, **kwargs) -> Any: ...
    def constructProperty_maintenance_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_maintenance_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def constructProperty_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def constructProperty_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def constructProperty_specific_tension(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_density(self, *args, **kwargs) -> Any: ...
    def copyProperty_maintenance_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_maintenance_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def copyProperty_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def copyProperty_specific_tension(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMuscle(self) -> Any: ...
    def getMuscleMass(self) -> float: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_activation_constant_fast_twitch(selfi: int) -> Any: ...
    @overload
    def get_activation_constant_fast_twitch(self) -> Any: ...
    def get_activation_constant_slow_twitch(selfi: int) -> Any: ...
    @overload
    def get_activation_constant_slow_twitch(self) -> Any: ...
    def get_density(selfi: int) -> Any: ...
    @overload
    def get_density(self) -> Any: ...
    def get_maintenance_constant_fast_twitch(selfi: int) -> Any: ...
    @overload
    def get_maintenance_constant_fast_twitch(self) -> Any: ...
    def get_maintenance_constant_slow_twitch(selfi: int) -> Any: ...
    @overload
    def get_maintenance_constant_slow_twitch(self) -> Any: ...
    def get_provided_muscle_mass(selfi: int) -> Any: ...
    @overload
    def get_provided_muscle_mass(self) -> Any: ...
    def get_ratio_slow_twitch_fibers(selfi: int) -> Any: ...
    @overload
    def get_ratio_slow_twitch_fibers(self) -> Any: ...
    def get_specific_tension(selfi: int) -> Any: ...
    @overload
    def get_specific_tension(self) -> Any: ...
    def get_use_provided_muscle_mass(selfi: int) -> Any: ...
    @overload
    def get_use_provided_muscle_mass(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setMuscleMass(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_activation_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def set_activation_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def set_density(self, *args, **kwargs) -> Any: ...
    def set_maintenance_constant_fast_twitch(self, *args, **kwargs) -> Any: ...
    def set_maintenance_constant_slow_twitch(self, *args, **kwargs) -> Any: ...
    def set_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def set_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def set_specific_tension(self, *args, **kwargs) -> Any: ...
    def set_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_activation_constant_fast_twitch(selfi: int) -> float: ...
    @overload
    def upd_activation_constant_fast_twitch(self) -> Any: ...
    def upd_activation_constant_slow_twitch(selfi: int) -> float: ...
    @overload
    def upd_activation_constant_slow_twitch(self) -> Any: ...
    def upd_density(selfi: int) -> float: ...
    @overload
    def upd_density(self) -> Any: ...
    def upd_maintenance_constant_fast_twitch(selfi: int) -> float: ...
    @overload
    def upd_maintenance_constant_fast_twitch(self) -> Any: ...
    def upd_maintenance_constant_slow_twitch(selfi: int) -> float: ...
    @overload
    def upd_maintenance_constant_slow_twitch(self) -> Any: ...
    def upd_provided_muscle_mass(selfi: int) -> float: ...
    @overload
    def upd_provided_muscle_mass(self) -> Any: ...
    def upd_ratio_slow_twitch_fibers(selfi: int) -> float: ...
    @overload
    def upd_ratio_slow_twitch_fibers(self) -> Any: ...
    def upd_specific_tension(selfi: int) -> float: ...
    @overload
    def upd_specific_tension(self) -> Any: ...
    def upd_use_provided_muscle_mass(selfi: int) -> bool: ...
    @overload
    def upd_use_provided_muscle_mass(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Blankevoort1991Ligament:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, point1: Vec3, frame2: PhysicalFrame, point2: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, point1: Vec3, frame2: PhysicalFrame, point2: Vec3, linear_stiffness: float, slack_length: float) -> None: ...
    @overload
    def __init__(selfname: str, linear_stiffness: float, slack_length: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_damping_coefficient(selfvalue: Any) -> int: ...
    def append_linear_stiffness(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_slack_length(selfvalue: Any) -> int: ...
    def append_transition_strain(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def computePotentialEnergy(selfstate: State) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_damping_coefficient(self, *args, **kwargs) -> Any: ...
    def constructProperty_linear_stiffness(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_slack_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_transition_strain(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_damping_coefficient(self, *args, **kwargs) -> Any: ...
    def copyProperty_linear_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_transition_strain(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDampingCoefficientForceTimePerLength(self) -> float: ...
    def getDampingForce(selfstate: State) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getGeometryPath(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfstate: State) -> float: ...
    def getLengtheningSpeed(selfstate: State) -> float: ...
    def getLinearStiffnessForcePerLength(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpringForce(selfstate: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStrain(selfstate: State) -> float: ...
    def getStrainRate(selfstate: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTotalForce(selfstate: State) -> float: ...
    def getTransitionLength(self) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_damping_coefficient(selfi: int) -> Any: ...
    @overload
    def get_damping_coefficient(self) -> Any: ...
    def get_linear_stiffness(selfi: int) -> Any: ...
    @overload
    def get_linear_stiffness(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_slack_length(selfi: int) -> Any: ...
    @overload
    def get_slack_length(self) -> Any: ...
    def get_transition_strain(selfi: int) -> Any: ...
    @overload
    def get_transition_strain(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDampingCoefficientForceTimePerLength(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLinearStiffnessForcePerLength(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSlackLengthFromReferenceForce(self, *args, **kwargs) -> Any: ...
    def setSlackLengthFromReferenceStrain(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_damping_coefficient(self, *args, **kwargs) -> Any: ...
    def set_linear_stiffness(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_slack_length(self, *args, **kwargs) -> Any: ...
    def set_transition_strain(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_damping_coefficient(selfi: int) -> float: ...
    @overload
    def upd_damping_coefficient(self) -> Any: ...
    def upd_linear_stiffness(selfi: int) -> float: ...
    @overload
    def upd_linear_stiffness(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_slack_length(selfi: int) -> float: ...
    @overload
    def upd_slack_length(self) -> Any: ...
    def upd_transition_strain(selfi: int) -> float: ...
    @overload
    def upd_transition_strain(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Body:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaName: str, aMass: float, aMassCenter: Vec3, aInertia: Inertia) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def addWrapObject(self, *args, **kwargs) -> Any: ...
    def append_WrapObjectSet(selfvalue: WrapObjectSet) -> int: ...
    def append_attached_geometry(selfvalue: Geometry) -> int: ...
    def append_frame_geometry(selfvalue: FrameGeometry) -> int: ...
    def append_inertia(selfvalue: Vec6) -> int: ...
    def append_mass(selfvalue: Any) -> int: ...
    def append_mass_center(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def attachGeometry(self, *args, **kwargs) -> Any: ...
    def calcAngularMomentumAboutMassCenter(selfs: State) -> Any: ...
    def calcAngularMomentumAboutOrigin(selfs: State) -> Any: ...
    def calcLinearMomentumAboutMassCenter(selfs: State) -> Any: ...
    def calcLinearMomentumAboutOrigin(selfs: State) -> Any: ...
    def calcMomentumAboutMassCenter(selfs: State) -> Any: ...
    def calcMomentumAboutOrigin(selfs: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_inertia(self, *args, **kwargs) -> Any: ...
    def constructProperty_mass(self, *args, **kwargs) -> Any: ...
    def constructProperty_mass_center(self, *args, **kwargs) -> Any: ...
    def copyProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_inertia(self, *args, **kwargs) -> Any: ...
    def copyProperty_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_mass_center(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInertia(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getMass(self) -> Any: ...
    def getMassCenter(self) -> Any: ...
    def getMassProperties(self) -> Any: ...
    def getMobilizedBody(self) -> MobilizedBody: ...
    def getMobilizedBodyIndex(self) -> MobilizedBodyIndex: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(selfaName: str) -> Any: ...
    def getWrapObjectSet(self) -> Any: ...
    def get_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def get_WrapObjectSet(self) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def get_inertia(selfi: int) -> Any: ...
    @overload
    def get_inertia(self) -> Any: ...
    def get_mass(selfi: int) -> Any: ...
    @overload
    def get_mass(self) -> Any: ...
    def get_mass_center(selfi: int) -> Any: ...
    @overload
    def get_mass_center(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaleAttachedGeometry(self, *args, **kwargs) -> Any: ...
    def scaleInertialProperties(self, *args, **kwargs) -> Any: ...
    def scaleMass(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInertia(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMass(self, *args, **kwargs) -> Any: ...
    def setMassCenter(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def set_attached_geometry(self, *args, **kwargs) -> Any: ...
    def set_frame_geometry(self, *args, **kwargs) -> Any: ...
    def set_inertia(self, *args, **kwargs) -> Any: ...
    def set_mass(self, *args, **kwargs) -> Any: ...
    def set_mass_center(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updMobilizedBody(self) -> MobilizedBody: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def upd_WrapObjectSet(self) -> Any: ...
    def upd_attached_geometry(selfi: int) -> Any: ...
    def upd_frame_geometry(selfi: int) -> Any: ...
    @overload
    def upd_frame_geometry(self) -> Any: ...
    def upd_inertia(selfi: int) -> Any: ...
    @overload
    def upd_inertia(self) -> Any: ...
    def upd_mass(selfi: int) -> float: ...
    @overload
    def upd_mass(self) -> Any: ...
    def upd_mass_center(selfi: int) -> Any: ...
    @overload
    def upd_mass_center(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BodyIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def calcAngularMomentumAboutMassCenter(selfs: State) -> Any: ...
    def calcAngularMomentumAboutOrigin(selfs: State) -> Any: ...
    def calcLinearMomentumAboutMassCenter(selfs: State) -> Any: ...
    def calcLinearMomentumAboutOrigin(selfs: State) -> Any: ...
    def calcMomentumAboutMassCenter(selfs: State) -> Any: ...
    def calcMomentumAboutOrigin(selfs: State) -> Any: ...
    def clone(self) -> Any: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInertia(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getMass(self) -> Any: ...
    def getMassCenter(self) -> Any: ...
    def getMassProperties(self) -> Any: ...
    def getMobilizedBody(self) -> MobilizedBody: ...
    def getMobilizedBodyIndex(self) -> MobilizedBodyIndex: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(selfaName: str) -> Any: ...
    def getWrapObjectSet(self) -> Any: ...
    def get_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def get_WrapObjectSet(self) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def get_inertia(selfi: int) -> Any: ...
    @overload
    def get_inertia(self) -> Any: ...
    def get_mass(selfi: int) -> Any: ...
    @overload
    def get_mass(self) -> Any: ...
    def get_mass_center(selfi: int) -> Any: ...
    @overload
    def get_mass_center(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BodyList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class BodyScale:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaBodyScale: BodyScale) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def copyData(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getAxisNames(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setAxisNames(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BodyScaleSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaBodyScaleSet: BodyScaleSet) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: BodyScale) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: BodyScale, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: BodyScale) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: BodyScale) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: BodyScale, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BodySet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Body) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Body) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Body, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Body) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Body) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Body, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Brick:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfhalfLengths: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_half_lengths(selfvalue: Vec3) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_half_lengths(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_half_lengths(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_half_lengths(selfi: int) -> Any: ...
    @overload
    def get_half_lengths(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_half_lengths(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_half_lengths(selfi: int) -> Any: ...
    @overload
    def upd_half_lengths(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BufferedOrientationsReference:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfarg2: BufferedOrientationsReference) -> None: ...
    @overload
    def __init__(selfarg2: BufferedOrientationsReference) -> None: ...
    def append_default_weight(selfvalue: Any) -> int: ...
    def append_orientation_file(selfvalue: str) -> int: ...
    def append_orientation_weights(selfvalue: Set) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_default_weight(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation_weights(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_weight(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation_weights(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNextValuesAndTime(selfvalues: Array_) -> float: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSamplingFrequency(self) -> float: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getTimes(self) -> Any: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def get_default_weight(selfi: int) -> Any: ...
    @overload
    def get_default_weight(self) -> Any: ...
    def get_orientation_file(selfi: int) -> Any: ...
    @overload
    def get_orientation_file(self) -> str: ...
    def get_orientation_weights(selfi: int) -> Any: ...
    @overload
    def get_orientation_weights(self) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def loadOrientationsEulerAnglesFile(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def putValues(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultWeight(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setFinished(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrientationWeightSet(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_default_weight(self, *args, **kwargs) -> Any: ...
    def set_orientation_file(self, *args, **kwargs) -> Any: ...
    def set_orientation_weights(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updOrientationWeightSet(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_default_weight(selfi: int) -> float: ...
    @overload
    def upd_default_weight(self) -> Any: ...
    def upd_orientation_file(selfi: int) -> str: ...
    @overload
    def upd_orientation_file(self) -> Any: ...
    def upd_orientation_weights(selfi: int) -> Any: ...
    @overload
    def upd_orientation_weights(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BushingForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, frame2: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, frame2Name: str) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, frame2: PhysicalFrame, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, frame2Name: str, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, transformInFrame1: Transform, frame2: PhysicalFrame, transformInFrame2: Transform, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, transformInFrame1: Transform, frame2Name: str, transformInFrame2: Transform, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, locationInFrame1: Vec3, orientationInFrame1: Vec3, frame2Name: str, locationInFrame2: Vec3, orientationInFrame2: Vec3, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def append_rotational_damping(selfvalue: Vec3) -> int: ...
    def append_rotational_stiffness(selfvalue: Vec3) -> int: ...
    def append_translational_damping(selfvalue: Vec3) -> int: ...
    def append_translational_stiffness(selfvalue: Vec3) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computePotentialEnergy(selfs: State) -> float: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotational_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotational_stiffness(self, *args, **kwargs) -> Any: ...
    def constructProperty_translational_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_translational_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotational_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotational_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_translational_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_translational_stiffness(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBoundsDissipatedEnergy(selfarg2: State) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDissipatedEnergy(selfstate: State) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPowerDissipation(selfstate: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def get_rotational_damping(selfi: int) -> Any: ...
    @overload
    def get_rotational_damping(self) -> Any: ...
    def get_rotational_stiffness(selfi: int) -> Any: ...
    @overload
    def get_rotational_stiffness(self) -> Any: ...
    def get_translational_damping(selfi: int) -> Any: ...
    @overload
    def get_translational_damping(self) -> Any: ...
    def get_translational_stiffness(selfi: int) -> Any: ...
    @overload
    def get_translational_stiffness(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setDissipatedEnergy(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_rotational_damping(self, *args, **kwargs) -> Any: ...
    def set_rotational_stiffness(self, *args, **kwargs) -> Any: ...
    def set_translational_damping(self, *args, **kwargs) -> Any: ...
    def set_translational_stiffness(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_rotational_damping(selfi: int) -> Any: ...
    @overload
    def upd_rotational_damping(self) -> Any: ...
    def upd_rotational_stiffness(selfi: int) -> Any: ...
    @overload
    def upd_rotational_stiffness(self) -> Any: ...
    def upd_translational_damping(selfi: int) -> Any: ...
    @overload
    def upd_translational_damping(self) -> Any: ...
    def upd_translational_stiffness(selfi: int) -> Any: ...
    @overload
    def upd_translational_stiffness(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ComponentSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ModelComponent) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ModelComponent) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ModelComponent, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ModelComponent) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ModelComponent) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ModelComponent, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ConditionalPathPoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_coordinate: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def append_range(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def changeBodyPreserveLocation(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_coordinate(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_range(self, *args, **kwargs) -> Any: ...
    def deletePathPoint(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(selfs: State) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(self) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def get_range(selfi: int) -> Any: ...
    def getdPointdQ(selfs: State) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasCoordinate(self) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActive(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setCoordinate(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setLocationCoord(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setRangeMax(self, *args, **kwargs) -> Any: ...
    def setRangeMin(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    def set_range(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def upd_range(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Cone:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfo: Vec3, dir: UnitVec3, height: float, base: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_base_radius(selfvalue: Any) -> int: ...
    def append_direction(selfvalue: Vec3) -> int: ...
    def append_height(selfvalue: Any) -> int: ...
    def append_origin(selfvalue: Vec3) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_base_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_direction(self, *args, **kwargs) -> Any: ...
    def constructProperty_height(self, *args, **kwargs) -> Any: ...
    def constructProperty_origin(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_base_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_direction(self, *args, **kwargs) -> Any: ...
    def copyProperty_height(self, *args, **kwargs) -> Any: ...
    def copyProperty_origin(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_base_radius(selfi: int) -> Any: ...
    @overload
    def get_base_radius(self) -> Any: ...
    def get_direction(selfi: int) -> Any: ...
    @overload
    def get_direction(self) -> Any: ...
    def get_height(selfi: int) -> Any: ...
    @overload
    def get_height(self) -> Any: ...
    def get_origin(selfi: int) -> Any: ...
    @overload
    def get_origin(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_base_radius(self, *args, **kwargs) -> Any: ...
    def set_direction(self, *args, **kwargs) -> Any: ...
    def set_height(self, *args, **kwargs) -> Any: ...
    def set_origin(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_base_radius(selfi: int) -> float: ...
    @overload
    def upd_base_radius(self) -> Any: ...
    def upd_direction(selfi: int) -> Any: ...
    @overload
    def upd_direction(self) -> Any: ...
    def upd_height(selfi: int) -> float: ...
    @overload
    def upd_height(self) -> Any: ...
    def upd_origin(selfi: int) -> Any: ...
    @overload
    def upd_origin(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ConstantCurvatureJoint:
    Coord_RotationX: Any
    Coord_RotationY: Any
    Coord_RotationZ: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame, neutralAngleXZY: Vec3, length: Any) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3, neutralAngleXZY: Vec3, length: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def append_length(selfvalue: Any) -> int: ...
    def append_neutral_angle_x_z_y(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clamp(selfq: Vec3) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_neutral_angle_x_z_y(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_neutral_angle_x_z_y(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def eulerXZYToMatrix(self_angle: Vec3) -> Rotation: ...
    def eulerXZYToMatrixGrad(self_angle: Vec3, index: int) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getConstantCurveJacobian(selfpos: Vec3, d: float) -> Mat63: ...
    def getConstantCurveJacobianDerivWrtPosition(selfpos: Vec3, d: float, index: int) -> Mat63: ...
    def getConstantCurveJacobianDerivWrtTime(selfpos: Vec3, dPos: Vec3, d: float) -> Mat63: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: ConstantCurvatureJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEulerJacobian(selfq: Vec3) -> Mat63: ...
    def getEulerJacobianDerivWrtPos(selfq: Vec3, index: int) -> Mat63: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(selfpos: Vec3, d: float) -> Any: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def get_length(selfi: int) -> Any: ...
    @overload
    def get_length(self) -> Any: ...
    def get_neutral_angle_x_z_y(selfi: int) -> Any: ...
    @overload
    def get_neutral_angle_x_z_y(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLength(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNeutralAngleXZY(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_length(self, *args, **kwargs) -> Any: ...
    def set_neutral_angle_x_z_y(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: ConstantCurvatureJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_length(selfi: int) -> float: ...
    @overload
    def upd_length(self) -> Any: ...
    def upd_neutral_angle_x_z_y(selfi: int) -> Any: ...
    @overload
    def upd_neutral_angle_x_z_y(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ConstantDistanceConstraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_body_1: Any
    PropertyIndex_socket_body_2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfbody1: PhysicalFrame, locationBody1: Vec3, body2: PhysicalFrame, locationBody2: Vec3, distance: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_constant_distance(selfvalue: Any) -> int: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def append_location_body_1(selfvalue: Vec3) -> int: ...
    def append_location_body_2(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_body_1(self, *args, **kwargs) -> Any: ...
    def connectSocket_body_2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_constant_distance(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def constructProperty_location_body_1(self, *args, **kwargs) -> Any: ...
    def constructProperty_location_body_2(self, *args, **kwargs) -> Any: ...
    def copyProperty_constant_distance(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_location_body_1(self, *args, **kwargs) -> Any: ...
    def copyProperty_location_body_2(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody1(self) -> Any: ...
    def getBody2(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_constant_distance(selfi: int) -> Any: ...
    @overload
    def get_constant_distance(self) -> Any: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def get_location_body_1(selfi: int) -> Any: ...
    @overload
    def get_location_body_1(self) -> Any: ...
    def get_location_body_2(selfi: int) -> Any: ...
    @overload
    def get_location_body_2(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody1ByName(self, *args, **kwargs) -> Any: ...
    def setBody1PointLocation(self, *args, **kwargs) -> Any: ...
    def setBody2ByName(self, *args, **kwargs) -> Any: ...
    def setBody2PointLocation(self, *args, **kwargs) -> Any: ...
    def setConstantDistance(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_constant_distance(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    def set_location_body_1(self, *args, **kwargs) -> Any: ...
    def set_location_body_2(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_constant_distance(selfi: int) -> float: ...
    @overload
    def upd_constant_distance(self) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def upd_location_body_1(selfi: int) -> Any: ...
    @overload
    def upd_location_body_1(self) -> Any: ...
    def upd_location_body_2(selfi: int) -> Any: ...
    @overload
    def upd_location_body_2(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Constraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ConstraintSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Constraint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Constraint) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Constraint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Constraint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Constraint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Constraint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ContactGeometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def append_orientation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation(self, *args, **kwargs) -> Any: ...
    def createSimTKContactGeometry(self) -> ContactGeometry: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOrientation(self) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def get_orientation(selfi: int) -> Any: ...
    @overload
    def get_orientation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrientation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    def set_orientation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def upd_orientation(selfi: int) -> Any: ...
    @overload
    def upd_orientation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ContactGeometrySet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ContactGeometry) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ContactGeometry) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ContactGeometry, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ContactGeometry) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ContactGeometry) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ContactGeometry, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ContactHalfSpace:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selflocation: Vec3, orientation: Vec3, frame: PhysicalFrame) -> None: ...
    @overload
    def __init__(selflocation: Vec3, orientation: Vec3, frame: PhysicalFrame, name: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def append_orientation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation(self, *args, **kwargs) -> Any: ...
    def createSimTKContactGeometry(self) -> ContactGeometry: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOrientation(self) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def get_orientation(selfi: int) -> Any: ...
    @overload
    def get_orientation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrientation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    def set_orientation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def upd_orientation(selfi: int) -> Any: ...
    @overload
    def upd_orientation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ContactMesh:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selffilename: str, location: Vec3, orientation: Vec3, frame: PhysicalFrame) -> None: ...
    @overload
    def __init__(selffilename: str, location: Vec3, orientation: Vec3, frame: PhysicalFrame, name: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_filename(selfvalue: str) -> int: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def append_orientation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_filename(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_filename(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation(self, *args, **kwargs) -> Any: ...
    def createSimTKContactGeometry(self) -> ContactGeometry: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFilename(self) -> str: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOrientation(self) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_filename(selfi: int) -> Any: ...
    @overload
    def get_filename(self) -> str: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def get_orientation(selfi: int) -> Any: ...
    @overload
    def get_orientation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFilename(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrientation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_filename(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    def set_orientation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_filename(selfi: int) -> str: ...
    @overload
    def upd_filename(self) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def upd_orientation(selfi: int) -> Any: ...
    @overload
    def upd_orientation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ContactSphere:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfradius: float, location: Vec3, frame: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfradius: float, location: Vec3, frame: PhysicalFrame, name: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def append_orientation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation(self, *args, **kwargs) -> Any: ...
    def createSimTKContactGeometry(self) -> ContactGeometry: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOrientation(self) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRadius(self) -> float: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def get_orientation(selfi: int) -> Any: ...
    @overload
    def get_orientation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrientation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setRadius(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    def set_orientation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def upd_orientation(selfi: int) -> Any: ...
    @overload
    def upd_orientation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Control:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def filter(self, *args, **kwargs) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getControlValue(selfaT: float) -> float: ...
    def getControlValueMax(selfaT: float) -> float: ...
    def getControlValueMin(selfaT: float) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDefaultParameterMax(self) -> float: ...
    def getDefaultParameterMin(self) -> float: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExtrapolate(self) -> bool: ...
    def getFilterOn(self) -> bool: ...
    def getFirstTime(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getIsModelControl(self) -> bool: ...
    def getLastTime(self) -> float: ...
    def getName(self) -> str: ...
    def getNumParameters(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getParameterList(selfaT: float, rList: Array) -> int: ...
    @overload
    def getParameterList(selfaTLower: float, aTUpper: float, rList: Array) -> int: ...
    def getParameterMax(selfaI: int) -> float: ...
    def getParameterMin(selfaI: int) -> float: ...
    def getParameterNeighborhood(self, *args, **kwargs) -> Any: ...
    def getParameterTime(selfaI: int) -> float: ...
    def getParameterValue(selfaI: int) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControlValue(self, *args, **kwargs) -> Any: ...
    def setControlValueMax(self, *args, **kwargs) -> Any: ...
    def setControlValueMin(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultParameterMax(self, *args, **kwargs) -> Any: ...
    def setDefaultParameterMin(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setExtrapolate(self, *args, **kwargs) -> Any: ...
    def setFilterOn(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsModelControl(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParameterMax(self, *args, **kwargs) -> Any: ...
    def setParameterMin(self, *args, **kwargs) -> Any: ...
    def setParameterValue(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def simplify(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ControlConstant:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def filter(self, *args, **kwargs) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getControlValue(selfaT: float) -> float: ...
    def getControlValueMax(selfaT: float) -> float: ...
    def getControlValueMin(selfaT: float) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDefaultParameterMax(self) -> float: ...
    def getDefaultParameterMin(self) -> float: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExtrapolate(self) -> bool: ...
    def getFilterOn(self) -> bool: ...
    def getFirstTime(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getIsModelControl(self) -> bool: ...
    def getLastTime(self) -> float: ...
    def getName(self) -> str: ...
    def getNumParameters(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getParameterList(selfaT: float, rList: Array) -> int: ...
    @overload
    def getParameterList(selfaT1: float, aT2: float, rList: Array) -> int: ...
    def getParameterMax(selfaI: int) -> float: ...
    def getParameterMin(selfaI: int) -> float: ...
    def getParameterNeighborhood(self, *args, **kwargs) -> Any: ...
    def getParameterTime(selfaI: int) -> float: ...
    def getParameterValue(selfaI: int) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControlValue(self, *args, **kwargs) -> Any: ...
    def setControlValueMax(self, *args, **kwargs) -> Any: ...
    def setControlValueMin(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultParameterMax(self, *args, **kwargs) -> Any: ...
    def setDefaultParameterMin(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setExtrapolate(self, *args, **kwargs) -> Any: ...
    def setFilterOn(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsModelControl(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParameterMax(self, *args, **kwargs) -> Any: ...
    def setParameterMin(self, *args, **kwargs) -> Any: ...
    def setParameterValue(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def simplify(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ControlLinear:
    def Interpolate(selfaX1: float, aY1: float, aX2: float, aY2: float, aX: float) -> float: ...
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaControl: ControlLinear) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearControlNodes(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def copyData(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def filter(self, *args, **kwargs) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getControlMaxValues(self) -> Any: ...
    def getControlMinValues(self) -> Any: ...
    def getControlValue(selfaT: float) -> float: ...
    def getControlValueMax(selfaT: float) -> float: ...
    def getControlValueMin(selfaT: float) -> float: ...
    def getControlValues(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDefaultParameterMax(self) -> float: ...
    def getDefaultParameterMin(self) -> float: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExtrapolate(self) -> bool: ...
    def getFilterOn(self) -> bool: ...
    def getFirstTime(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getIsModelControl(self) -> bool: ...
    def getKp(self) -> float: ...
    def getKv(self) -> float: ...
    def getLastTime(self) -> float: ...
    def getName(self) -> str: ...
    def getNumParameters(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getParameterList(selfaT: float, rList: Array) -> int: ...
    @overload
    def getParameterList(selfaT1: float, aT2: float, rList: Array) -> int: ...
    def getParameterMax(selfaI: int) -> float: ...
    def getParameterMin(selfaI: int) -> float: ...
    def getParameterNeighborhood(self, *args, **kwargs) -> Any: ...
    def getParameterTime(selfaI: int) -> float: ...
    def getParameterValue(selfaI: int) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getUseSteps(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def insertNewMaxNode(self, *args, **kwargs) -> Any: ...
    def insertNewMinNode(self, *args, **kwargs) -> Any: ...
    def insertNewValueNode(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControlValue(self, *args, **kwargs) -> Any: ...
    def setControlValueMax(self, *args, **kwargs) -> Any: ...
    def setControlValueMin(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultParameterMax(self, *args, **kwargs) -> Any: ...
    def setDefaultParameterMin(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setExtrapolate(self, *args, **kwargs) -> Any: ...
    def setFilterOn(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsModelControl(self, *args, **kwargs) -> Any: ...
    def setKp(self, *args, **kwargs) -> Any: ...
    def setKv(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParameterMax(self, *args, **kwargs) -> Any: ...
    def setParameterMin(self, *args, **kwargs) -> Any: ...
    def setParameterValue(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setUseSteps(self, *args, **kwargs) -> Any: ...
    def simplify(selfcutoffFrequency: Any, distance: Any) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ControlLinearNode:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfaT: float, aValue: float) -> None: ...
    @overload
    def __init__(selfaNode: ControlLinearNode) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getTime(self) -> float: ...
    def getValue(self) -> float: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setTime(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ControlSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str) -> None: ...
    @overload
    def __init__(selfaSet: ControlSet) -> None: ...
    @overload
    def __init__(selfaStorage: Storage, nControlsToConvert: int, aStartIndex: int) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Control) -> bool: ...
    def constructStorage(selfaN: int, aT1: float, aT2: float, aForModelControls: bool) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def filter(self, *args, **kwargs) -> Any: ...
    def generateParameterMaps(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getControlList(self, *args, **kwargs) -> Any: ...
    def getControlValues(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Control, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumParameters(selfaForModelControls: bool) -> int: ...
    def getNumProperties(self) -> int: ...
    def getParameterList(self, *args, **kwargs) -> Any: ...
    def getParameterMaxs(self, *args, **kwargs) -> Any: ...
    def getParameterMins(self, *args, **kwargs) -> Any: ...
    def getParameterValues(self, *args, **kwargs) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(selfaForModelControls: bool) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Control) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def mapParameterToControl(selfaIndex: int) -> int: ...
    def mapParameterToParameter(selfaIndex: int) -> int: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Control) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Control, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControlValues(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParameterValues(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    def simplify(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Controller:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_actuators: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addActuator(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendSocketConnectee_actuators(self, *args, **kwargs) -> Any: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeControls(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumActuators(self) -> int: ...
    def getNumControls(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuators(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ControllerSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Controller) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Controller) -> bool: ...
    def computeControls(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructStorage(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControlTable(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Controller, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Controller) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printControlStorage(self, *args, **kwargs) -> Any: ...
    def printInfo(self, *args, **kwargs) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Controller) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Controller, preserveGroups: bool) -> bool: ...
    def setActuators(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDesiredStates(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    def storeControls(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Coordinate:
    Coupled: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    Rotational: Any
    def SafeCopy(selfaObject: Object) -> Any: ...
    Translational: Any
    Undefined: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaName: str, aMotionType: Coordinate, defaultValue: float, aRangeMin: float, aRangeMax: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_clamped(selfvalue: Any) -> int: ...
    def append_default_speed_value(selfvalue: Any) -> int: ...
    def append_default_value(selfvalue: Any) -> int: ...
    def append_is_free_to_satisfy_constraints(selfvalue: Any) -> int: ...
    def append_locked(selfvalue: Any) -> int: ...
    def append_prescribed(selfvalue: Any) -> int: ...
    def append_prescribed_function(selfvalue: Function) -> int: ...
    def append_range(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_clamped(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_speed_value(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_value(self, *args, **kwargs) -> Any: ...
    def constructProperty_is_free_to_satisfy_constraints(self, *args, **kwargs) -> Any: ...
    def constructProperty_locked(self, *args, **kwargs) -> Any: ...
    def constructProperty_prescribed(self, *args, **kwargs) -> Any: ...
    def constructProperty_prescribed_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_clamped(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_speed_value(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_value(self, *args, **kwargs) -> Any: ...
    def copyProperty_is_free_to_satisfy_constraints(self, *args, **kwargs) -> Any: ...
    def copyProperty_locked(self, *args, **kwargs) -> Any: ...
    def copyProperty_prescribed(self, *args, **kwargs) -> Any: ...
    def copyProperty_prescribed_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_range(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationValue(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getBodyIndex(self) -> MobilizedBodyIndex: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClamped(selfs: State) -> bool: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultClamped(self) -> bool: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDefaultIsPrescribed(self) -> bool: ...
    def getDefaultLocked(self) -> bool: ...
    def getDefaultSpeedValue(self) -> float: ...
    def getDefaultValue(self) -> float: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getJoint(self) -> Any: ...
    def getLocked(selfs: State) -> bool: ...
    def getMobilizerQIndex(self) -> int: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMotionType(self) -> Coordinate: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPrescribedFunction(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getQDotValue(selfs: State) -> float: ...
    def getRangeMax(self) -> float: ...
    def getRangeMin(self) -> float: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeedName(self) -> str: ...
    def getSpeedValue(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getUserSpecifiedMotionTypePriorTo40(self) -> Coordinate: ...
    def getValue(selfs: State) -> float: ...
    def get_clamped(selfi: int) -> Any: ...
    @overload
    def get_clamped(self) -> Any: ...
    def get_default_speed_value(selfi: int) -> Any: ...
    @overload
    def get_default_speed_value(self) -> Any: ...
    def get_default_value(selfi: int) -> Any: ...
    @overload
    def get_default_value(self) -> Any: ...
    def get_is_free_to_satisfy_constraints(selfi: int) -> Any: ...
    @overload
    def get_is_free_to_satisfy_constraints(self) -> Any: ...
    def get_locked(selfi: int) -> Any: ...
    @overload
    def get_locked(self) -> Any: ...
    def get_prescribed(selfi: int) -> Any: ...
    @overload
    def get_prescribed(self) -> Any: ...
    def get_prescribed_function(selfi: int) -> Any: ...
    @overload
    def get_prescribed_function(self) -> Any: ...
    def get_range(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isConstrained(selfs: State) -> bool: ...
    def isDependent(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isPrescribed(selfs: State) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setClamped(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultClamped(self, *args, **kwargs) -> Any: ...
    def setDefaultIsPrescribed(self, *args, **kwargs) -> Any: ...
    def setDefaultLocked(self, *args, **kwargs) -> Any: ...
    def setDefaultSpeedValue(self, *args, **kwargs) -> Any: ...
    def setDefaultValue(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsPrescribed(self, *args, **kwargs) -> Any: ...
    def setLocked(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPrescribedFunction(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setRangeMax(self, *args, **kwargs) -> Any: ...
    def setRangeMin(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSpeedValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def set_clamped(self, *args, **kwargs) -> Any: ...
    def set_default_speed_value(self, *args, **kwargs) -> Any: ...
    def set_default_value(self, *args, **kwargs) -> Any: ...
    def set_is_free_to_satisfy_constraints(self, *args, **kwargs) -> Any: ...
    def set_locked(self, *args, **kwargs) -> Any: ...
    def set_prescribed(self, *args, **kwargs) -> Any: ...
    def set_prescribed_function(self, *args, **kwargs) -> Any: ...
    def set_range(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_clamped(selfi: int) -> bool: ...
    @overload
    def upd_clamped(self) -> Any: ...
    def upd_default_speed_value(selfi: int) -> float: ...
    @overload
    def upd_default_speed_value(self) -> Any: ...
    def upd_default_value(selfi: int) -> float: ...
    @overload
    def upd_default_value(self) -> Any: ...
    def upd_is_free_to_satisfy_constraints(selfi: int) -> bool: ...
    @overload
    def upd_is_free_to_satisfy_constraints(self) -> Any: ...
    def upd_locked(selfi: int) -> bool: ...
    @overload
    def upd_locked(self) -> Any: ...
    def upd_prescribed(selfi: int) -> bool: ...
    @overload
    def upd_prescribed(self) -> Any: ...
    def upd_prescribed_function(selfi: int) -> Any: ...
    @overload
    def upd_prescribed_function(self) -> Any: ...
    def upd_range(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class CoordinateCouplerConstraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDependentCoordinateName(self) -> str: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFunction(self) -> Any: ...
    def getIndependentCoordinateNames(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDependentCoordinateName(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFunction(self, *args, **kwargs) -> Any: ...
    def setIndependentCoordinateNames(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class CoordinateLimitForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfcoordName: str, q_upper: float, K_upper: float, q_lower: float, K_lower: float, damping: float, dq: float, computeDissipationEnergy: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_compute_dissipation_energy(selfvalue: Any) -> int: ...
    def append_coordinate(selfvalue: str) -> int: ...
    def append_damping(selfvalue: Any) -> int: ...
    def append_lower_limit(selfvalue: Any) -> int: ...
    def append_lower_stiffness(selfvalue: Any) -> int: ...
    def append_transition(selfvalue: Any) -> int: ...
    def append_upper_limit(selfvalue: Any) -> int: ...
    def append_upper_stiffness(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcLimitForce(selfs: State) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computePotentialEnergy(selfs: State) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_compute_dissipation_energy(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def constructProperty_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_lower_limit(self, *args, **kwargs) -> Any: ...
    def constructProperty_lower_stiffness(self, *args, **kwargs) -> Any: ...
    def constructProperty_transition(self, *args, **kwargs) -> Any: ...
    def constructProperty_upper_limit(self, *args, **kwargs) -> Any: ...
    def constructProperty_upper_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_compute_dissipation_energy(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def copyProperty_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_lower_limit(self, *args, **kwargs) -> Any: ...
    def copyProperty_lower_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_transition(self, *args, **kwargs) -> Any: ...
    def copyProperty_upper_limit(self, *args, **kwargs) -> Any: ...
    def copyProperty_upper_stiffness(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDamping(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDissipatedEnergy(selfs: State) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLowerLimit(self) -> float: ...
    def getLowerStiffness(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPowerDissipation(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransition(self) -> float: ...
    def getUpperLimit(self) -> float: ...
    def getUpperStiffness(self) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_compute_dissipation_energy(selfi: int) -> Any: ...
    @overload
    def get_compute_dissipation_energy(self) -> Any: ...
    def get_coordinate(selfi: int) -> Any: ...
    @overload
    def get_coordinate(self) -> str: ...
    def get_damping(selfi: int) -> Any: ...
    @overload
    def get_damping(self) -> Any: ...
    def get_lower_limit(selfi: int) -> Any: ...
    @overload
    def get_lower_limit(self) -> Any: ...
    def get_lower_stiffness(selfi: int) -> Any: ...
    @overload
    def get_lower_stiffness(self) -> Any: ...
    def get_transition(selfi: int) -> Any: ...
    @overload
    def get_transition(self) -> Any: ...
    def get_upper_limit(selfi: int) -> Any: ...
    @overload
    def get_upper_limit(self) -> Any: ...
    def get_upper_stiffness(selfi: int) -> Any: ...
    @overload
    def get_upper_stiffness(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isComputingDissipationEnergy(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setComputeDissipationEnergy(self, *args, **kwargs) -> Any: ...
    def setDamping(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLowerLimit(self, *args, **kwargs) -> Any: ...
    def setLowerStiffness(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTransition(self, *args, **kwargs) -> Any: ...
    def setUpperLimit(self, *args, **kwargs) -> Any: ...
    def setUpperStiffness(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_compute_dissipation_energy(self, *args, **kwargs) -> Any: ...
    def set_coordinate(self, *args, **kwargs) -> Any: ...
    def set_damping(self, *args, **kwargs) -> Any: ...
    def set_lower_limit(self, *args, **kwargs) -> Any: ...
    def set_lower_stiffness(self, *args, **kwargs) -> Any: ...
    def set_transition(self, *args, **kwargs) -> Any: ...
    def set_upper_limit(self, *args, **kwargs) -> Any: ...
    def set_upper_stiffness(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_compute_dissipation_energy(selfi: int) -> bool: ...
    @overload
    def upd_compute_dissipation_energy(self) -> Any: ...
    def upd_coordinate(selfi: int) -> str: ...
    @overload
    def upd_coordinate(self) -> Any: ...
    def upd_damping(selfi: int) -> float: ...
    @overload
    def upd_damping(self) -> Any: ...
    def upd_lower_limit(selfi: int) -> float: ...
    @overload
    def upd_lower_limit(self) -> Any: ...
    def upd_lower_stiffness(selfi: int) -> float: ...
    @overload
    def upd_lower_stiffness(self) -> Any: ...
    def upd_transition(selfi: int) -> float: ...
    @overload
    def upd_transition(self) -> Any: ...
    def upd_upper_limit(selfi: int) -> float: ...
    @overload
    def upd_upper_limit(self) -> Any: ...
    def upd_upper_stiffness(selfi: int) -> float: ...
    @overload
    def upd_upper_stiffness(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class CoordinateReference:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: Any, ReferenceFunction: Function) -> None: ...
    @overload
    def __init__(selfsource: CoordinateReference) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAccelerationValue(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSpeedValue(selfs: State) -> float: ...
    def getValidTimeRange(self) -> Any: ...
    def getValue(selfs: State) -> float: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeight(selfs: State) -> float: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setValueFunction(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class CoordinateSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Coordinate) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Coordinate) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Coordinate, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSpeedNames(self, *args, **kwargs) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Coordinate) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def populate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Coordinate) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Coordinate, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class CustomJoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame, spatialTransform: SpatialTransform) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3, spatialTransform: SpatialTransform) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_SpatialTransform(selfvalue: SpatialTransform) -> int: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_SpatialTransform(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_SpatialTransform(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: Any) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpatialTransform(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_SpatialTransform(selfi: int) -> Any: ...
    @overload
    def get_SpatialTransform(self) -> Any: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_SpatialTransform(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: Any) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updSpatialTransform(self) -> Any: ...
    def upd_SpatialTransform(selfi: int) -> Any: ...
    @overload
    def upd_SpatialTransform(self) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Cylinder:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfradius: Any, hheight: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_half_height(selfvalue: Any) -> int: ...
    def append_radius(selfvalue: Any) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_half_height(self, *args, **kwargs) -> Any: ...
    def constructProperty_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_half_height(self, *args, **kwargs) -> Any: ...
    def copyProperty_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCylinderParams(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_half_height(selfi: int) -> Any: ...
    @overload
    def get_half_height(self) -> Any: ...
    def get_radius(selfi: int) -> Any: ...
    @overload
    def get_radius(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_half_height(self, *args, **kwargs) -> Any: ...
    def set_radius(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_half_height(selfi: int) -> float: ...
    @overload
    def upd_half_height(self) -> Any: ...
    def upd_radius(selfi: int) -> float: ...
    @overload
    def upd_radius(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ElasticFoundationForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfparams: ElasticFoundationForce) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addContactParameters(self, *args, **kwargs) -> Any: ...
    def addGeometry(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_contact_parameters(selfvalue: ElasticFoundationForce) -> int: ...
    def append_transition_velocity(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_contact_parameters(self, *args, **kwargs) -> Any: ...
    def constructProperty_transition_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_contact_parameters(self, *args, **kwargs) -> Any: ...
    def copyProperty_transition_velocity(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendAddToSystem(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getContactParametersSet(self) -> ElasticFoundationForce: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDissipation(self) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getDynamicFriction(self) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStaticFriction(self) -> float: ...
    def getStiffness(self) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransitionVelocity(self) -> float: ...
    def getViscousFriction(self) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_contact_parameters(selfi: int) -> ElasticFoundationForce: ...
    @overload
    def get_contact_parameters(self) -> ElasticFoundationForce: ...
    def get_transition_velocity(selfi: int) -> Any: ...
    @overload
    def get_transition_velocity(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setDissipation(self, *args, **kwargs) -> Any: ...
    def setDynamicFriction(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setStaticFriction(self, *args, **kwargs) -> Any: ...
    def setStiffness(self, *args, **kwargs) -> Any: ...
    def setTransitionVelocity(self, *args, **kwargs) -> Any: ...
    def setViscousFriction(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_contact_parameters(self, *args, **kwargs) -> Any: ...
    def set_transition_velocity(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updContactParametersSet(self) -> ElasticFoundationForce: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_contact_parameters(selfi: int) -> ElasticFoundationForce: ...
    @overload
    def upd_contact_parameters(self) -> ElasticFoundationForce: ...
    def upd_transition_velocity(selfi: int) -> float: ...
    @overload
    def upd_transition_velocity(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Ellipsoid:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfradius1: float, radius2: float, radius3: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_radii(selfvalue: Vec3) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_radii(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_radii(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_radii(selfi: int) -> Any: ...
    @overload
    def get_radii(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEllipsoidParams(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_radii(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_radii(selfi: int) -> Any: ...
    @overload
    def upd_radii(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class EllipsoidJoint:
    Coord_Rotation1X: Any
    Coord_Rotation2Y: Any
    Coord_Rotation3Z: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame, ellipsoidRadii: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3, ellipsoidRadii: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def append_radii_x_y_z(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_radii_x_y_z(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_radii_x_y_z(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: EllipsoidJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def get_radii_x_y_z(selfi: int) -> Any: ...
    @overload
    def get_radii_x_y_z(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEllipsoidRadii(self, *args, **kwargs) -> Any: ...
    def setEllipsoidVisible(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_radii_x_y_z(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: EllipsoidJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_radii_x_y_z(selfi: int) -> Any: ...
    @overload
    def upd_radii_x_y_z(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExpressionBasedBushingForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, frame2: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, frame2Name: str) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, point1: Vec3, orientation1: Vec3, frame2: PhysicalFrame, point2: Vec3, orientation2: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, point1: Vec3, orientation1: Vec3, frame2Name: str, point2: Vec3, orientation2: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, point1: Vec3, orientation1: Vec3, frame2: PhysicalFrame, point2: Vec3, orientation2: Vec3, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, point1: Vec3, orientation1: Vec3, frame2Name: str, point2: Vec3, orientation2: Vec3, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Fx_expression(selfvalue: str) -> int: ...
    def append_Fy_expression(selfvalue: str) -> int: ...
    def append_Fz_expression(selfvalue: str) -> int: ...
    def append_Mx_expression(selfvalue: str) -> int: ...
    def append_My_expression(selfvalue: str) -> int: ...
    def append_Mz_expression(selfvalue: str) -> int: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_force_visual_scale(selfvalue: Any) -> int: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def append_moment_visual_scale(selfvalue: Any) -> int: ...
    def append_rotational_damping(selfvalue: Vec3) -> int: ...
    def append_translational_damping(selfvalue: Vec3) -> int: ...
    def append_visual_aspect_ratio(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcBushingForce(selfstate: State) -> Any: ...
    def calcDampingForce(selfstate: State) -> Any: ...
    def calcStiffnessForce(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Fx_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_Fy_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_Fz_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_Mx_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_My_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_Mz_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_visual_scale(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_moment_visual_scale(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotational_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_translational_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_visual_aspect_ratio(self, *args, **kwargs) -> Any: ...
    def copyProperty_Fx_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_Fy_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_Fz_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_Mx_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_My_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_Mz_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_visual_scale(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_moment_visual_scale(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotational_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_translational_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_visual_aspect_ratio(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getFxExpression(self) -> str: ...
    def getFyExpression(self) -> str: ...
    def getFzExpression(self) -> str: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMxExpression(self) -> str: ...
    def getMyExpression(self) -> str: ...
    def getMzExpression(self) -> str: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Fx_expression(selfi: int) -> Any: ...
    @overload
    def get_Fx_expression(self) -> str: ...
    def get_Fy_expression(selfi: int) -> Any: ...
    @overload
    def get_Fy_expression(self) -> str: ...
    def get_Fz_expression(selfi: int) -> Any: ...
    @overload
    def get_Fz_expression(self) -> str: ...
    def get_Mx_expression(selfi: int) -> Any: ...
    @overload
    def get_Mx_expression(self) -> str: ...
    def get_My_expression(selfi: int) -> Any: ...
    @overload
    def get_My_expression(self) -> str: ...
    def get_Mz_expression(selfi: int) -> Any: ...
    @overload
    def get_Mz_expression(self) -> str: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_force_visual_scale(selfi: int) -> Any: ...
    @overload
    def get_force_visual_scale(self) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def get_moment_visual_scale(selfi: int) -> Any: ...
    @overload
    def get_moment_visual_scale(self) -> Any: ...
    def get_rotational_damping(selfi: int) -> Any: ...
    @overload
    def get_rotational_damping(self) -> Any: ...
    def get_translational_damping(selfi: int) -> Any: ...
    @overload
    def get_translational_damping(self) -> Any: ...
    def get_visual_aspect_ratio(selfi: int) -> Any: ...
    @overload
    def get_visual_aspect_ratio(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setForceVisualScale(self, *args, **kwargs) -> Any: ...
    def setFxExpression(self, *args, **kwargs) -> Any: ...
    def setFyExpression(self, *args, **kwargs) -> Any: ...
    def setFzExpression(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setMomentVisualScale(self, *args, **kwargs) -> Any: ...
    def setMxExpression(self, *args, **kwargs) -> Any: ...
    def setMyExpression(self, *args, **kwargs) -> Any: ...
    def setMzExpression(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setVisualAspectRatio(self, *args, **kwargs) -> Any: ...
    def set_Fx_expression(self, *args, **kwargs) -> Any: ...
    def set_Fy_expression(self, *args, **kwargs) -> Any: ...
    def set_Fz_expression(self, *args, **kwargs) -> Any: ...
    def set_Mx_expression(self, *args, **kwargs) -> Any: ...
    def set_My_expression(self, *args, **kwargs) -> Any: ...
    def set_Mz_expression(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_force_visual_scale(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_moment_visual_scale(self, *args, **kwargs) -> Any: ...
    def set_rotational_damping(self, *args, **kwargs) -> Any: ...
    def set_translational_damping(self, *args, **kwargs) -> Any: ...
    def set_visual_aspect_ratio(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Fx_expression(selfi: int) -> str: ...
    @overload
    def upd_Fx_expression(self) -> Any: ...
    def upd_Fy_expression(selfi: int) -> str: ...
    @overload
    def upd_Fy_expression(self) -> Any: ...
    def upd_Fz_expression(selfi: int) -> str: ...
    @overload
    def upd_Fz_expression(self) -> Any: ...
    def upd_Mx_expression(selfi: int) -> str: ...
    @overload
    def upd_Mx_expression(self) -> Any: ...
    def upd_My_expression(selfi: int) -> str: ...
    @overload
    def upd_My_expression(self) -> Any: ...
    def upd_Mz_expression(selfi: int) -> str: ...
    @overload
    def upd_Mz_expression(self) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_force_visual_scale(selfi: int) -> float: ...
    @overload
    def upd_force_visual_scale(self) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_moment_visual_scale(selfi: int) -> float: ...
    @overload
    def upd_moment_visual_scale(self) -> Any: ...
    def upd_rotational_damping(selfi: int) -> Any: ...
    @overload
    def upd_rotational_damping(self) -> Any: ...
    def upd_translational_damping(selfi: int) -> Any: ...
    @overload
    def upd_translational_damping(self) -> Any: ...
    def upd_visual_aspect_ratio(selfi: int) -> float: ...
    @overload
    def upd_visual_aspect_ratio(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExpressionBasedCoordinateForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfcoordinate: str, expression: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_coordinate(selfvalue: str) -> int: ...
    def append_expression(selfvalue: str) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcExpressionForce(selfs: State) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def constructProperty_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def copyProperty_expression(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinateName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceMagnitude(selfstate: State) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_coordinate(selfi: int) -> Any: ...
    @overload
    def get_coordinate(self) -> str: ...
    def get_expression(selfi: int) -> Any: ...
    @overload
    def get_expression(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCoordinateName(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExpression(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_coordinate(self, *args, **kwargs) -> Any: ...
    def set_expression(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_coordinate(selfi: int) -> str: ...
    @overload
    def upd_coordinate(self) -> Any: ...
    def upd_expression(selfi: int) -> str: ...
    @overload
    def upd_expression(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExpressionBasedPathForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, restLength: float, expression: str, clampStretch: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_clamp_stretch(selfvalue: Any) -> int: ...
    def append_expression(selfvalue: str) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_resting_length(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_clamp_stretch(self, *args, **kwargs) -> Any: ...
    def constructProperty_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_resting_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_clamp_stretch(self, *args, **kwargs) -> Any: ...
    def copyProperty_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_resting_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClampStretch(self) -> bool: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExpression(self) -> str: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getGeometryPath(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRestingLength(self) -> float: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStretch(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTension(selfs: State) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_clamp_stretch(selfi: int) -> Any: ...
    @overload
    def get_clamp_stretch(self) -> Any: ...
    def get_expression(selfi: int) -> Any: ...
    @overload
    def get_expression(self) -> str: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_resting_length(selfi: int) -> Any: ...
    @overload
    def get_resting_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setClampStretch(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExpression(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRestingLength(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_clamp_stretch(self, *args, **kwargs) -> Any: ...
    def set_expression(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_resting_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_clamp_stretch(selfi: int) -> bool: ...
    @overload
    def upd_clamp_stretch(self) -> Any: ...
    def upd_expression(selfi: int) -> str: ...
    @overload
    def upd_expression(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_resting_length(selfi: int) -> float: ...
    @overload
    def upd_resting_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExpressionBasedPointToPointForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfbody1Name: str, point1: Vec3, body2Name: str, point2: Vec3, expression: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_body1(selfvalue: str) -> int: ...
    def append_body2(selfvalue: str) -> int: ...
    def append_expression(selfvalue: str) -> int: ...
    def append_point1(selfvalue: Vec3) -> int: ...
    def append_point2(selfvalue: Vec3) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_body1(self, *args, **kwargs) -> Any: ...
    def constructProperty_body2(self, *args, **kwargs) -> Any: ...
    def constructProperty_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_point1(self, *args, **kwargs) -> Any: ...
    def constructProperty_point2(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_body1(self, *args, **kwargs) -> Any: ...
    def copyProperty_body2(self, *args, **kwargs) -> Any: ...
    def copyProperty_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_point1(self, *args, **kwargs) -> Any: ...
    def copyProperty_point2(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody1Name(self) -> str: ...
    def getBody2Name(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceMagnitude(selfstate: State) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPoint1(self) -> Any: ...
    def getPoint2(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_body1(selfi: int) -> Any: ...
    @overload
    def get_body1(self) -> str: ...
    def get_body2(selfi: int) -> Any: ...
    @overload
    def get_body2(self) -> str: ...
    def get_expression(selfi: int) -> Any: ...
    @overload
    def get_expression(self) -> str: ...
    def get_point1(selfi: int) -> Any: ...
    @overload
    def get_point1(self) -> Any: ...
    def get_point2(selfi: int) -> Any: ...
    @overload
    def get_point2(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody1Name(self, *args, **kwargs) -> Any: ...
    def setBody2Name(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExpression(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPoint1(self, *args, **kwargs) -> Any: ...
    def setPoint2(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_body1(self, *args, **kwargs) -> Any: ...
    def set_body2(self, *args, **kwargs) -> Any: ...
    def set_expression(self, *args, **kwargs) -> Any: ...
    def set_point1(self, *args, **kwargs) -> Any: ...
    def set_point2(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_body1(selfi: int) -> str: ...
    @overload
    def upd_body1(self) -> Any: ...
    def upd_body2(selfi: int) -> str: ...
    @overload
    def upd_body2(self) -> Any: ...
    def upd_expression(selfi: int) -> str: ...
    @overload
    def upd_expression(self) -> Any: ...
    def upd_point1(selfi: int) -> Any: ...
    @overload
    def upd_point1(self) -> Any: ...
    def upd_point2(selfi: int) -> Any: ...
    @overload
    def upd_point2(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExternalForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfdataSource: Storage, forceIdentifier: str, pointIdentifier: str, torqueIdentifier: str, appliedToBodyName: str, forceExpressedInBodyName: str, pointExpressedInBodyName: str) -> None: ...
    @overload
    def __init__(selfaNode: Xml) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_applied_to_body(selfvalue: str) -> int: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_data_source_name(selfvalue: str) -> int: ...
    def append_force_expressed_in_body(selfvalue: str) -> int: ...
    def append_force_identifier(selfvalue: str) -> int: ...
    def append_point_expressed_in_body(selfvalue: str) -> int: ...
    def append_point_identifier(selfvalue: str) -> int: ...
    def append_torque_identifier(selfvalue: str) -> int: ...
    def appliesForce(self) -> bool: ...
    def appliesTorque(self) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_applied_to_body(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_data_source_name(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_expressed_in_body(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_identifier(self, *args, **kwargs) -> Any: ...
    def constructProperty_point_expressed_in_body(self, *args, **kwargs) -> Any: ...
    def constructProperty_point_identifier(self, *args, **kwargs) -> Any: ...
    def constructProperty_torque_identifier(self, *args, **kwargs) -> Any: ...
    def copyProperty_applied_to_body(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_data_source_name(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_expressed_in_body(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_identifier(self, *args, **kwargs) -> Any: ...
    def copyProperty_point_expressed_in_body(self, *args, **kwargs) -> Any: ...
    def copyProperty_point_identifier(self, *args, **kwargs) -> Any: ...
    def copyProperty_torque_identifier(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAppliedToBodyName(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDataSourceName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceAtTime(selfaTime: float) -> Any: ...
    def getForceExpressedInBodyName(self) -> str: ...
    def getForceIdentifier(self) -> str: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPointAtTime(selfaTime: float) -> Any: ...
    def getPointExpressedInBodyName(self) -> str: ...
    def getPointIdentifier(self) -> str: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTorqueAtTime(selfaTime: float) -> Any: ...
    def getTorqueIdentifier(self) -> str: ...
    def get_applied_to_body(selfi: int) -> Any: ...
    @overload
    def get_applied_to_body(self) -> str: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_data_source_name(selfi: int) -> Any: ...
    @overload
    def get_data_source_name(self) -> str: ...
    def get_force_expressed_in_body(selfi: int) -> Any: ...
    @overload
    def get_force_expressed_in_body(self) -> str: ...
    def get_force_identifier(selfi: int) -> Any: ...
    @overload
    def get_force_identifier(self) -> str: ...
    def get_point_expressed_in_body(selfi: int) -> Any: ...
    @overload
    def get_point_expressed_in_body(self) -> str: ...
    def get_point_identifier(selfi: int) -> Any: ...
    @overload
    def get_point_identifier(self) -> str: ...
    def get_torque_identifier(selfi: int) -> Any: ...
    @overload
    def get_torque_identifier(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliedToBodyName(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDataSource(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setForceExpressedInBodyName(self, *args, **kwargs) -> Any: ...
    def setForceIdentifier(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPointExpressedInBodyName(self, *args, **kwargs) -> Any: ...
    def setPointIdentifier(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTorqueIdentifier(self, *args, **kwargs) -> Any: ...
    def set_applied_to_body(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_data_source_name(self, *args, **kwargs) -> Any: ...
    def set_force_expressed_in_body(self, *args, **kwargs) -> Any: ...
    def set_force_identifier(self, *args, **kwargs) -> Any: ...
    def set_point_expressed_in_body(self, *args, **kwargs) -> Any: ...
    def set_point_identifier(self, *args, **kwargs) -> Any: ...
    def set_torque_identifier(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    def specifiesPoint(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_applied_to_body(selfi: int) -> str: ...
    @overload
    def upd_applied_to_body(self) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_data_source_name(selfi: int) -> str: ...
    @overload
    def upd_data_source_name(self) -> Any: ...
    def upd_force_expressed_in_body(selfi: int) -> str: ...
    @overload
    def upd_force_expressed_in_body(self) -> Any: ...
    def upd_force_identifier(selfi: int) -> str: ...
    @overload
    def upd_force_identifier(self) -> Any: ...
    def upd_point_expressed_in_body(selfi: int) -> str: ...
    @overload
    def upd_point_expressed_in_body(self) -> Any: ...
    def upd_point_identifier(selfi: int) -> str: ...
    @overload
    def upd_point_identifier(self) -> Any: ...
    def upd_torque_identifier(selfi: int) -> str: ...
    @overload
    def upd_torque_identifier(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExternalLoads:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaExternalLoads: ExternalLoads) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ExternalForce) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearLoadedFromFile(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ExternalForce) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def copyData(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendConnectToModel(self, *args, **kwargs) -> Any: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDataFileName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ExternalForce, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ExternalForce) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ExternalForce) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ExternalForce, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDataFileName(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def transformPointExpressedInGroundToAppliedBody(selfexForce: ExternalForce, kinematics: Storage, startTime: float, endTime: float) -> Any: ...
    def transformPointsExpressedInGroundToAppliedBodies(self, *args, **kwargs) -> Any: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FiberCompressiveForceCosPennationCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfengagementAngleInDegrees: float, stiffnessAtPerpendicular: float, curviness: float, muscleName: str) -> None: ...
    @overload
    def __init__(selfengagementAngleInDegrees: float, muscleName: str) -> None: ...
    def append_curviness(selfvalue: Any) -> int: ...
    def append_engagement_angle_in_degrees(selfvalue: Any) -> int: ...
    def append_stiffness_at_perpendicular(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfcosPennationAngle: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcIntegral(selfcosPennationAngle: float) -> float: ...
    def calcValue(selfcosPennationAngle: float) -> float: ...
    @overload
    def calcValue(selfx: Any) -> float: ...
    def clone(self) -> Any: ...
    def constructProperty_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_engagement_angle_in_degrees(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness_at_perpendicular(self, *args, **kwargs) -> Any: ...
    def copyProperty_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_engagement_angle_in_degrees(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness_at_perpendicular(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getCurvinessInUse(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEngagementAngleInDegrees(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStiffnessAtPerpendicularInUse(self) -> float: ...
    def get_curviness(selfi: int) -> Any: ...
    @overload
    def get_curviness(self) -> Any: ...
    def get_engagement_angle_in_degrees(selfi: int) -> Any: ...
    @overload
    def get_engagement_angle_in_degrees(self) -> Any: ...
    def get_stiffness_at_perpendicular(selfi: int) -> Any: ...
    @overload
    def get_stiffness_at_perpendicular(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isFittedCurveBeingUsed(self) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setEngagementAngleInDegrees(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptionalProperties(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_curviness(self, *args, **kwargs) -> Any: ...
    def set_engagement_angle_in_degrees(self, *args, **kwargs) -> Any: ...
    def set_stiffness_at_perpendicular(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_curviness(selfi: int) -> float: ...
    @overload
    def upd_curviness(self) -> Any: ...
    def upd_engagement_angle_in_degrees(selfi: int) -> float: ...
    @overload
    def upd_engagement_angle_in_degrees(self) -> Any: ...
    def upd_stiffness_at_perpendicular(selfi: int) -> float: ...
    @overload
    def upd_stiffness_at_perpendicular(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FiberCompressiveForceLengthCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfnormLengthAtZeroForce: float, stiffnessAtZeroLength: float, curviness: float, muscleName: str) -> None: ...
    def append_curviness(selfvalue: Any) -> int: ...
    def append_norm_length_at_zero_force(selfvalue: Any) -> int: ...
    def append_stiffness_at_zero_length(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfaNormLength: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcIntegral(selfaNormLength: float) -> float: ...
    def calcValue(selfaNormLength: float) -> float: ...
    @overload
    def calcValue(selfx: Any) -> float: ...
    def clone(self) -> Any: ...
    def constructProperty_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_norm_length_at_zero_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness_at_zero_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_norm_length_at_zero_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness_at_zero_length(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getCurvinessInUse(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNormLengthAtZeroForce(self) -> float: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStiffnessAtZeroLengthInUse(self) -> float: ...
    def get_curviness(selfi: int) -> Any: ...
    @overload
    def get_curviness(self) -> Any: ...
    def get_norm_length_at_zero_force(selfi: int) -> Any: ...
    @overload
    def get_norm_length_at_zero_force(self) -> Any: ...
    def get_stiffness_at_zero_length(selfi: int) -> Any: ...
    @overload
    def get_stiffness_at_zero_length(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isFittedCurveBeingUsed(self) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNormLengthAtZeroForce(self, *args, **kwargs) -> Any: ...
    def setOptionalProperties(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_curviness(self, *args, **kwargs) -> Any: ...
    def set_norm_length_at_zero_force(self, *args, **kwargs) -> Any: ...
    def set_stiffness_at_zero_length(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_curviness(selfi: int) -> float: ...
    @overload
    def upd_curviness(self) -> Any: ...
    def upd_norm_length_at_zero_force(selfi: int) -> float: ...
    @overload
    def upd_norm_length_at_zero_force(self) -> Any: ...
    def upd_stiffness_at_zero_length(selfi: int) -> float: ...
    @overload
    def upd_stiffness_at_zero_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FiberForceLengthCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfstrainAtZeroForce: float, strainAtOneNormForce: float, stiffnessAtLowForce: float, stiffnessAtOneNormForce: float, curviness: float) -> None: ...
    def append_curviness(selfvalue: Any) -> int: ...
    def append_stiffness_at_low_force(selfvalue: Any) -> int: ...
    def append_stiffness_at_one_norm_force(selfvalue: Any) -> int: ...
    def append_strain_at_one_norm_force(selfvalue: Any) -> int: ...
    def append_strain_at_zero_force(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfnormFiberLength: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcIntegral(selfnormFiberLength: float) -> float: ...
    def calcValue(selfx: Any) -> float: ...
    @overload
    def calcValue(selfnormFiberLength: float) -> float: ...
    def calcValueAndDerivative(selfnormFiberLength: float) -> SmoothSegmentedFunction: ...
    def clone(self) -> Any: ...
    def constructProperty_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness_at_low_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_strain_at_zero_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness_at_low_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_strain_at_zero_force(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getCurvinessInUse(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStiffnessAtLowForceInUse(self) -> float: ...
    def getStiffnessAtOneNormForceInUse(self) -> float: ...
    def getStrainAtOneNormForce(self) -> float: ...
    def getStrainAtZeroForce(self) -> float: ...
    def get_curviness(selfi: int) -> Any: ...
    @overload
    def get_curviness(self) -> Any: ...
    def get_stiffness_at_low_force(selfi: int) -> Any: ...
    @overload
    def get_stiffness_at_low_force(self) -> Any: ...
    def get_stiffness_at_one_norm_force(selfi: int) -> Any: ...
    @overload
    def get_stiffness_at_one_norm_force(self) -> Any: ...
    def get_strain_at_one_norm_force(selfi: int) -> Any: ...
    @overload
    def get_strain_at_one_norm_force(self) -> Any: ...
    def get_strain_at_zero_force(selfi: int) -> Any: ...
    @overload
    def get_strain_at_zero_force(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isFittedCurveBeingUsed(self) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCurveStrains(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptionalProperties(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_curviness(self, *args, **kwargs) -> Any: ...
    def set_stiffness_at_low_force(self, *args, **kwargs) -> Any: ...
    def set_stiffness_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def set_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def set_strain_at_zero_force(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_curviness(selfi: int) -> float: ...
    @overload
    def upd_curviness(self) -> Any: ...
    def upd_stiffness_at_low_force(selfi: int) -> float: ...
    @overload
    def upd_stiffness_at_low_force(self) -> Any: ...
    def upd_stiffness_at_one_norm_force(selfi: int) -> float: ...
    @overload
    def upd_stiffness_at_one_norm_force(self) -> Any: ...
    def upd_strain_at_one_norm_force(selfi: int) -> float: ...
    @overload
    def upd_strain_at_one_norm_force(self) -> Any: ...
    def upd_strain_at_zero_force(selfi: int) -> float: ...
    @overload
    def upd_strain_at_zero_force(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Force:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ForceProducer:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ForceSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfarg2: ForceSet) -> None: ...
    @overload
    def __init__(selfarg2: ForceSet) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def append(self, *args, **kwargs) -> Any: ...
    def appendNative(selfaForce: Force) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def check(self) -> bool: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Force) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendConnectToModel(self, *args, **kwargs) -> Any: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuators(self) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Force, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMuscles(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self, *args, **kwargs) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Force) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aForce: Force, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updActuators(self) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updMuscles(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ForceVelocityCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfconcentricSlopeAtVmax: float, concentricSlopeNearVmax: float, isometricSlope: float, eccentricSlopeAtVmax: float, eccentricSlopeNearVmax: float, maxEccentricVelocityForceMultiplier: float, concentricCurviness: float, eccentricCurviness: float) -> None: ...
    def append_concentric_curviness(selfvalue: Any) -> int: ...
    def append_concentric_slope_at_vmax(selfvalue: Any) -> int: ...
    def append_concentric_slope_near_vmax(selfvalue: Any) -> int: ...
    def append_eccentric_curviness(selfvalue: Any) -> int: ...
    def append_eccentric_slope_at_vmax(selfvalue: Any) -> int: ...
    def append_eccentric_slope_near_vmax(selfvalue: Any) -> int: ...
    def append_isometric_slope(selfvalue: Any) -> int: ...
    def append_max_eccentric_velocity_force_multiplier(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfnormFiberVelocity: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcValue(selfx: Any) -> float: ...
    @overload
    def calcValue(selfnormFiberVelocity: float) -> float: ...
    def calcValueAndDerivative(selfnormFiberVelocity: float) -> SmoothSegmentedFunction: ...
    def clone(self) -> Any: ...
    def constructProperty_concentric_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_concentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_concentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_eccentric_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_eccentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_eccentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_isometric_slope(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_eccentric_velocity_force_multiplier(self, *args, **kwargs) -> Any: ...
    def copyProperty_concentric_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_concentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_concentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_eccentric_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_eccentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_eccentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_isometric_slope(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_eccentric_velocity_force_multiplier(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcentricCurviness(self) -> float: ...
    def getConcentricSlopeAtVmax(self) -> float: ...
    def getConcentricSlopeNearVmax(self) -> float: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEccentricCurviness(self) -> float: ...
    def getEccentricSlopeAtVmax(self) -> float: ...
    def getEccentricSlopeNearVmax(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getIsometricSlope(self) -> float: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getMaxEccentricVelocityForceMultiplier(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_concentric_curviness(selfi: int) -> Any: ...
    @overload
    def get_concentric_curviness(self) -> Any: ...
    def get_concentric_slope_at_vmax(selfi: int) -> Any: ...
    @overload
    def get_concentric_slope_at_vmax(self) -> Any: ...
    def get_concentric_slope_near_vmax(selfi: int) -> Any: ...
    @overload
    def get_concentric_slope_near_vmax(self) -> Any: ...
    def get_eccentric_curviness(selfi: int) -> Any: ...
    @overload
    def get_eccentric_curviness(self) -> Any: ...
    def get_eccentric_slope_at_vmax(selfi: int) -> Any: ...
    @overload
    def get_eccentric_slope_at_vmax(self) -> Any: ...
    def get_eccentric_slope_near_vmax(selfi: int) -> Any: ...
    @overload
    def get_eccentric_slope_near_vmax(self) -> Any: ...
    def get_isometric_slope(selfi: int) -> Any: ...
    @overload
    def get_isometric_slope(self) -> Any: ...
    def get_max_eccentric_velocity_force_multiplier(selfi: int) -> Any: ...
    @overload
    def get_max_eccentric_velocity_force_multiplier(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setConcentricCurviness(self, *args, **kwargs) -> Any: ...
    def setCurveShape(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setEccentricCurviness(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_concentric_curviness(self, *args, **kwargs) -> Any: ...
    def set_concentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def set_concentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def set_eccentric_curviness(self, *args, **kwargs) -> Any: ...
    def set_eccentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def set_eccentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def set_isometric_slope(self, *args, **kwargs) -> Any: ...
    def set_max_eccentric_velocity_force_multiplier(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_concentric_curviness(selfi: int) -> float: ...
    @overload
    def upd_concentric_curviness(self) -> Any: ...
    def upd_concentric_slope_at_vmax(selfi: int) -> float: ...
    @overload
    def upd_concentric_slope_at_vmax(self) -> Any: ...
    def upd_concentric_slope_near_vmax(selfi: int) -> float: ...
    @overload
    def upd_concentric_slope_near_vmax(self) -> Any: ...
    def upd_eccentric_curviness(selfi: int) -> float: ...
    @overload
    def upd_eccentric_curviness(self) -> Any: ...
    def upd_eccentric_slope_at_vmax(selfi: int) -> float: ...
    @overload
    def upd_eccentric_slope_at_vmax(self) -> Any: ...
    def upd_eccentric_slope_near_vmax(selfi: int) -> float: ...
    @overload
    def upd_eccentric_slope_near_vmax(self) -> Any: ...
    def upd_isometric_slope(selfi: int) -> float: ...
    @overload
    def upd_isometric_slope(self) -> Any: ...
    def upd_max_eccentric_velocity_force_multiplier(selfi: int) -> float: ...
    @overload
    def upd_max_eccentric_velocity_force_multiplier(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ForceVelocityInverseCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfconcentricSlopeAtVmax: float, concentricSlopeNearVmax: float, isometricSlope: float, eccentricSlopeAtVmax: float, eccentricSlopeNearVmax: float, maxEccentricVelocityForceMultiplier: float, concentricCurviness: float, eccentricCurviness: float) -> None: ...
    def append_concentric_curviness(selfvalue: Any) -> int: ...
    def append_concentric_slope_at_vmax(selfvalue: Any) -> int: ...
    def append_concentric_slope_near_vmax(selfvalue: Any) -> int: ...
    def append_eccentric_curviness(selfvalue: Any) -> int: ...
    def append_eccentric_slope_at_vmax(selfvalue: Any) -> int: ...
    def append_eccentric_slope_near_vmax(selfvalue: Any) -> int: ...
    def append_isometric_slope(selfvalue: Any) -> int: ...
    def append_max_eccentric_velocity_force_multiplier(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfaForceVelocityMultiplier: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcValue(selfx: Any) -> float: ...
    @overload
    def calcValue(selfaForceVelocityMultiplier: float) -> float: ...
    def clone(self) -> Any: ...
    def constructProperty_concentric_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_concentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_concentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_eccentric_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_eccentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_eccentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def constructProperty_isometric_slope(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_eccentric_velocity_force_multiplier(self, *args, **kwargs) -> Any: ...
    def copyProperty_concentric_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_concentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_concentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_eccentric_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_eccentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_eccentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def copyProperty_isometric_slope(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_eccentric_velocity_force_multiplier(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcentricCurviness(self) -> float: ...
    def getConcentricSlopeAtVmax(self) -> float: ...
    def getConcentricSlopeNearVmax(self) -> float: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEccentricCurviness(self) -> float: ...
    def getEccentricSlopeAtVmax(self) -> float: ...
    def getEccentricSlopeNearVmax(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getIsometricSlope(self) -> float: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getMaxEccentricVelocityForceMultiplier(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_concentric_curviness(selfi: int) -> Any: ...
    @overload
    def get_concentric_curviness(self) -> Any: ...
    def get_concentric_slope_at_vmax(selfi: int) -> Any: ...
    @overload
    def get_concentric_slope_at_vmax(self) -> Any: ...
    def get_concentric_slope_near_vmax(selfi: int) -> Any: ...
    @overload
    def get_concentric_slope_near_vmax(self) -> Any: ...
    def get_eccentric_curviness(selfi: int) -> Any: ...
    @overload
    def get_eccentric_curviness(self) -> Any: ...
    def get_eccentric_slope_at_vmax(selfi: int) -> Any: ...
    @overload
    def get_eccentric_slope_at_vmax(self) -> Any: ...
    def get_eccentric_slope_near_vmax(selfi: int) -> Any: ...
    @overload
    def get_eccentric_slope_near_vmax(self) -> Any: ...
    def get_isometric_slope(selfi: int) -> Any: ...
    @overload
    def get_isometric_slope(self) -> Any: ...
    def get_max_eccentric_velocity_force_multiplier(selfi: int) -> Any: ...
    @overload
    def get_max_eccentric_velocity_force_multiplier(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setConcentricCurviness(self, *args, **kwargs) -> Any: ...
    def setCurveShape(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setEccentricCurviness(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_concentric_curviness(self, *args, **kwargs) -> Any: ...
    def set_concentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def set_concentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def set_eccentric_curviness(self, *args, **kwargs) -> Any: ...
    def set_eccentric_slope_at_vmax(self, *args, **kwargs) -> Any: ...
    def set_eccentric_slope_near_vmax(self, *args, **kwargs) -> Any: ...
    def set_isometric_slope(self, *args, **kwargs) -> Any: ...
    def set_max_eccentric_velocity_force_multiplier(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_concentric_curviness(selfi: int) -> float: ...
    @overload
    def upd_concentric_curviness(self) -> Any: ...
    def upd_concentric_slope_at_vmax(selfi: int) -> float: ...
    @overload
    def upd_concentric_slope_at_vmax(self) -> Any: ...
    def upd_concentric_slope_near_vmax(selfi: int) -> float: ...
    @overload
    def upd_concentric_slope_near_vmax(self) -> Any: ...
    def upd_eccentric_curviness(selfi: int) -> float: ...
    @overload
    def upd_eccentric_curviness(self) -> Any: ...
    def upd_eccentric_slope_at_vmax(selfi: int) -> float: ...
    @overload
    def upd_eccentric_slope_at_vmax(self) -> Any: ...
    def upd_eccentric_slope_near_vmax(selfi: int) -> float: ...
    @overload
    def upd_eccentric_slope_near_vmax(self) -> Any: ...
    def upd_isometric_slope(selfi: int) -> float: ...
    @overload
    def upd_isometric_slope(self) -> Any: ...
    def upd_max_eccentric_velocity_force_multiplier(selfi: int) -> float: ...
    @overload
    def upd_max_eccentric_velocity_force_multiplier(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Frame:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_attached_geometry(selfvalue: Geometry) -> int: ...
    def append_frame_geometry(selfvalue: FrameGeometry) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def attachGeometry(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaleAttachedGeometry(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_attached_geometry(self, *args, **kwargs) -> Any: ...
    def set_frame_geometry(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_attached_geometry(selfi: int) -> Any: ...
    def upd_frame_geometry(selfi: int) -> Any: ...
    @overload
    def upd_frame_geometry(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FrameGeometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfscale: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_display_radius(selfvalue: Any) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_display_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_display_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_display_radius(selfi: int) -> Any: ...
    @overload
    def get_display_radius(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_display_radius(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_display_radius(selfi: int) -> float: ...
    @overload
    def upd_display_radius(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FrameIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FrameList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class FreeJoint:
    Coord_Rotation1X: Any
    Coord_Rotation2Y: Any
    Coord_Rotation3Z: Any
    Coord_TranslationX: Any
    Coord_TranslationY: Any
    Coord_TranslationZ: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: FreeJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: FreeJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FunctionBasedBushingForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, point1: Vec3, orientation1: Vec3, frame2: PhysicalFrame, point2: Vec3, orientation2: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, point1: Vec3, orientation1: Vec3, frame2Name: str, point2: Vec3, orientation2: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, point1: Vec3, orientation1: Vec3, frame2: PhysicalFrame, point2: Vec3, orientation2: Vec3, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, point1: Vec3, orientation1: Vec3, frame2Name: str, point2: Vec3, orientation2: Vec3, transStiffness: Vec3, rotStiffness: Vec3, transDamping: Vec3, rotDamping: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_f_x_delta_x_function(selfvalue: Function) -> int: ...
    def append_f_y_delta_y_function(selfvalue: Function) -> int: ...
    def append_f_z_delta_z_function(selfvalue: Function) -> int: ...
    def append_force_visual_scale(selfvalue: Any) -> int: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def append_m_x_theta_x_function(selfvalue: Function) -> int: ...
    def append_m_y_theta_y_function(selfvalue: Function) -> int: ...
    def append_m_z_theta_z_function(selfvalue: Function) -> int: ...
    def append_moment_visual_scale(selfvalue: Any) -> int: ...
    def append_rotational_damping(selfvalue: Vec3) -> int: ...
    def append_translational_damping(selfvalue: Vec3) -> int: ...
    def append_visual_aspect_ratio(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDampingForce(selfstate: State) -> Any: ...
    def calcStiffnessForce(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_f_x_delta_x_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_f_y_delta_y_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_f_z_delta_z_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_visual_scale(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_m_x_theta_x_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_m_y_theta_y_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_m_z_theta_z_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_moment_visual_scale(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotational_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_translational_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_visual_aspect_ratio(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_f_x_delta_x_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_f_y_delta_y_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_f_z_delta_z_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_visual_scale(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_m_x_theta_x_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_m_y_theta_y_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_m_z_theta_z_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_moment_visual_scale(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotational_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_translational_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_visual_aspect_ratio(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_f_x_delta_x_function(selfi: int) -> Any: ...
    @overload
    def get_f_x_delta_x_function(self) -> Any: ...
    def get_f_y_delta_y_function(selfi: int) -> Any: ...
    @overload
    def get_f_y_delta_y_function(self) -> Any: ...
    def get_f_z_delta_z_function(selfi: int) -> Any: ...
    @overload
    def get_f_z_delta_z_function(self) -> Any: ...
    def get_force_visual_scale(selfi: int) -> Any: ...
    @overload
    def get_force_visual_scale(self) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def get_m_x_theta_x_function(selfi: int) -> Any: ...
    @overload
    def get_m_x_theta_x_function(self) -> Any: ...
    def get_m_y_theta_y_function(selfi: int) -> Any: ...
    @overload
    def get_m_y_theta_y_function(self) -> Any: ...
    def get_m_z_theta_z_function(selfi: int) -> Any: ...
    @overload
    def get_m_z_theta_z_function(self) -> Any: ...
    def get_moment_visual_scale(selfi: int) -> Any: ...
    @overload
    def get_moment_visual_scale(self) -> Any: ...
    def get_rotational_damping(selfi: int) -> Any: ...
    @overload
    def get_rotational_damping(self) -> Any: ...
    def get_translational_damping(selfi: int) -> Any: ...
    @overload
    def get_translational_damping(self) -> Any: ...
    def get_visual_aspect_ratio(selfi: int) -> Any: ...
    @overload
    def get_visual_aspect_ratio(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setForceVisualScale(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setMomentVisualScale(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setVisualAspectRatio(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_f_x_delta_x_function(self, *args, **kwargs) -> Any: ...
    def set_f_y_delta_y_function(self, *args, **kwargs) -> Any: ...
    def set_f_z_delta_z_function(self, *args, **kwargs) -> Any: ...
    def set_force_visual_scale(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_m_x_theta_x_function(self, *args, **kwargs) -> Any: ...
    def set_m_y_theta_y_function(self, *args, **kwargs) -> Any: ...
    def set_m_z_theta_z_function(self, *args, **kwargs) -> Any: ...
    def set_moment_visual_scale(self, *args, **kwargs) -> Any: ...
    def set_rotational_damping(self, *args, **kwargs) -> Any: ...
    def set_translational_damping(self, *args, **kwargs) -> Any: ...
    def set_visual_aspect_ratio(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_f_x_delta_x_function(selfi: int) -> Any: ...
    @overload
    def upd_f_x_delta_x_function(self) -> Any: ...
    def upd_f_y_delta_y_function(selfi: int) -> Any: ...
    @overload
    def upd_f_y_delta_y_function(self) -> Any: ...
    def upd_f_z_delta_z_function(selfi: int) -> Any: ...
    @overload
    def upd_f_z_delta_z_function(self) -> Any: ...
    def upd_force_visual_scale(selfi: int) -> float: ...
    @overload
    def upd_force_visual_scale(self) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_m_x_theta_x_function(selfi: int) -> Any: ...
    @overload
    def upd_m_x_theta_x_function(self) -> Any: ...
    def upd_m_y_theta_y_function(selfi: int) -> Any: ...
    @overload
    def upd_m_y_theta_y_function(self) -> Any: ...
    def upd_m_z_theta_z_function(selfi: int) -> Any: ...
    @overload
    def upd_m_z_theta_z_function(self) -> Any: ...
    def upd_moment_visual_scale(selfi: int) -> float: ...
    @overload
    def upd_moment_visual_scale(self) -> Any: ...
    def upd_rotational_damping(selfi: int) -> Any: ...
    @overload
    def upd_rotational_damping(self) -> Any: ...
    def upd_translational_damping(selfi: int) -> Any: ...
    @overload
    def upd_translational_damping(self) -> Any: ...
    def upd_visual_aspect_ratio(selfi: int) -> float: ...
    @overload
    def upd_visual_aspect_ratio(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FunctionBasedPath:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInEquivalentForces(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendCoordinatePath(self, *args, **kwargs) -> Any: ...
    def appendMomentArmFunction(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_coordinate_paths(selfvalue: str) -> int: ...
    def append_length_function(selfvalue: Function) -> int: ...
    def append_lengthening_speed_function(selfvalue: Function) -> int: ...
    def append_moment_arm_functions(selfvalue: Function) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeMomentArm(selfs: State, coord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate_paths(self, *args, **kwargs) -> Any: ...
    def constructProperty_length_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_lengthening_speed_function(self, *args, **kwargs) -> Any: ...
    def constructProperty_moment_arm_functions(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate_paths(self, *args, **kwargs) -> Any: ...
    def copyProperty_length_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_lengthening_speed_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_moment_arm_functions(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(selfs: State) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinatePaths(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultColor(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengthFunction(self) -> Any: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getLengtheningSpeedFunction(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMomentArmFunction(selfcoordinatePath: str) -> Any: ...
    def getMomentArms(selfs: State) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPreScaleLength(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_coordinate_paths(selfi: int) -> str: ...
    def get_length_function(selfi: int) -> Any: ...
    @overload
    def get_length_function(self) -> Any: ...
    def get_lengthening_speed_function(selfi: int) -> Any: ...
    @overload
    def get_lengthening_speed_function(self) -> Any: ...
    def get_moment_arm_functions(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isVisualPath(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setCoordinatePaths(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultColor(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLengthFunction(self, *args, **kwargs) -> Any: ...
    def setLengtheningSpeedFunction(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setMomentArmFunctions(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPreScaleLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_coordinate_paths(self, *args, **kwargs) -> Any: ...
    def set_length_function(self, *args, **kwargs) -> Any: ...
    def set_lengthening_speed_function(self, *args, **kwargs) -> Any: ...
    def set_moment_arm_functions(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_coordinate_paths(selfi: int) -> Any: ...
    def upd_length_function(selfi: int) -> Any: ...
    @overload
    def upd_length_function(self) -> Any: ...
    def upd_lengthening_speed_function(selfi: int) -> Any: ...
    @overload
    def upd_lengthening_speed_function(self) -> Any: ...
    def upd_moment_arm_functions(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Geometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class GeometryPath:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInEquivalentForces(self, *args, **kwargs) -> Any: ...
    def addPathPoint(selfs: State, index: int, frame: PhysicalFrame) -> Any: ...
    def addPathWrap(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendNewPathPoint(selfproposedName: str, frame: PhysicalFrame, locationOnFrame: Vec3) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def canDeletePathPoint(selfindex: int) -> bool: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def deletePathPoint(selfs: State, index: int) -> bool: ...
    def deletePathWrap(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def extendPreScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(selfs: State) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCurrentPath(selfs: State) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultColor(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathPointSet(self) -> Any: ...
    def getPointForceDirections(self, *args, **kwargs) -> Any: ...
    def getPreScaleLength(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getWrapSet(self) -> Any: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isVisualPath(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def moveDownPathWrap(self, *args, **kwargs) -> Any: ...
    def moveUpPathWrap(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def replacePathPoint(selfs: State, oldPathPoint: AbstractPathPoint, newPathPoint: AbstractPathPoint) -> bool: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultColor(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLength(self, *args, **kwargs) -> Any: ...
    def setLengtheningSpeed(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPreScaleLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPathPointSet(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updWrapSet(self) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateGeometry(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class GimbalJoint:
    Coord_Rotation1X: Any
    Coord_Rotation2Y: Any
    Coord_Rotation3Z: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: GimbalJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: GimbalJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Ground:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def addWrapObject(self, *args, **kwargs) -> Any: ...
    def append_WrapObjectSet(selfvalue: WrapObjectSet) -> int: ...
    def append_attached_geometry(selfvalue: Geometry) -> int: ...
    def append_frame_geometry(selfvalue: FrameGeometry) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def attachGeometry(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getMobilizedBody(self) -> MobilizedBody: ...
    def getMobilizedBodyIndex(self) -> MobilizedBodyIndex: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(selfaName: str) -> Any: ...
    def getWrapObjectSet(self) -> Any: ...
    def get_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def get_WrapObjectSet(self) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaleAttachedGeometry(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def set_attached_geometry(self, *args, **kwargs) -> Any: ...
    def set_frame_geometry(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updMobilizedBody(self) -> MobilizedBody: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def upd_WrapObjectSet(self) -> Any: ...
    def upd_attached_geometry(selfi: int) -> Any: ...
    def upd_frame_geometry(selfi: int) -> Any: ...
    @overload
    def upd_frame_geometry(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class HuntCrossleyForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addContactParameters(self, *args, **kwargs) -> Any: ...
    def addGeometry(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_contact_parameters(selfvalue: HuntCrossleyForce) -> int: ...
    def append_transition_velocity(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_contact_parameters(self, *args, **kwargs) -> Any: ...
    def constructProperty_transition_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_contact_parameters(self, *args, **kwargs) -> Any: ...
    def copyProperty_transition_velocity(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getContactParametersSet(self) -> HuntCrossleyForce: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDissipation(self) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getDynamicFriction(self) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStaticFriction(self) -> float: ...
    def getStiffness(self) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransitionVelocity(self) -> float: ...
    def getViscousFriction(self) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_contact_parameters(selfi: int) -> HuntCrossleyForce: ...
    @overload
    def get_contact_parameters(self) -> HuntCrossleyForce: ...
    def get_transition_velocity(selfi: int) -> Any: ...
    @overload
    def get_transition_velocity(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setDissipation(self, *args, **kwargs) -> Any: ...
    def setDynamicFriction(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setStaticFriction(self, *args, **kwargs) -> Any: ...
    def setStiffness(self, *args, **kwargs) -> Any: ...
    def setTransitionVelocity(self, *args, **kwargs) -> Any: ...
    def setViscousFriction(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_contact_parameters(self, *args, **kwargs) -> Any: ...
    def set_transition_velocity(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updContactParametersSet(self) -> HuntCrossleyForce: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_contact_parameters(selfi: int) -> HuntCrossleyForce: ...
    @overload
    def upd_contact_parameters(self) -> HuntCrossleyForce: ...
    def upd_transition_velocity(selfi: int) -> float: ...
    @overload
    def upd_transition_velocity(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class IMU:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfarg2: IMU) -> None: ...
    @overload
    def __init__(selfarg2: IMU) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcAccelerometerSignal(selfs: State) -> Any: ...
    def calcGyroscopeSignal(selfs: State) -> Any: ...
    def calcOrientationAsQuaternion(selfs: State) -> Quaternion: ...
    def calcTransformInGround(selfs: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class IMUPlacer:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfsetupFile: str) -> None: ...
    def append_base_heading_axis(selfvalue: str) -> int: ...
    def append_base_imu_label(selfvalue: str) -> int: ...
    def append_model_file(selfvalue: str) -> int: ...
    def append_orientation_file_for_calibration(selfvalue: str) -> int: ...
    def append_output_model_file(selfvalue: str) -> int: ...
    def append_sensor_to_opensim_rotations(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_base_heading_axis(self, *args, **kwargs) -> Any: ...
    def constructProperty_base_imu_label(self, *args, **kwargs) -> Any: ...
    def constructProperty_model_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation_file_for_calibration(self, *args, **kwargs) -> Any: ...
    def constructProperty_output_model_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_sensor_to_opensim_rotations(self, *args, **kwargs) -> Any: ...
    def copyProperty_base_heading_axis(self, *args, **kwargs) -> Any: ...
    def copyProperty_base_imu_label(self, *args, **kwargs) -> Any: ...
    def copyProperty_model_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation_file_for_calibration(self, *args, **kwargs) -> Any: ...
    def copyProperty_output_model_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_sensor_to_opensim_rotations(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCalibratedModel(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_base_heading_axis(selfi: int) -> Any: ...
    @overload
    def get_base_heading_axis(self) -> str: ...
    def get_base_imu_label(selfi: int) -> Any: ...
    @overload
    def get_base_imu_label(self) -> str: ...
    def get_model_file(selfi: int) -> Any: ...
    @overload
    def get_model_file(self) -> str: ...
    def get_orientation_file_for_calibration(selfi: int) -> Any: ...
    @overload
    def get_orientation_file_for_calibration(self) -> str: ...
    def get_output_model_file(selfi: int) -> Any: ...
    @overload
    def get_output_model_file(self) -> str: ...
    def get_sensor_to_opensim_rotations(selfi: int) -> Any: ...
    @overload
    def get_sensor_to_opensim_rotations(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def run(selfvisualizeResults: bool) -> bool: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_base_heading_axis(self, *args, **kwargs) -> Any: ...
    def set_base_imu_label(self, *args, **kwargs) -> Any: ...
    def set_model_file(self, *args, **kwargs) -> Any: ...
    def set_orientation_file_for_calibration(self, *args, **kwargs) -> Any: ...
    def set_output_model_file(self, *args, **kwargs) -> Any: ...
    def set_sensor_to_opensim_rotations(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_base_heading_axis(selfi: int) -> str: ...
    @overload
    def upd_base_heading_axis(self) -> Any: ...
    def upd_base_imu_label(selfi: int) -> str: ...
    @overload
    def upd_base_imu_label(self) -> Any: ...
    def upd_model_file(selfi: int) -> str: ...
    @overload
    def upd_model_file(self) -> Any: ...
    def upd_orientation_file_for_calibration(selfi: int) -> str: ...
    @overload
    def upd_orientation_file_for_calibration(self) -> Any: ...
    def upd_output_model_file(selfi: int) -> str: ...
    @overload
    def upd_output_model_file(self) -> Any: ...
    def upd_sensor_to_opensim_rotations(selfi: int) -> Any: ...
    @overload
    def upd_sensor_to_opensim_rotations(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class InputController:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_controls: Any
    PropertyIndex_socket_actuators: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addActuator(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendSocketConnectee_actuators(self, *args, **kwargs) -> Any: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeControls(self, *args, **kwargs) -> Any: ...
    def computeControlsImpl(self, *args, **kwargs) -> Any: ...
    def connectInput_controls(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControlIndexes(self) -> Any: ...
    def getControlNames(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputControlLabels(self) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumActuators(self) -> int: ...
    def getNumControls(self) -> int: ...
    def getNumInputControls(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuators(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class InverseDynamicsSolver:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfmodel: Model) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def solve(selfs: State, udot: Any) -> Any: ...
    @overload
    def solve(selfs: State, udot: Any, appliedMobilityForces: Any, appliedBodyForces: Vector_) -> Any: ...
    @overload
    def solve(selfs: State, Qs: FunctionSet, time: float) -> Any: ...
    @overload
    def solve(selfs: State, Qs: FunctionSet, coordinatesToSpeedsIndexMap: Any, time: float) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class InverseKinematicsSolver:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfmodel: Model, markersReference: MarkersReference, coordinateReferences: CoordinateReference, constraintWeight: float) -> None: ...
    @overload
    def __init__(selfmodel: Model, markersReference: MarkersReference, orientationsReference: OrientationsReference, coordinateReferences: CoordinateReference, constraintWeight: float) -> None: ...
    @overload
    def __init__(selfmodel: Model, markersReference: MarkersReference, coordinateReferences: CoordinateReference, constraintWeight: float) -> None: ...
    @overload
    def __init__(selfmodel: Model, markersReference: MarkersReference, orientationsReference: OrientationsReference, coordinateReferences: CoordinateReference, constraintWeight: float) -> None: ...
    def assemble(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeCurrentMarkerError(selfmarkerName: str) -> float: ...
    def computeCurrentMarkerErrors(self, *args, **kwargs) -> Any: ...
    def computeCurrentMarkerLocation(selfmarkerName: str) -> Any: ...
    def computeCurrentMarkerLocations(self, *args, **kwargs) -> Any: ...
    def computeCurrentOrientationError(selfosensorName: str) -> float: ...
    def computeCurrentOrientationErrors(self, *args, **kwargs) -> Any: ...
    def computeCurrentSensorOrientation(selfosensorName: str) -> Rotation: ...
    def computeCurrentSensorOrientations(self, *args, **kwargs) -> Any: ...
    def computeCurrentSquaredMarkerError(selfmarkerName: str) -> float: ...
    def computeCurrentSquaredMarkerErrors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAssembler(self) -> Assembler: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCoordinateReferences(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMarkerNameForIndex(selfmarkerIndex: int) -> str: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumMarkersInUse(self) -> int: ...
    def getNumOrientationSensorsInUse(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getOrientationSensorNameForIndex(selfosensorIndex: int) -> str: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAccuracy(self, *args, **kwargs) -> Any: ...
    def setAdvanceTimeFromReference(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setConstraintWeight(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def track(self, *args, **kwargs) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateCoordinateReference(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateMarkerWeight(self, *args, **kwargs) -> Any: ...
    def updateMarkerWeights(self, *args, **kwargs) -> Any: ...
    def updateOrientationWeight(self, *args, **kwargs) -> Any: ...
    def updateOrientationWeights(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class IteratorRangeStatesTrajectoryIterator:
    def __init__(selffirst: State, last: State) -> None: ...
    @overload
    def __init__(selfrange: State) -> None: ...
    def begin(self) -> State: ...
    def end(self) -> State: ...
    thisown: Any

class Joint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class JointFramesAreTheSame:
    def __init__(selffile: str, line: Any, func: str, thisName: str, sameName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class JointFramesHaveSameBaseFrame:
    def __init__(selffile: str, line: Any, func: str, thisName: str, parentName: str, childName: str, baseName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class JointHasNoCoordinates:
    def __init__(selffile: str, line: Any, func: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class JointInternalPowerProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfjoint_names: Array, sum_powers_together: Any, exponent: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_exponent(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_joint_names(selfvalue: str) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def append_sum_powers_together(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_exponent(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_joint_names(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def constructProperty_sum_powers_together(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_exponent(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_joint_names(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_sum_powers_together(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExponent(self) -> float: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getJointNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSumPowersTogether(self) -> bool: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_exponent(selfi: int) -> Any: ...
    @overload
    def get_exponent(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_joint_names(selfi: int) -> str: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def get_sum_powers_together(selfi: int) -> Any: ...
    @overload
    def get_sum_powers_together(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setExponent(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setJointNames(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setSumPowersTogether(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_exponent(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_joint_names(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    def set_sum_powers_together(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_exponent(selfi: int) -> float: ...
    @overload
    def upd_exponent(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_joint_names(selfi: int) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def upd_sum_powers_together(selfi: int) -> bool: ...
    @overload
    def upd_sum_powers_together(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class JointIterator:
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def __init__(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clone(self) -> Any: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def numCoordinates(self) -> int: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class JointList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class JointSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Joint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Joint) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Joint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Joint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Joint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Joint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Ligament:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_force_length_curve(selfvalue: Function) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_pcsa_force(selfvalue: Any) -> int: ...
    def append_resting_length(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_length_curve(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pcsa_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_resting_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_length_curve(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pcsa_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_resting_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceLengthCurve(self) -> Any: ...
    def getGeometryPath(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRestingLength(self) -> float: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTension(selfs: State) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_force_length_curve(selfi: int) -> Any: ...
    @overload
    def get_force_length_curve(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pcsa_force(selfi: int) -> Any: ...
    @overload
    def get_pcsa_force(self) -> Any: ...
    def get_resting_length(selfi: int) -> Any: ...
    @overload
    def get_resting_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setForceLengthCurve(selfaForceLengthCurve: Function) -> bool: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(selfaMaxIsometricForce: float) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRestingLength(selfaRestingLength: float) -> bool: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_force_length_curve(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pcsa_force(self, *args, **kwargs) -> Any: ...
    def set_resting_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_force_length_curve(selfi: int) -> Any: ...
    @overload
    def upd_force_length_curve(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pcsa_force(selfi: int) -> float: ...
    @overload
    def upd_pcsa_force(self) -> Any: ...
    def upd_resting_length(selfi: int) -> float: ...
    @overload
    def upd_resting_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class LineGeometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfaPoint1: Vec3, aPoint2: Vec3) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_end_point(selfvalue: Vec3) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def append_start_point(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_end_point(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructProperty_start_point(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_end_point(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def copyProperty_start_point(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPoints(self, *args, **kwargs) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_end_point(selfi: int) -> Any: ...
    @overload
    def get_end_point(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def get_start_point(selfi: int) -> Any: ...
    @overload
    def get_start_point(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPoints(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_end_point(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    def set_start_point(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_end_point(selfi: int) -> Any: ...
    @overload
    def upd_end_point(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def upd_start_point(selfi: int) -> Any: ...
    @overload
    def upd_start_point(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Manager:
    IntegratorMethod_ExplicitEuler: Any
    IntegratorMethod_RungeKutta2: Any
    IntegratorMethod_RungeKutta3: Any
    IntegratorMethod_RungeKuttaFeldberg: Any
    IntegratorMethod_RungeKuttaMerson: Any
    IntegratorMethod_SemiExplicitEuler2: Any
    IntegratorMethod_Verlet: Any
    def __init__(selfmodel: Model) -> None: ...
    @overload
    def __init__(selfmodel: Model, state: State) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def checkHalt(self) -> bool: ...
    def clearHalt(self, *args, **kwargs) -> Any: ...
    def getDTArray(self) -> Any: ...
    def getDTArrayDT(selfaStep: int) -> float: ...
    def getFixedStepSize(selftArrayStep: int) -> float: ...
    def getIntegrator(self) -> Integrator: ...
    def getNextTimeArrayTime(selfaTime: float) -> float: ...
    def getSessionName(self) -> str: ...
    def getState(self) -> Any: ...
    def getStateStorage(self) -> Any: ...
    def getStatesTable(self) -> Any: ...
    def getTimeArray(self) -> Any: ...
    def getTimeArrayStep(selfaTime: float) -> int: ...
    def getTimeArrayTime(selfaStep: int) -> float: ...
    def getUseConstantDT(self) -> bool: ...
    def getUseSpecifiedDT(self) -> bool: ...
    def halt(self, *args, **kwargs) -> Any: ...
    def hasStateStorage(self) -> bool: ...
    def initialize(self, *args, **kwargs) -> Any: ...
    def integrate(selffinalTime: float) -> Any: ...
    def printDTArray(self, *args, **kwargs) -> Any: ...
    def printTimeArray(self, *args, **kwargs) -> Any: ...
    def resetTimeAndDTArrays(self, *args, **kwargs) -> Any: ...
    def setDTArray(self, *args, **kwargs) -> Any: ...
    def setIntegratorAccuracy(self, *args, **kwargs) -> Any: ...
    def setIntegratorInternalStepLimit(self, *args, **kwargs) -> Any: ...
    def setIntegratorMaximumStepSize(self, *args, **kwargs) -> Any: ...
    def setIntegratorMethod(self, *args, **kwargs) -> Any: ...
    def setIntegratorMinimumStepSize(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setPerformAnalyses(self, *args, **kwargs) -> Any: ...
    def setSessionName(self, *args, **kwargs) -> Any: ...
    def setStateStorage(self, *args, **kwargs) -> Any: ...
    def setUseConstantDT(self, *args, **kwargs) -> Any: ...
    def setUseSpecifiedDT(self, *args, **kwargs) -> Any: ...
    def setWriteToStorage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...

class Marker:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame: PhysicalFrame, location: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_fixed(selfvalue: Any) -> int: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def changeFrame(self, *args, **kwargs) -> Any: ...
    def changeFramePreserveLocation(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_fixed(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_fixed(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findLocationInFrame(selfs: State, frame: Frame) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getParentFrameName(self) -> str: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def get_fixed(selfi: int) -> Any: ...
    @overload
    def get_fixed(self) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setParentFrameName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_fixed(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_fixed(selfi: int) -> bool: ...
    @overload
    def upd_fixed(self) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MarkerSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addNamePrefix(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Marker) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Marker, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMarkerNames(self, *args, **kwargs) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Marker) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Marker) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Marker, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MarkerWeight:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, weight: float) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getWeight(self) -> float: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MarkersReference:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfmarkerFileName: str, markerWeightSet: Set, modelUnits: Units) -> None: ...
    @overload
    def __init__(selfmarkerData: TimeSeriesTable_, markerWeightSet: Set, units: Units) -> None: ...
    def append_default_weight(selfvalue: Any) -> int: ...
    def append_marker_file(selfvalue: str) -> int: ...
    def append_marker_weights(selfvalue: Set) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_default_weight(self, *args, **kwargs) -> Any: ...
    def constructProperty_marker_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_marker_weights(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_weight(self, *args, **kwargs) -> Any: ...
    def copyProperty_marker_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_marker_weights(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMarkerTable(self) -> Any: ...
    def getMarkerWeightSet(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNumFrames(self) -> Any: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSamplingFrequency(self) -> float: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def get_default_weight(selfi: int) -> Any: ...
    @overload
    def get_default_weight(self) -> Any: ...
    def get_marker_file(selfi: int) -> Any: ...
    @overload
    def get_marker_file(self) -> str: ...
    def get_marker_weights(selfi: int) -> Any: ...
    @overload
    def get_marker_weights(self) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def initializeFromMarkersFile(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultWeight(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMarkerWeightSet(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_default_weight(self, *args, **kwargs) -> Any: ...
    def set_marker_file(self, *args, **kwargs) -> Any: ...
    def set_marker_weights(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updMarkerWeightSet(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_default_weight(selfi: int) -> float: ...
    @overload
    def upd_default_weight(self) -> Any: ...
    def upd_marker_file(selfi: int) -> str: ...
    @overload
    def upd_marker_file(self) -> Any: ...
    def upd_marker_weights(selfi: int) -> Any: ...
    @overload
    def upd_marker_weights(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Mesh:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfgeomFile: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_mesh_file(selfvalue: str) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_mesh_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_mesh_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getGeometryFilename(self) -> str: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_mesh_file(selfi: int) -> Any: ...
    @overload
    def get_mesh_file(self) -> str: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_mesh_file(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_mesh_file(selfi: int) -> str: ...
    @overload
    def upd_mesh_file(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Millard2012EquilibriumMuscle:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaName: str, aMaxIsometricForce: float, aOptimalFiberLength: float, aTendonSlackLength: float, aPennationAngle: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_ActiveForceLengthCurve(selfvalue: ActiveForceLengthCurve) -> int: ...
    def append_FiberForceLengthCurve(selfvalue: FiberForceLengthCurve) -> int: ...
    def append_ForceVelocityCurve(selfvalue: ForceVelocityCurve) -> int: ...
    def append_TendonForceLengthCurve(selfvalue: TendonForceLengthCurve) -> int: ...
    def append_activation_time_constant(selfvalue: Any) -> int: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_deactivation_time_constant(selfvalue: Any) -> int: ...
    def append_default_activation(selfvalue: Any) -> int: ...
    def append_default_fiber_length(selfvalue: Any) -> int: ...
    def append_fiber_damping(selfvalue: Any) -> int: ...
    def append_ignore_activation_dynamics(selfvalue: Any) -> int: ...
    def append_ignore_tendon_compliance(selfvalue: Any) -> int: ...
    def append_max_contraction_velocity(selfvalue: Any) -> int: ...
    def append_max_control(selfvalue: Any) -> int: ...
    def append_max_isometric_force(selfvalue: Any) -> int: ...
    def append_maximum_pennation_angle(selfvalue: Any) -> int: ...
    def append_min_control(selfvalue: Any) -> int: ...
    def append_minimum_activation(selfvalue: Any) -> int: ...
    def append_optimal_fiber_length(selfvalue: Any) -> int: ...
    def append_optimal_force(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(selfvalue: Any) -> int: ...
    def append_tendon_slack_length(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcActiveFiberForceAlongTendon(selfactivation: float, fiberLength: float, fiberVelocity: float) -> float: ...
    def calcFiberStateGivenBoundaryCond(selflengthMT: float, velocityMT: float, tendonForce: float, dTendonForceDT: float) -> Any: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeInitialFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_ActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_FiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_ForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_TendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_fiber_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_minimum_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_ActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_FiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_ForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_TendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_fiber_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_minimum_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActivationDerivative(selfs: State) -> float: ...
    def getActivationModel(self) -> Any: ...
    def getActivationTimeConstant(self) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthCurve(self) -> Any: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDeactivationTimeConstant(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultActivation(self) -> float: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultFiberLength(self) -> float: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberDamping(self) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberForceLengthCurve(self) -> Any: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityCurve(self) -> Any: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getMinimumActivation(self) -> float: ...
    def getMinimumFiberLength(self) -> float: ...
    def getMinimumFiberLengthAlongTendon(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberDampingForce(selfs: State) -> float: ...
    def getPassiveFiberDampingForceAlongTendon(selfs: State) -> float: ...
    def getPassiveFiberElasticForce(selfs: State) -> float: ...
    def getPassiveFiberElasticForceAlongTendon(selfs: State) -> float: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPennationModel(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonForceLengthCurve(self) -> Any: ...
    def getTendonForceMultiplier(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def getUseFiberDamping(self) -> bool: ...
    def get_ActiveForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def get_ActiveForceLengthCurve(self) -> Any: ...
    def get_FiberForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def get_FiberForceLengthCurve(self) -> Any: ...
    def get_ForceVelocityCurve(selfi: int) -> Any: ...
    @overload
    def get_ForceVelocityCurve(self) -> Any: ...
    def get_TendonForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def get_TendonForceLengthCurve(self) -> Any: ...
    def get_activation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_deactivation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_deactivation_time_constant(self) -> Any: ...
    def get_default_activation(selfi: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_default_fiber_length(self) -> Any: ...
    def get_fiber_damping(selfi: int) -> Any: ...
    @overload
    def get_fiber_damping(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_maximum_pennation_angle(selfi: int) -> Any: ...
    @overload
    def get_maximum_pennation_angle(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_minimum_activation(selfi: int) -> Any: ...
    @overload
    def get_minimum_activation(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActivationTimeConstant(self, *args, **kwargs) -> Any: ...
    def setActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDeactivationTimeConstant(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultActivation(self, *args, **kwargs) -> Any: ...
    def setDefaultFiberLength(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setFiberDamping(self, *args, **kwargs) -> Any: ...
    def setFiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setFiberLength(self, *args, **kwargs) -> Any: ...
    def setForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setMinimumActivation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setMuscleConfiguration(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_ActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_FiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_ForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def set_TendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_default_activation(self, *args, **kwargs) -> Any: ...
    def set_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_fiber_damping(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_minimum_activation(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_ActiveForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def upd_ActiveForceLengthCurve(self) -> Any: ...
    def upd_FiberForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def upd_FiberForceLengthCurve(self) -> Any: ...
    def upd_ForceVelocityCurve(selfi: int) -> Any: ...
    @overload
    def upd_ForceVelocityCurve(self) -> Any: ...
    def upd_TendonForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def upd_TendonForceLengthCurve(self) -> Any: ...
    def upd_activation_time_constant(selfi: int) -> float: ...
    @overload
    def upd_activation_time_constant(self) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_deactivation_time_constant(selfi: int) -> float: ...
    @overload
    def upd_deactivation_time_constant(self) -> Any: ...
    def upd_default_activation(selfi: int) -> float: ...
    @overload
    def upd_default_activation(self) -> Any: ...
    def upd_default_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_default_fiber_length(self) -> Any: ...
    def upd_fiber_damping(selfi: int) -> float: ...
    @overload
    def upd_fiber_damping(self) -> Any: ...
    def upd_ignore_activation_dynamics(selfi: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_tendon_compliance(selfi: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_max_contraction_velocity(selfi: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(selfi: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(selfi: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_maximum_pennation_angle(selfi: int) -> float: ...
    @overload
    def upd_maximum_pennation_angle(self) -> Any: ...
    def upd_min_control(selfi: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_minimum_activation(selfi: int) -> float: ...
    @overload
    def upd_minimum_activation(self) -> Any: ...
    def upd_optimal_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(selfi: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(selfi: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_slack_length(selfi: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Millard2012EquilibriumMuscleIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appliesForce(selfs: State) -> bool: ...
    def calcActiveFiberForceAlongTendon(selfactivation: float, fiberLength: float, fiberVelocity: float) -> float: ...
    def calcFiberStateGivenBoundaryCond(selflengthMT: float, velocityMT: float, tendonForce: float, dTendonForceDT: float) -> Any: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeInitialFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActivationDerivative(selfs: State) -> float: ...
    def getActivationModel(self) -> Any: ...
    def getActivationTimeConstant(self) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthCurve(self) -> Any: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDeactivationTimeConstant(self) -> float: ...
    def getDefaultActivation(self) -> float: ...
    def getDefaultFiberLength(self) -> float: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberDamping(self) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberForceLengthCurve(self) -> Any: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityCurve(self) -> Any: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getMinimumActivation(self) -> float: ...
    def getMinimumFiberLength(self) -> float: ...
    def getMinimumFiberLengthAlongTendon(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberDampingForce(selfs: State) -> float: ...
    def getPassiveFiberDampingForceAlongTendon(selfs: State) -> float: ...
    def getPassiveFiberElasticForce(selfs: State) -> float: ...
    def getPassiveFiberElasticForceAlongTendon(selfs: State) -> float: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPennationModel(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonForceLengthCurve(self) -> Any: ...
    def getTendonForceMultiplier(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def getUseFiberDamping(self) -> bool: ...
    def get_ActiveForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def get_ActiveForceLengthCurve(self) -> Any: ...
    def get_FiberForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def get_FiberForceLengthCurve(self) -> Any: ...
    def get_ForceVelocityCurve(selfi: int) -> Any: ...
    @overload
    def get_ForceVelocityCurve(self) -> Any: ...
    def get_TendonForceLengthCurve(selfi: int) -> Any: ...
    @overload
    def get_TendonForceLengthCurve(self) -> Any: ...
    def get_activation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_deactivation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_deactivation_time_constant(self) -> Any: ...
    def get_default_activation(selfi: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_default_fiber_length(self) -> Any: ...
    def get_fiber_damping(selfi: int) -> Any: ...
    @overload
    def get_fiber_damping(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_maximum_pennation_angle(selfi: int) -> Any: ...
    @overload
    def get_maximum_pennation_angle(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_minimum_activation(selfi: int) -> Any: ...
    @overload
    def get_minimum_activation(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setFiberLength(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Millard2012EquilibriumMuscleList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class Model:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selffilename: str) -> None: ...
    @overload
    def __init__(selfother: Model) -> None: ...
    def addAnalysis(self, *args, **kwargs) -> Any: ...
    def addBody(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addConstraint(self, *args, **kwargs) -> Any: ...
    def addContactGeometry(self, *args, **kwargs) -> Any: ...
    def addController(self, *args, **kwargs) -> Any: ...
    def addForce(self, *args, **kwargs) -> Any: ...
    def addJoint(self, *args, **kwargs) -> Any: ...
    def addMarker(self, *args, **kwargs) -> Any: ...
    def addModelComponent(self, *args, **kwargs) -> Any: ...
    def addProbe(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendToValidationLog(self, *args, **kwargs) -> Any: ...
    def append_BodySet(selfvalue: BodySet) -> int: ...
    def append_ComponentSet(selfvalue: ComponentSet) -> int: ...
    def append_ConstraintSet(selfvalue: ConstraintSet) -> int: ...
    def append_ContactGeometrySet(selfvalue: ContactGeometrySet) -> int: ...
    def append_ControllerSet(selfvalue: ControllerSet) -> int: ...
    def append_ForceSet(selfvalue: ForceSet) -> int: ...
    def append_JointSet(selfvalue: JointSet) -> int: ...
    def append_MarkerSet(selfvalue: MarkerSet) -> int: ...
    def append_ModelVisualPreferences(selfvalue: ModelVisualPreferences) -> int: ...
    def append_ProbeSet(selfvalue: ProbeSet) -> int: ...
    def append_assembly_accuracy(selfvalue: Any) -> int: ...
    def append_credits(selfvalue: str) -> int: ...
    def append_force_units(selfvalue: str) -> int: ...
    def append_gravity(selfvalue: Vec3) -> int: ...
    def append_ground(selfvalue: Ground) -> int: ...
    def append_length_units(selfvalue: str) -> int: ...
    def append_publications(selfvalue: str) -> int: ...
    def applyDefaultConfiguration(self, *args, **kwargs) -> Any: ...
    def assemble(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def buildSystem(self, *args, **kwargs) -> Any: ...
    def calcAngularMomentum(selfs: State) -> Any: ...
    def calcForceContributionsSum(self, *args, **kwargs) -> Any: ...
    def calcKineticEnergy(selfs: State) -> float: ...
    def calcLinearMomentum(selfs: State) -> Any: ...
    def calcMassCenterAcceleration(selfs: State) -> Any: ...
    def calcMassCenterPosition(selfs: State) -> Any: ...
    def calcMassCenterVelocity(selfs: State) -> Any: ...
    def calcMomentum(selfs: State) -> Any: ...
    def calcPotentialEnergy(selfs: State) -> float: ...
    def cleanup(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearValidationLog(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeControls(self, *args, **kwargs) -> Any: ...
    def computeStateVariableDerivatives(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_BodySet(self, *args, **kwargs) -> Any: ...
    def constructProperty_ComponentSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_ConstraintSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_ContactGeometrySet(self, *args, **kwargs) -> Any: ...
    def constructProperty_ControllerSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_ForceSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_JointSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_MarkerSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_ModelVisualPreferences(self, *args, **kwargs) -> Any: ...
    def constructProperty_ProbeSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_assembly_accuracy(self, *args, **kwargs) -> Any: ...
    def constructProperty_credits(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_units(self, *args, **kwargs) -> Any: ...
    def constructProperty_gravity(self, *args, **kwargs) -> Any: ...
    def constructProperty_ground(self, *args, **kwargs) -> Any: ...
    def constructProperty_length_units(self, *args, **kwargs) -> Any: ...
    def constructProperty_publications(self, *args, **kwargs) -> Any: ...
    def copyProperty_BodySet(self, *args, **kwargs) -> Any: ...
    def copyProperty_ComponentSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_ConstraintSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_ContactGeometrySet(self, *args, **kwargs) -> Any: ...
    def copyProperty_ControllerSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_ForceSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_JointSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_MarkerSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_ModelVisualPreferences(self, *args, **kwargs) -> Any: ...
    def copyProperty_ProbeSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_assembly_accuracy(self, *args, **kwargs) -> Any: ...
    def copyProperty_credits(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_units(self, *args, **kwargs) -> Any: ...
    def copyProperty_gravity(self, *args, **kwargs) -> Any: ...
    def copyProperty_ground(self, *args, **kwargs) -> Any: ...
    def copyProperty_length_units(self, *args, **kwargs) -> Any: ...
    def copyProperty_publications(self, *args, **kwargs) -> Any: ...
    def deleteUnusedMarkers(selfaMarkerNames: Array) -> int: ...
    def disownAllComponents(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def equilibrateMuscles(self, *args, **kwargs) -> Any: ...
    def extendAddToSystem(self, *args, **kwargs) -> Any: ...
    def extendConnectToModel(self, *args, **kwargs) -> Any: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def extendInitStateFromProperties(self, *args, **kwargs) -> Any: ...
    def extendSetPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def formQStorage(self, *args, **kwargs) -> Any: ...
    def formStateStorage(self, *args, **kwargs) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuatorList(self) -> Any: ...
    def getActuators(self) -> Any: ...
    def getAllControllersEnabled(self) -> bool: ...
    def getAnalysisSet(self) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBodyList(self) -> Any: ...
    def getBodySet(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getConstraintSet(self) -> Any: ...
    def getContactGeometrySet(self) -> Any: ...
    def getControllerSet(self) -> Any: ...
    def getControls(selfs: State) -> Any: ...
    def getControlsTable(self) -> Any: ...
    def getCoordinateNamesInMultibodyTreeOrder(self) -> Any: ...
    def getCoordinateSet(self) -> Any: ...
    def getCoordinatesInMultibodyTreeOrder(self) -> Coordinate: ...
    def getCredits(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDefaultSubsystem(self) -> DefaultSystemSubsystem: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDisplayHints(self) -> Any: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceSet(self) -> Any: ...
    def getForceSubsystem(self) -> GeneralForceSubsystem: ...
    def getForceUnits(self) -> Any: ...
    def getFrameList(self) -> Any: ...
    def getGravity(self) -> Any: ...
    def getGravityBodyForces(selfstate: State) -> Any: ...
    def getGravityForce(self) -> Force: ...
    def getGround(self) -> Any: ...
    def getInertiaAboutMassCenter(selfs: State) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputFileName(self) -> str: ...
    def getInputNames(self) -> Any: ...
    def getJointList(self) -> Any: ...
    def getJointSet(self) -> Any: ...
    def getLengthUnits(self) -> Any: ...
    def getMarkerSet(self) -> Any: ...
    def getMatterSubsystem(self) -> Any: ...
    def getMillard2012EquilibriumMuscleList(self) -> Any: ...
    def getMiscModelComponentSet(self) -> Any: ...
    def getMobilityForces(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelComponentList(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMultibodySystem(self) -> MultibodySystem: ...
    def getMuscleList(self) -> Any: ...
    def getMuscles(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumAnalyses(self) -> int: ...
    def getNumBodies(self) -> int: ...
    def getNumConstraints(self) -> int: ...
    def getNumContactGeometries(self) -> int: ...
    def getNumControls(self) -> int: ...
    def getNumCoordinates(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumJoints(self) -> int: ...
    def getNumMarkers(self) -> int: ...
    def getNumMuscleStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeStates(self) -> int: ...
    def getNumProbes(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumSpeeds(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getObjectByTypeAndName(selftypeString: str, nameString: str) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeSet(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getPublications(self) -> str: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRigidBodyForces(selfstate: State) -> Any: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSimbodyEngine(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getThelen2003MuscleList(self) -> Any: ...
    def getTotalMass(selfs: State) -> float: ...
    def getUseVisualizer(self) -> bool: ...
    def getValidationLog(self) -> str: ...
    def getVisualizer(self) -> Any: ...
    def getWarningMesssageForMotionTypeInconsistency(self) -> str: ...
    def getWorkingState(self) -> Any: ...
    def get_BodySet(selfi: int) -> Any: ...
    @overload
    def get_BodySet(self) -> Any: ...
    def get_ComponentSet(selfi: int) -> Any: ...
    @overload
    def get_ComponentSet(self) -> Any: ...
    def get_ConstraintSet(selfi: int) -> Any: ...
    @overload
    def get_ConstraintSet(self) -> Any: ...
    def get_ContactGeometrySet(selfi: int) -> Any: ...
    @overload
    def get_ContactGeometrySet(self) -> Any: ...
    def get_ControllerSet(selfi: int) -> Any: ...
    @overload
    def get_ControllerSet(self) -> Any: ...
    def get_ForceSet(selfi: int) -> Any: ...
    @overload
    def get_ForceSet(self) -> Any: ...
    def get_JointSet(selfi: int) -> Any: ...
    @overload
    def get_JointSet(self) -> Any: ...
    def get_MarkerSet(selfi: int) -> Any: ...
    @overload
    def get_MarkerSet(self) -> Any: ...
    def get_ModelVisualPreferences(selfi: int) -> Any: ...
    @overload
    def get_ModelVisualPreferences(self) -> Any: ...
    def get_ProbeSet(selfi: int) -> Any: ...
    @overload
    def get_ProbeSet(self) -> Any: ...
    def get_assembly_accuracy(selfi: int) -> Any: ...
    @overload
    def get_assembly_accuracy(self) -> Any: ...
    def get_credits(selfi: int) -> Any: ...
    @overload
    def get_credits(self) -> str: ...
    def get_force_units(selfi: int) -> Any: ...
    @overload
    def get_force_units(self) -> str: ...
    def get_gravity(selfi: int) -> Any: ...
    @overload
    def get_gravity(self) -> Any: ...
    def get_ground(selfi: int) -> Any: ...
    @overload
    def get_ground(self) -> Any: ...
    def get_length_units(selfi: int) -> Any: ...
    @overload
    def get_length_units(self) -> str: ...
    def get_publications(selfi: int) -> Any: ...
    @overload
    def get_publications(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualizer(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def initStateWithoutRecreatingSystem(self, *args, **kwargs) -> Any: ...
    def initSystem(self) -> Any: ...
    def initializeState(self) -> Any: ...
    def invalidateSystem(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isControlled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isValidSystem(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def markControlsAsInvalid(self, *args, **kwargs) -> Any: ...
    def markControlsAsValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def overrideAllActuators(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printBasicInfo(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printControlStorage(self, *args, **kwargs) -> Any: ...
    def printDetailedInfo(self, *args, **kwargs) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def realizeAcceleration(self, *args, **kwargs) -> Any: ...
    def realizeDynamics(self, *args, **kwargs) -> Any: ...
    def realizePosition(self, *args, **kwargs) -> Any: ...
    def realizeReport(self, *args, **kwargs) -> Any: ...
    def realizeTime(self, *args, **kwargs) -> Any: ...
    def realizeVelocity(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def removeAnalysis(self, *args, **kwargs) -> Any: ...
    def removeController(self, *args, **kwargs) -> Any: ...
    def removeProbe(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(selfstate: State, scaleSet: ScaleSet, preserveMassDist: bool, finalMass: float) -> bool: ...
    def setAllControllersEnabled(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultControls(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setGravity(selfaGrav: Vec3) -> bool: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setInputFileName(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setPublications(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setUseVisualizer(self, *args, **kwargs) -> Any: ...
    def set_BodySet(self, *args, **kwargs) -> Any: ...
    def set_ComponentSet(self, *args, **kwargs) -> Any: ...
    def set_ConstraintSet(self, *args, **kwargs) -> Any: ...
    def set_ContactGeometrySet(self, *args, **kwargs) -> Any: ...
    def set_ControllerSet(self, *args, **kwargs) -> Any: ...
    def set_ForceSet(self, *args, **kwargs) -> Any: ...
    def set_JointSet(self, *args, **kwargs) -> Any: ...
    def set_MarkerSet(self, *args, **kwargs) -> Any: ...
    def set_ModelVisualPreferences(self, *args, **kwargs) -> Any: ...
    def set_ProbeSet(self, *args, **kwargs) -> Any: ...
    def set_assembly_accuracy(self, *args, **kwargs) -> Any: ...
    def set_credits(self, *args, **kwargs) -> Any: ...
    def set_force_units(self, *args, **kwargs) -> Any: ...
    def set_gravity(self, *args, **kwargs) -> Any: ...
    def set_ground(self, *args, **kwargs) -> Any: ...
    def set_length_units(self, *args, **kwargs) -> Any: ...
    def set_publications(self, *args, **kwargs) -> Any: ...
    def setup(self, *args, **kwargs) -> Any: ...
    def storeControls(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updActuators(self) -> Any: ...
    def updAnalysisSet(self) -> Any: ...
    def updBodySet(self) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updConstraintSet(self) -> Any: ...
    def updContactGeometrySet(self) -> Any: ...
    def updControllerSet(self) -> Any: ...
    def updControls(selfs: State) -> Any: ...
    def updCoordinateSet(self) -> Any: ...
    def updDefaultControls(self) -> Any: ...
    def updDefaultSubsystem(self) -> DefaultSystemSubsystem: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updDisplayHints(self) -> Any: ...
    def updForceSet(self) -> Any: ...
    def updForceSubsystem(self) -> GeneralForceSubsystem: ...
    def updGravityForce(self) -> Force: ...
    def updGround(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updJointSet(self) -> Any: ...
    def updMarkerSet(self) -> Any: ...
    def updMatterSubsystem(self) -> Any: ...
    def updMiscModelComponentSet(self) -> Any: ...
    def updModel(self) -> Any: ...
    def updMultibodySystem(self) -> MultibodySystem: ...
    def updMuscles(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updProbeSet(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSimbodyEngine(self) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updVisualizer(self) -> Any: ...
    def updWorkingState(self) -> Any: ...
    def upd_BodySet(selfi: int) -> Any: ...
    @overload
    def upd_BodySet(self) -> Any: ...
    def upd_ComponentSet(selfi: int) -> Any: ...
    @overload
    def upd_ComponentSet(self) -> Any: ...
    def upd_ConstraintSet(selfi: int) -> Any: ...
    @overload
    def upd_ConstraintSet(self) -> Any: ...
    def upd_ContactGeometrySet(selfi: int) -> Any: ...
    @overload
    def upd_ContactGeometrySet(self) -> Any: ...
    def upd_ControllerSet(selfi: int) -> Any: ...
    @overload
    def upd_ControllerSet(self) -> Any: ...
    def upd_ForceSet(selfi: int) -> Any: ...
    @overload
    def upd_ForceSet(self) -> Any: ...
    def upd_JointSet(selfi: int) -> Any: ...
    @overload
    def upd_JointSet(self) -> Any: ...
    def upd_MarkerSet(selfi: int) -> Any: ...
    @overload
    def upd_MarkerSet(self) -> Any: ...
    def upd_ModelVisualPreferences(selfi: int) -> Any: ...
    @overload
    def upd_ModelVisualPreferences(self) -> Any: ...
    def upd_ProbeSet(selfi: int) -> Any: ...
    @overload
    def upd_ProbeSet(self) -> Any: ...
    def upd_assembly_accuracy(selfi: int) -> float: ...
    @overload
    def upd_assembly_accuracy(self) -> Any: ...
    def upd_credits(selfi: int) -> str: ...
    @overload
    def upd_credits(self) -> Any: ...
    def upd_force_units(selfi: int) -> str: ...
    @overload
    def upd_force_units(self) -> Any: ...
    def upd_gravity(selfi: int) -> Any: ...
    @overload
    def upd_gravity(self) -> Any: ...
    def upd_ground(selfi: int) -> Any: ...
    @overload
    def upd_ground(self) -> Any: ...
    def upd_length_units(selfi: int) -> str: ...
    @overload
    def upd_length_units(self) -> Any: ...
    def upd_publications(selfi: int) -> str: ...
    @overload
    def upd_publications(self) -> Any: ...
    def updateAssemblyConditions(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateMarkerSet(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def writeMarkerFile(self, *args, **kwargs) -> Any: ...

class ModelComponent:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class ModelComponentSetBodies:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Body) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Body) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Body, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Body) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Body) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Body, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetConstraints:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Constraint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Constraint) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Constraint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Constraint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Constraint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Constraint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetContactGeometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ContactGeometry) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ContactGeometry) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ContactGeometry, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ContactGeometry) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ContactGeometry) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ContactGeometry, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetControllers:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Controller) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Controller) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Controller, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Controller) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Controller) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Controller, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetExternalForces:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ExternalForce) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ExternalForce) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ExternalForce, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ExternalForce) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ExternalForce) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ExternalForce, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetForces:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Force) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Force) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Force, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Force) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Force) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Force, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetFrames:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Frame) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Frame) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Frame, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Frame) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Frame) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Frame, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetJoints:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Joint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Joint) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Joint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Joint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Joint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Joint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetMarkers:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Marker) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Marker) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Marker, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Marker) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Marker) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Marker, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetModelComponent:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ModelComponent) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ModelComponent) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ModelComponent, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ModelComponent) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ModelComponent) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ModelComponent, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetProbes:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Probe) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Probe) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Probe, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Probe) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Probe) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Probe, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelComponentSetWrapObjects:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: WrapObject) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: WrapObject) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: WrapObject, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: WrapObject) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: WrapObject) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: WrapObject, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelHasNoSystem:
    def __init__(selffile: str, line: Any, func: str, modelName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ModelVisualPreferences:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def append_ModelDisplayHints(selfvalue: ModelDisplayHints) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_ModelDisplayHints(self, *args, **kwargs) -> Any: ...
    def copyProperty_ModelDisplayHints(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_ModelDisplayHints(selfi: int) -> Any: ...
    @overload
    def get_ModelDisplayHints(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_ModelDisplayHints(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_ModelDisplayHints(selfi: int) -> Any: ...
    @overload
    def upd_ModelDisplayHints(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelVisualizer:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addDirToGeometrySearchPaths(self, *args, **kwargs) -> Any: ...
    def findGeometryFile(selfmodel: Model, geoFile: str, isAbsolute: Any, attempts: Array_) -> bool: ...
    def getGeometryDecorationGenerator(self) -> DefaultGeometry: ...
    def getInputSilo(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getSimbodyVisualizer(self) -> Any: ...
    def show(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updInputSilo(self) -> Any: ...
    def updModel(self) -> Any: ...
    def updSimbodyVisualizer(self) -> Any: ...

class MomentArmSolver:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(selfmodel: Model) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def solve(selfstate: State, coordinate: Coordinate, path: GeometryPath) -> float: ...
    @overload
    def solve(selfstate: State, coordinate: Coordinate, pfds: Array) -> float: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MovingPathPoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent_frame: Any
    PropertyIndex_socket_x_coordinate: Any
    PropertyIndex_socket_y_coordinate: Any
    PropertyIndex_socket_z_coordinate: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_x_location(selfvalue: Function) -> int: ...
    def append_y_location(selfvalue: Function) -> int: ...
    def append_z_location(selfvalue: Function) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_x_coordinate(self, *args, **kwargs) -> Any: ...
    def connectSocket_y_coordinate(self, *args, **kwargs) -> Any: ...
    def connectSocket_z_coordinate(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_x_location(self, *args, **kwargs) -> Any: ...
    def constructProperty_y_location(self, *args, **kwargs) -> Any: ...
    def constructProperty_z_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_x_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_y_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_z_location(self, *args, **kwargs) -> Any: ...
    def deletePathPoint(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(selfs: State) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocity(selfs: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(self) -> Any: ...
    def getXCoordinate(self) -> Any: ...
    def getYCoordinate(self) -> Any: ...
    def getZCoordinate(self) -> Any: ...
    def get_x_location(selfi: int) -> Any: ...
    @overload
    def get_x_location(self) -> Any: ...
    def get_y_location(selfi: int) -> Any: ...
    @overload
    def get_y_location(self) -> Any: ...
    def get_z_location(selfi: int) -> Any: ...
    @overload
    def get_z_location(self) -> Any: ...
    def getdPointdQ(selfs: State) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasXCoordinate(self) -> bool: ...
    def hasYCoordinate(self) -> bool: ...
    def hasZCoordinate(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActive(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setXCoordinate(self, *args, **kwargs) -> Any: ...
    def setYCoordinate(self, *args, **kwargs) -> Any: ...
    def setZCoordinate(self, *args, **kwargs) -> Any: ...
    def set_x_location(self, *args, **kwargs) -> Any: ...
    def set_y_location(self, *args, **kwargs) -> Any: ...
    def set_z_location(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_x_location(selfi: int) -> Any: ...
    @overload
    def upd_x_location(self) -> Any: ...
    def upd_y_location(selfi: int) -> Any: ...
    @overload
    def upd_y_location(self) -> Any: ...
    def upd_z_location(selfi: int) -> Any: ...
    @overload
    def upd_z_location(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Muscle:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_ignore_activation_dynamics(selfvalue: Any) -> int: ...
    def append_ignore_tendon_compliance(selfvalue: Any) -> int: ...
    def append_max_contraction_velocity(selfvalue: Any) -> int: ...
    def append_max_control(selfvalue: Any) -> int: ...
    def append_max_isometric_force(selfvalue: Any) -> int: ...
    def append_min_control(selfvalue: Any) -> int: ...
    def append_optimal_fiber_length(selfvalue: Any) -> int: ...
    def append_optimal_force(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(selfvalue: Any) -> int: ...
    def append_tendon_slack_length(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_ignore_activation_dynamics(selfi: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_tendon_compliance(selfi: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_max_contraction_velocity(selfi: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(selfi: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(selfi: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_min_control(selfi: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(selfi: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(selfi: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_slack_length(selfi: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MuscleActiveFiberPowerProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfmuscle_names: Array) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_muscle_names(selfvalue: str) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_muscle_names(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_muscle_names(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMuscleNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_muscle_names(selfi: int) -> str: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setMuscleNames(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_muscle_names(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_muscle_names(selfi: int) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MuscleCannotEquilibrate:
    def __init__(selffile: str, line: Any, func: str, obj: Object, detail: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class MuscleFirstOrderActivationDynamicModel:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selftauActivation: float, tauDeactivation: float, minActivation: float, muscleName: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_activation_time_constant(selfvalue: Any) -> int: ...
    def append_deactivation_time_constant(selfvalue: Any) -> int: ...
    def append_minimum_activation(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfactivation: float, excitation: float) -> float: ...
    def clampActivation(selfactivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_minimum_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_minimum_activation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_activation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_deactivation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_deactivation_time_constant(self) -> Any: ...
    def get_minimum_activation(selfi: int) -> Any: ...
    @overload
    def get_minimum_activation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_minimum_activation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_activation_time_constant(selfi: int) -> float: ...
    @overload
    def upd_activation_time_constant(self) -> Any: ...
    def upd_deactivation_time_constant(selfi: int) -> float: ...
    @overload
    def upd_deactivation_time_constant(self) -> Any: ...
    def upd_minimum_activation(selfi: int) -> float: ...
    @overload
    def upd_minimum_activation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MuscleFixedWidthPennationModel:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfoptimalFiberLength: float, optimalPennationAngle: float, maximumPennationAngle: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_maximum_pennation_angle(selfvalue: Any) -> int: ...
    def append_optimal_fiber_length(selfvalue: Any) -> int: ...
    def append_pennation_angle_at_optimal(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcFiberAccelerationAlongTendon(selffiberLength: float, fiberVelocity: float, fiberAcceleration: float, sinPennationAngle: float, cosPennationAngle: float, pennationAngularVelocity: float, pennationAngularAcceleration: float) -> float: ...
    def calcFiberLength(selfmuscleLength: float, tendonLength: float) -> float: ...
    def calcFiberLengthAlongTendon(selffiberLength: float, cosPennationAngle: float) -> float: ...
    def calcFiberVelocity(selfcosPennationAngle: float, muscleVelocity: float, tendonVelocity: float) -> float: ...
    def calcFiberVelocityAlongTendon(selffiberLength: float, fiberVelocity: float, sinPennationAngle: float, cosPennationAngle: float, pennationAngularVelocity: float) -> float: ...
    def calcPennationAngle(selffiberLength: float) -> float: ...
    def calcPennationAngularAcceleration(selffiberLength: float, fiberVelocity: float, fiberAcceleration: float, sinPennationAngle: float, cosPennationAngle: float, pennationAngularVelocity: float) -> float: ...
    def calcPennationAngularVelocity(selftanPennationAngle: float, fiberLength: float, fiberVelocity: float) -> float: ...
    def calcTendonLength(selfcosPennationAngle: float, fiberLength: float, muscleLength: float) -> float: ...
    def calcTendonVelocity(selfcosPennationAngle: float, sinPennationAngle: float, pennationAngularVelocity: float, fiberLength: float, fiberVelocity: float, muscleVelocity: float) -> float: ...
    def calc_DFiberLengthAlongTendon_DfiberLength(selffiberLength: float, sinPennationAngle: float, cosPennationAngle: float, DpennationAngle_DfiberLength: float) -> float: ...
    def calc_DFiberVelocityAlongTendon_DfiberLength(selffiberLength: float, fiberVelocity: float, sinPennationAngle: float, cosPennationAngle: float, pennationAngularVelocity: float, DpennationAngle_DfiberLength: float, DpennationAngularVelocity_DfiberLength: float) -> float: ...
    def calc_DPennationAngle_DfiberLength(selffiberLength: float) -> float: ...
    def calc_DPennationAngularVelocity_DfiberLength(selffiberLength: float, fiberVelocity: float, sinPennationAngle: float, cosPennationAngle: float, pennationAngularVelocity: float, DpennationAngle_DfiberLength: float) -> float: ...
    def calc_DTendonLength_DfiberLength(selffiberLength: float, sinPennationAngle: float, cosPennationAngle: float, DpennationAngle_DfiberLength: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMinimumFiberLength(self) -> float: ...
    def getMinimumFiberLengthAlongTendon(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParallelogramHeight(self) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_maximum_pennation_angle(selfi: int) -> Any: ...
    @overload
    def get_maximum_pennation_angle(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_maximum_pennation_angle(selfi: int) -> float: ...
    @overload
    def upd_maximum_pennation_angle(self) -> Any: ...
    def upd_optimal_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_pennation_angle_at_optimal(selfi: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MuscleIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appliesForce(selfs: State) -> bool: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MuscleList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class OpenSenseUtilities:
    def __init__(self) -> None: ...
    def addModelIMUs(selfmodel: Model, paths: Any) -> Any: ...
    def computeHeadingCorrection(selfmodel: Model, state: State, quatTimeSeries: TimeSeriesTable_, baseIMU: str, arg5: CoordinateDirection) -> Any: ...
    def convertQuaternionsToRotations(selfqauternionsTable: TimeSeriesTable_) -> Any: ...
    def createOrientationsFileFromMarkers(selfmarkersFile: str) -> Any: ...
    def formTransformFromPoints(selfop: Vec3, xp: Vec3, yp: Vec3) -> Any: ...
    def rotateOrientationTable(self, *args, **kwargs) -> Any: ...
    thisown: Any

class OrientationWeight:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, weight: float) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getWeight(self) -> float: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setWeight(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class OrientationsReference:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selforientationFileName: str, modelUnits: Units) -> None: ...
    @overload
    def __init__(selforientationData: TimeSeriesTable_, orientationWeightSet: Set) -> None: ...
    def append_default_weight(selfvalue: Any) -> int: ...
    def append_orientation_file(selfvalue: str) -> int: ...
    def append_orientation_weights(selfvalue: Set) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_default_weight(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation_weights(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_weight(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation_weights(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNextValuesAndTime(selfvalues: Array_) -> float: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSamplingFrequency(self) -> float: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getTimes(self) -> Any: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(self, *args, **kwargs) -> Any: ...
    def get_default_weight(selfi: int) -> Any: ...
    @overload
    def get_default_weight(self) -> Any: ...
    def get_orientation_file(selfi: int) -> Any: ...
    @overload
    def get_orientation_file(self) -> str: ...
    def get_orientation_weights(selfi: int) -> Any: ...
    @overload
    def get_orientation_weights(self) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def loadOrientationsEulerAnglesFile(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultWeight(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrientationWeightSet(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_default_weight(self, *args, **kwargs) -> Any: ...
    def set_orientation_file(self, *args, **kwargs) -> Any: ...
    def set_orientation_weights(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updOrientationWeightSet(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_default_weight(selfi: int) -> float: ...
    @overload
    def upd_default_weight(self) -> Any: ...
    def upd_orientation_file(selfi: int) -> str: ...
    @overload
    def upd_orientation_file(self) -> Any: ...
    def upd_orientation_weights(selfi: int) -> Any: ...
    @overload
    def upd_orientation_weights(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathActuator:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_max_control(selfvalue: Any) -> int: ...
    def append_min_control(selfvalue: Any) -> int: ...
    def append_optimal_force(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getGeometryPath(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_max_control(selfi: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(selfi: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(selfi: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathPoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def changeBodyPreserveLocation(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def deletePathPoint(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(selfs: State) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(self) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def getdPointdQ(selfs: State) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActive(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setLocationCoord(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathPointSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: AbstractPathPoint) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: AbstractPathPoint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: AbstractPathPoint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: AbstractPathPoint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: AbstractPathPoint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathSpring:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, restLength: float, stiffness: float, dissipation: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_dissipation(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_resting_length(selfvalue: Any) -> int: ...
    def append_stiffness(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_dissipation(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_resting_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_dissipation(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_resting_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDissipation(self) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getGeometryPath(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRestingLength(self) -> float: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStiffness(self) -> float: ...
    def getStretch(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTension(selfs: State) -> float: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_dissipation(selfi: int) -> Any: ...
    @overload
    def get_dissipation(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_resting_length(selfi: int) -> Any: ...
    @overload
    def get_resting_length(self) -> Any: ...
    def get_stiffness(selfi: int) -> Any: ...
    @overload
    def get_stiffness(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setDissipation(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRestingLength(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setStiffness(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_dissipation(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_resting_length(self, *args, **kwargs) -> Any: ...
    def set_stiffness(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_dissipation(selfi: int) -> float: ...
    @overload
    def upd_dissipation(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_resting_length(selfi: int) -> float: ...
    @overload
    def upd_resting_length(self) -> Any: ...
    def upd_stiffness(selfi: int) -> float: ...
    @overload
    def upd_stiffness(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathWrap:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_method(selfvalue: str) -> int: ...
    def append_range(selfvalue: Any) -> int: ...
    def append_wrap_object(selfvalue: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    axial: Any
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_method(self, *args, **kwargs) -> Any: ...
    def constructProperty_wrap_object(self, *args, **kwargs) -> Any: ...
    def copyProperty_method(self, *args, **kwargs) -> Any: ...
    def copyProperty_range(self, *args, **kwargs) -> Any: ...
    def copyProperty_wrap_object(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEndPoint(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMethod(self) -> PathWrap: ...
    def getMethodName(self) -> str: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPreviousWrap(self) -> WrapResult: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStartPoint(self) -> int: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getWrapObject(self) -> Any: ...
    def getWrapObjectName(self) -> str: ...
    def getWrapPoint1(self) -> Any: ...
    def getWrapPoint2(self) -> Any: ...
    def get_method(selfi: int) -> Any: ...
    @overload
    def get_method(self) -> str: ...
    def get_range(selfi: int) -> Any: ...
    def get_wrap_object(selfi: int) -> Any: ...
    @overload
    def get_wrap_object(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    hybrid: Any
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    midpoint: Any
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resetPreviousWrap(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMethod(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPreviousWrap(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setWrapObject(self, *args, **kwargs) -> Any: ...
    def set_method(self, *args, **kwargs) -> Any: ...
    def set_range(self, *args, **kwargs) -> Any: ...
    def set_wrap_object(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updWrapPoint1(self) -> Any: ...
    def updWrapPoint2(self) -> Any: ...
    def upd_method(selfi: int) -> str: ...
    @overload
    def upd_method(self) -> Any: ...
    def upd_range(selfi: int) -> Any: ...
    def upd_wrap_object(selfi: int) -> str: ...
    @overload
    def upd_wrap_object(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathWrapPoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearWrapPath(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def deletePathPoint(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendAddToSystem(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocation(selfarg2: State) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapLength(selfarg2: State) -> float: ...
    def getWrapObject(self) -> Any: ...
    def getWrapPath(selfarg2: State) -> Any: ...
    def getdPointdQ(selfarg2: State) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActive(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLocation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setWrapLength(self, *args, **kwargs) -> Any: ...
    def setWrapObject(self, *args, **kwargs) -> Any: ...
    def setWrapPath(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PathWrapSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaPathWrapSet: PathWrapSet) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: PathWrap) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: PathWrap) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: PathWrap, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: PathWrap) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: PathWrap) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: PathWrap, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PhysicalFrame:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def addWrapObject(self, *args, **kwargs) -> Any: ...
    def append_WrapObjectSet(selfvalue: WrapObjectSet) -> int: ...
    def append_attached_geometry(selfvalue: Geometry) -> int: ...
    def append_frame_geometry(selfvalue: FrameGeometry) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def attachGeometry(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getMobilizedBody(self) -> MobilizedBody: ...
    def getMobilizedBodyIndex(self) -> MobilizedBodyIndex: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(selfaName: str) -> Any: ...
    def getWrapObjectSet(self) -> Any: ...
    def get_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def get_WrapObjectSet(self) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaleAttachedGeometry(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def set_attached_geometry(self, *args, **kwargs) -> Any: ...
    def set_frame_geometry(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updMobilizedBody(self) -> MobilizedBody: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def upd_WrapObjectSet(self) -> Any: ...
    def upd_attached_geometry(selfi: int) -> Any: ...
    def upd_frame_geometry(selfi: int) -> Any: ...
    @overload
    def upd_frame_geometry(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PhysicalFrameWithOffset:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def addWrapObject(self, *args, **kwargs) -> Any: ...
    def append_WrapObjectSet(selfvalue: WrapObjectSet) -> int: ...
    def append_attached_geometry(selfvalue: Geometry) -> int: ...
    def append_frame_geometry(selfvalue: FrameGeometry) -> int: ...
    def append_orientation(selfvalue: Vec3) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def attachGeometry(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getMobilizedBody(self) -> MobilizedBody: ...
    def getMobilizedBodyIndex(self) -> MobilizedBodyIndex: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOffsetTransform(self) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(selfaName: str) -> Any: ...
    def getWrapObjectSet(self) -> Any: ...
    def get_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def get_WrapObjectSet(self) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def get_orientation(selfi: int) -> Any: ...
    @overload
    def get_orientation(self) -> Any: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaleAttachedGeometry(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOffsetTransform(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def set_attached_geometry(self, *args, **kwargs) -> Any: ...
    def set_frame_geometry(self, *args, **kwargs) -> Any: ...
    def set_orientation(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updMobilizedBody(self) -> MobilizedBody: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def upd_WrapObjectSet(self) -> Any: ...
    def upd_attached_geometry(selfi: int) -> Any: ...
    def upd_frame_geometry(selfi: int) -> Any: ...
    @overload
    def upd_frame_geometry(self) -> Any: ...
    def upd_orientation(selfi: int) -> Any: ...
    @overload
    def upd_orientation(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PhysicalOffsetFrame:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfparent: PhysicalFrame, offset: Transform) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, offset: Transform) -> None: ...
    @overload
    def __init__(selfname: str, parentName: str, offset: Transform) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def addWrapObject(self, *args, **kwargs) -> Any: ...
    def append_WrapObjectSet(selfvalue: WrapObjectSet) -> int: ...
    def append_attached_geometry(selfvalue: Geometry) -> int: ...
    def append_frame_geometry(selfvalue: FrameGeometry) -> int: ...
    def append_orientation(selfvalue: Vec3) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def attachGeometry(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_orientation(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_attached_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_frame_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_orientation(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def expressVectorInAnotherFrame(selfstate: State, vec_F: Vec3, otherFrame: Frame) -> Any: ...
    def expressVectorInGround(selfstate: State, vec_F: Vec3) -> Any: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findBaseFrame(self) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findStationAccelerationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationLocationInAnotherFrame(selfstate: State, station_F: Vec3, otherFrame: Frame) -> Any: ...
    def findStationLocationInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findStationVelocityInGround(selfstate: State, station_F: Vec3) -> Any: ...
    def findTransformBetween(selfstate: State, otherFrame: Frame) -> Any: ...
    def findTransformInBaseFrame(self) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularAccelerationInGround(selfstate: State) -> Any: ...
    def getAngularVelocityInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLinearAccelerationInGround(selfstate: State) -> Any: ...
    def getLinearVelocityInGround(selfstate: State) -> Any: ...
    def getMobilizedBody(self) -> MobilizedBody: ...
    def getMobilizedBodyIndex(self) -> MobilizedBodyIndex: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOffsetTransform(self) -> Any: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPositionInGround(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getRotationInGround(selfstate: State) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransformInGround(selfstate: State) -> Any: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def getWrapObject(selfaName: str) -> Any: ...
    def getWrapObjectSet(self) -> Any: ...
    def get_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def get_WrapObjectSet(self) -> Any: ...
    def get_attached_geometry(selfi: int) -> Any: ...
    def get_frame_geometry(selfi: int) -> Any: ...
    @overload
    def get_frame_geometry(self) -> Any: ...
    def get_orientation(selfi: int) -> Any: ...
    @overload
    def get_orientation(self) -> Any: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def scaleAttachedGeometry(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOffsetTransform(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_WrapObjectSet(self, *args, **kwargs) -> Any: ...
    def set_attached_geometry(self, *args, **kwargs) -> Any: ...
    def set_frame_geometry(self, *args, **kwargs) -> Any: ...
    def set_orientation(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updMobilizedBody(self) -> MobilizedBody: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_WrapObjectSet(selfi: int) -> Any: ...
    @overload
    def upd_WrapObjectSet(self) -> Any: ...
    def upd_attached_geometry(selfi: int) -> Any: ...
    def upd_frame_geometry(selfi: int) -> Any: ...
    @overload
    def upd_frame_geometry(self) -> Any: ...
    def upd_orientation(selfi: int) -> Any: ...
    @overload
    def upd_orientation(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PhysicalOffsetFramesFormLoop:
    def __init__(selffile: str, line: Any, func: str, obj: Object, frameName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class PinJoint:
    Coord_RotationZ: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: PinJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: PinJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PlanarJoint:
    Coord_RotationZ: Any
    Coord_TranslationX: Any
    Coord_TranslationY: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: PlanarJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: PlanarJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Point:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PointConstraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_body_1: Any
    PropertyIndex_socket_body_2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfbody1: PhysicalFrame, locationBody1: Vec3, body2: PhysicalFrame, locationBody2: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def append_location_body_1(selfvalue: Vec3) -> int: ...
    def append_location_body_2(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_body_1(self, *args, **kwargs) -> Any: ...
    def connectSocket_body_2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def constructProperty_location_body_1(self, *args, **kwargs) -> Any: ...
    def constructProperty_location_body_2(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_location_body_1(self, *args, **kwargs) -> Any: ...
    def copyProperty_location_body_2(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def get_location_body_1(selfi: int) -> Any: ...
    @overload
    def get_location_body_1(self) -> Any: ...
    def get_location_body_2(selfi: int) -> Any: ...
    @overload
    def get_location_body_2(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody1ByName(self, *args, **kwargs) -> Any: ...
    def setBody1PointLocation(self, *args, **kwargs) -> Any: ...
    def setBody2ByName(self, *args, **kwargs) -> Any: ...
    def setBody2PointLocation(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    def set_location_body_1(self, *args, **kwargs) -> Any: ...
    def set_location_body_2(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def upd_location_body_1(selfi: int) -> Any: ...
    @overload
    def upd_location_body_1(self) -> Any: ...
    def upd_location_body_2(selfi: int) -> Any: ...
    @overload
    def upd_location_body_2(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PointForceDirection:
    def __init__(selfpoint: Vec3, frame: PhysicalFrame, direction: Vec3) -> None: ...
    @overload
    def __init__(selfpoint: Vec3, frame: PhysicalFrame, direction: Vec3, scale: float) -> None: ...
    def addToDirection(self, *args, **kwargs) -> Any: ...
    def direction(self) -> Any: ...
    def frame(self) -> Any: ...
    def point(self) -> Any: ...
    def scale(self) -> float: ...
    thisown: Any

class PointOnLineConstraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_follower_body: Any
    PropertyIndex_socket_line_body: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selflineBody: PhysicalFrame, lineDirection: Vec3, pointOnLine: Vec3, followerBody: PhysicalFrame, followerPoint: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def append_line_direction_vec(selfvalue: Vec3) -> int: ...
    def append_point_on_follower(selfvalue: Vec3) -> int: ...
    def append_point_on_line(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_follower_body(self, *args, **kwargs) -> Any: ...
    def connectSocket_line_body(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def constructProperty_line_direction_vec(self, *args, **kwargs) -> Any: ...
    def constructProperty_point_on_follower(self, *args, **kwargs) -> Any: ...
    def constructProperty_point_on_line(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_line_direction_vec(self, *args, **kwargs) -> Any: ...
    def copyProperty_point_on_follower(self, *args, **kwargs) -> Any: ...
    def copyProperty_point_on_line(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def get_line_direction_vec(selfi: int) -> Any: ...
    @overload
    def get_line_direction_vec(self) -> Any: ...
    def get_point_on_follower(selfi: int) -> Any: ...
    @overload
    def get_point_on_follower(self) -> Any: ...
    def get_point_on_line(selfi: int) -> Any: ...
    @overload
    def get_point_on_line(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFollowerBodyByName(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setLineBodyByName(self, *args, **kwargs) -> Any: ...
    def setLineDirection(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPointOnFollower(self, *args, **kwargs) -> Any: ...
    def setPointOnLine(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    def set_line_direction_vec(self, *args, **kwargs) -> Any: ...
    def set_point_on_follower(self, *args, **kwargs) -> Any: ...
    def set_point_on_line(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def upd_line_direction_vec(selfi: int) -> Any: ...
    @overload
    def upd_line_direction_vec(self) -> Any: ...
    def upd_point_on_follower(selfi: int) -> Any: ...
    @overload
    def upd_point_on_follower(self) -> Any: ...
    def upd_point_on_line(selfi: int) -> Any: ...
    @overload
    def upd_point_on_line(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PointToPointSpring:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_body1: Any
    PropertyIndex_socket_body2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfbody1: PhysicalFrame, point1: Vec3, body2: PhysicalFrame, point2: Vec3, stiffness: float, restlength: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_point1(selfvalue: Vec3) -> int: ...
    def append_point2(selfvalue: Vec3) -> int: ...
    def append_rest_length(selfvalue: Any) -> int: ...
    def append_stiffness(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_body1(self, *args, **kwargs) -> Any: ...
    def connectSocket_body2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_point1(self, *args, **kwargs) -> Any: ...
    def constructProperty_point2(self, *args, **kwargs) -> Any: ...
    def constructProperty_rest_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_point1(self, *args, **kwargs) -> Any: ...
    def copyProperty_point2(self, *args, **kwargs) -> Any: ...
    def copyProperty_rest_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody1(self) -> Any: ...
    def getBody2(self) -> Any: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPoint1(self) -> Any: ...
    def getPoint2(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRestlength(self) -> float: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStiffness(self) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_point1(selfi: int) -> Any: ...
    @overload
    def get_point1(self) -> Any: ...
    def get_point2(selfi: int) -> Any: ...
    @overload
    def get_point2(self) -> Any: ...
    def get_rest_length(selfi: int) -> Any: ...
    @overload
    def get_rest_length(self) -> Any: ...
    def get_stiffness(selfi: int) -> Any: ...
    @overload
    def get_stiffness(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody1(self, *args, **kwargs) -> Any: ...
    def setBody2(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPoint1(self, *args, **kwargs) -> Any: ...
    def setPoint2(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRestlength(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setStiffness(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_point1(self, *args, **kwargs) -> Any: ...
    def set_point2(self, *args, **kwargs) -> Any: ...
    def set_rest_length(self, *args, **kwargs) -> Any: ...
    def set_stiffness(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_point1(selfi: int) -> Any: ...
    @overload
    def upd_point1(self) -> Any: ...
    def upd_point2(selfi: int) -> Any: ...
    @overload
    def upd_point2(self) -> Any: ...
    def upd_rest_length(selfi: int) -> float: ...
    @overload
    def upd_rest_length(self) -> Any: ...
    def upd_stiffness(selfi: int) -> float: ...
    @overload
    def upd_stiffness(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PositionMotion:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_default_enabled(selfvalue: Any) -> int: ...
    def append_functions(selfvalue: FunctionSet) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_functions(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_functions(self, *args, **kwargs) -> Any: ...
    def createFromStatesTrajectory(selfmodel: Model, statesTraj: StatesTrajectory) -> PositionMotion: ...
    def createFromTable(selfmodel: Model, coords: TimeSeriesTable, allowExtraColumns: bool) -> PositionMotion: ...
    def dump(self) -> str: ...
    def exportToTable(selftime: Any) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultEnabled(self) -> bool: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEnabled(selfstate: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_default_enabled(selfi: int) -> Any: ...
    @overload
    def get_default_enabled(self) -> Any: ...
    def get_functions(selfi: int) -> Any: ...
    @overload
    def get_functions(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultEnabled(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPositionForCoordinate(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_default_enabled(self, *args, **kwargs) -> Any: ...
    def set_functions(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_default_enabled(selfi: int) -> bool: ...
    @overload
    def upd_default_enabled(self) -> Any: ...
    def upd_functions(selfi: int) -> Any: ...
    @overload
    def upd_functions(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PrescribedController:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_actuators: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfcontrolsFileName: str, interpMethodType: int) -> None: ...
    def addActuator(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendSocketConnectee_actuators(self, *args, **kwargs) -> Any: ...
    def append_ControlFunctions(selfvalue: FunctionSet) -> int: ...
    def append_controls_file(selfvalue: str) -> int: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_interpolation_method(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeControls(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_ControlFunctions(self, *args, **kwargs) -> Any: ...
    def constructProperty_controls_file(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_interpolation_method(self, *args, **kwargs) -> Any: ...
    def copyProperty_ControlFunctions(self, *args, **kwargs) -> Any: ...
    def copyProperty_controls_file(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_interpolation_method(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumActuators(self) -> int: ...
    def getNumControls(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_ControlFunctions(selfi: int) -> Any: ...
    @overload
    def get_ControlFunctions(self) -> Any: ...
    def get_controls_file(selfi: int) -> Any: ...
    @overload
    def get_controls_file(self) -> str: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_interpolation_method(selfi: int) -> Any: ...
    @overload
    def get_interpolation_method(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def prescribeControlForActuator(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuators(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_ControlFunctions(self, *args, **kwargs) -> Any: ...
    def set_controls_file(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_interpolation_method(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_ControlFunctions(selfi: int) -> Any: ...
    @overload
    def upd_ControlFunctions(self) -> Any: ...
    def upd_controls_file(selfi: int) -> str: ...
    @overload
    def upd_controls_file(self) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_interpolation_method(selfi: int) -> int: ...
    @overload
    def upd_interpolation_method(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PrescribedForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfaNode: Xml) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_forceFunctions(selfvalue: FunctionSet) -> int: ...
    def append_forceIsGlobal(selfvalue: Any) -> int: ...
    def append_pointFunctions(selfvalue: FunctionSet) -> int: ...
    def append_pointIsGlobal(selfvalue: Any) -> int: ...
    def append_torqueFunctions(selfvalue: FunctionSet) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearForceFunctions(self, *args, **kwargs) -> Any: ...
    def clearPointFunctions(self, *args, **kwargs) -> Any: ...
    def clearTorqueFunctions(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_forceFunctions(self, *args, **kwargs) -> Any: ...
    def constructProperty_forceIsGlobal(self, *args, **kwargs) -> Any: ...
    def constructProperty_pointFunctions(self, *args, **kwargs) -> Any: ...
    def constructProperty_pointIsGlobal(self, *args, **kwargs) -> Any: ...
    def constructProperty_torqueFunctions(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_forceFunctions(self, *args, **kwargs) -> Any: ...
    def copyProperty_forceIsGlobal(self, *args, **kwargs) -> Any: ...
    def copyProperty_pointFunctions(self, *args, **kwargs) -> Any: ...
    def copyProperty_pointIsGlobal(self, *args, **kwargs) -> Any: ...
    def copyProperty_torqueFunctions(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getApplicationPoint(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceApplied(selfstate: State) -> Any: ...
    def getForceAtTime(selfaTime: float) -> Any: ...
    def getForceFunctionNames(self, *args, **kwargs) -> Any: ...
    def getForceFunctions(self) -> Any: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceIsInGlobalFrame(self) -> bool: ...
    def getFrame(self) -> Any: ...
    def getFrameName(self) -> str: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPointAtTime(selfaTime: float) -> Any: ...
    def getPointFunctionNames(self, *args, **kwargs) -> Any: ...
    def getPointFunctions(self) -> Any: ...
    def getPointIsInGlobalFrame(self) -> bool: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTorqueApplied(selfstate: State) -> Any: ...
    def getTorqueAtTime(selfaTime: float) -> Any: ...
    def getTorqueFunctionNames(self, *args, **kwargs) -> Any: ...
    def getTorqueFunctions(self) -> Any: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_forceFunctions(selfi: int) -> Any: ...
    @overload
    def get_forceFunctions(self) -> Any: ...
    def get_forceIsGlobal(selfi: int) -> Any: ...
    @overload
    def get_forceIsGlobal(self) -> Any: ...
    def get_pointFunctions(selfi: int) -> Any: ...
    @overload
    def get_pointFunctions(self) -> Any: ...
    def get_pointIsGlobal(selfi: int) -> Any: ...
    @overload
    def get_pointIsGlobal(self) -> Any: ...
    def get_torqueFunctions(selfi: int) -> Any: ...
    @overload
    def get_torqueFunctions(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBodyName(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setForceFunctionNames(self, *args, **kwargs) -> Any: ...
    def setForceFunctions(self, *args, **kwargs) -> Any: ...
    def setForceIsInGlobalFrame(self, *args, **kwargs) -> Any: ...
    def setFrameName(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPointFunctionNames(self, *args, **kwargs) -> Any: ...
    def setPointFunctions(self, *args, **kwargs) -> Any: ...
    def setPointIsInGlobalFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTorqueFunctionNames(self, *args, **kwargs) -> Any: ...
    def setTorqueFunctions(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_forceFunctions(self, *args, **kwargs) -> Any: ...
    def set_forceIsGlobal(self, *args, **kwargs) -> Any: ...
    def set_pointFunctions(self, *args, **kwargs) -> Any: ...
    def set_pointIsGlobal(self, *args, **kwargs) -> Any: ...
    def set_torqueFunctions(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updForceFunctions(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPointFunctions(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updTorqueFunctions(self) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_forceFunctions(selfi: int) -> Any: ...
    @overload
    def upd_forceFunctions(self) -> Any: ...
    def upd_forceIsGlobal(selfi: int) -> bool: ...
    @overload
    def upd_forceIsGlobal(self) -> Any: ...
    def upd_pointFunctions(selfi: int) -> Any: ...
    @overload
    def upd_pointFunctions(self) -> Any: ...
    def upd_pointIsGlobal(selfi: int) -> bool: ...
    @overload
    def upd_pointIsGlobal(self) -> Any: ...
    def upd_torqueFunctions(selfi: int) -> Any: ...
    @overload
    def upd_torqueFunctions(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Probe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ProbeSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Probe) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Probe, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Probe) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Probe) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Probe, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ReferenceDouble:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(selfs: State) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ReferenceRotation:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(selfs: State) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ReferenceVec3:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(selfs: State) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ScalarActuator:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_max_control(selfvalue: Any) -> int: ...
    def append_min_control(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_max_control(selfi: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(selfi: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ScapulothoracicJoint:
    Coord_Abduction: Any
    Coord_Elevation: Any
    Coord_UpwardRotation: Any
    Coord_Winging: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame, ellipsoidRadii: Vec3, wingingOrigin: Vec2, wingingDirection: float) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3, ellipsoidRadii: Vec3, wingingOrigin: Vec2, wingingDirection: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def append_scapula_winging_axis_direction(selfvalue: Any) -> int: ...
    def append_scapula_winging_axis_origin(selfvalue: Any) -> int: ...
    def append_thoracic_ellipsoid_radii_x_y_z(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_scapula_winging_axis_direction(self, *args, **kwargs) -> Any: ...
    def constructProperty_thoracic_ellipsoid_radii_x_y_z(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_scapula_winging_axis_direction(self, *args, **kwargs) -> Any: ...
    def copyProperty_scapula_winging_axis_origin(self, *args, **kwargs) -> Any: ...
    def copyProperty_thoracic_ellipsoid_radii_x_y_z(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: ScapulothoracicJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def get_scapula_winging_axis_direction(selfi: int) -> Any: ...
    @overload
    def get_scapula_winging_axis_direction(self) -> Any: ...
    def get_scapula_winging_axis_origin(selfi: int) -> Any: ...
    def get_thoracic_ellipsoid_radii_x_y_z(selfi: int) -> Any: ...
    @overload
    def get_thoracic_ellipsoid_radii_x_y_z(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_scapula_winging_axis_direction(self, *args, **kwargs) -> Any: ...
    def set_scapula_winging_axis_origin(self, *args, **kwargs) -> Any: ...
    def set_thoracic_ellipsoid_radii_x_y_z(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: ScapulothoracicJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_scapula_winging_axis_direction(selfi: int) -> float: ...
    @overload
    def upd_scapula_winging_axis_direction(self) -> Any: ...
    def upd_scapula_winging_axis_origin(selfi: int) -> Any: ...
    def upd_thoracic_ellipsoid_radii_x_y_z(selfi: int) -> Any: ...
    @overload
    def upd_thoracic_ellipsoid_radii_x_y_z(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetActuators:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Actuator) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Actuator) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Actuator, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Actuator) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Actuator) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Actuator, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetAnalysis:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Analysis) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Analysis) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Analysis, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Analysis) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Analysis) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Analysis, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetBodies:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Body) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Body) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Body, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Body) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Body) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Body, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetBodyScales:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: BodyScale) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: BodyScale) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: BodyScale, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: BodyScale) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: BodyScale) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: BodyScale, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetConstraints:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Constraint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Constraint) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Constraint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Constraint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Constraint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Constraint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetContactGeometry:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ContactGeometry) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ContactGeometry) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ContactGeometry, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ContactGeometry) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ContactGeometry) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ContactGeometry, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetControlNodes:
    def __init__(selfaCapacity: int) -> None: ...
    @overload
    def __init__(selfaArray: ArrayPtrs) -> None: ...
    def append(selfaObject: ControlLinearNode) -> bool: ...
    @overload
    def append(selfaArray: ArrayPtrs) -> bool: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getIndex(selfaObject: ArrayPtrs, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def insert(selfaIndex: int, aObject: ControlLinearNode) -> bool: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ArrayPtrs) -> bool: ...
    def searchBinary(selfaObject: ArrayPtrs, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(selfaIndex: int, aObject: ControlLinearNode) -> bool: ...
    def setSize(selfaSize: int) -> bool: ...
    def size(self) -> int: ...
    thisown: Any

class SetControllers:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Controller) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Controller) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Controller, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Controller) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Controller) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Controller, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetControls:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Control) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Control) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Control, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Control) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Control) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Control, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetCoordinates:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Coordinate) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Coordinate) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Coordinate, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Coordinate) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Coordinate) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Coordinate, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetExternalForces:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ExternalForce) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ExternalForce) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ExternalForce, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ExternalForce) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ExternalForce) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ExternalForce, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetForces:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Force) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Force) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Force, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Force) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Force) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Force, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetFrames:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Frame) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Frame) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Frame, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Frame) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Frame) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Frame, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetJoints:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Joint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Joint) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Joint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Joint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Joint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Joint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetMarkerWeights:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: MarkerWeight) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: MarkerWeight) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: MarkerWeight, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: MarkerWeight) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: MarkerWeight) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: MarkerWeight, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetMarkers:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Marker) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Marker) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Marker, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Marker) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Marker) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Marker, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetModelComponents:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: ModelComponent) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: ModelComponent) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: ModelComponent, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: ModelComponent) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: ModelComponent) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: ModelComponent, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetMuscles:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Muscle) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Muscle) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Muscle, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: Muscle) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Muscle) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: Muscle, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetOfPathPoints:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: AbstractPathPoint) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: AbstractPathPoint) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: AbstractPathPoint, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: AbstractPathPoint) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: AbstractPathPoint) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: AbstractPathPoint, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetOientationWeights:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: OrientationWeight) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: OrientationWeight) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: OrientationWeight, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: OrientationWeight) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: OrientationWeight) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: OrientationWeight, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetPathWrap:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: PathWrap) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: PathWrap) -> bool: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: PathWrap, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(selfname: str) -> bool: ...
    def insert(selfaIndex: int, aObject: PathWrap) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: PathWrap) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def set(selfaIndex: int, aObject: PathWrap, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetProbes:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: Probe) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: Probe) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: Probe, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: Probe) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: Probe) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: Probe, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetWrapObject:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(selfaSet: Set) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: WrapObject) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: WrapObject) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: WrapObject, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: WrapObject) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: WrapObject) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: WrapObject, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SharedMarkersReference:
    def __init__(self) -> None: ...
    thisown: Any

class SharedOrientationsReference:
    def __init__(self) -> None: ...
    thisown: Any

class SimTKArrayCoordinateReference:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfn: CoordinateReference) -> None: ...
    @overload
    def __init__(selfn: CoordinateReference, initVal: CoordinateReference) -> None: ...
    @overload
    def __init__(selfsrc: CoordinateReference) -> None: ...
    @overload
    def __init__(selffirst: CoordinateReference, last1: CoordinateReference, arg4: DontCopy) -> None: ...
    def adoptData(selfnewData: CoordinateReference, dataSize: CoordinateReference, dataCapacity: CoordinateReference) -> Any: ...
    @overload
    def adoptData(selfnewData: CoordinateReference, dataSize: CoordinateReference) -> Any: ...
    def allocated(self) -> CoordinateReference: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def at(selfi: CoordinateReference) -> Any: ...
    @overload
    def at(selfi: CoordinateReference) -> Any: ...
    def back(self) -> Any: ...
    @overload
    def back(self) -> Any: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> Any: ...
    def capacity(self) -> CoordinateReference: ...
    def cbegin(self) -> Any: ...
    def cdata(self) -> Any: ...
    def cend(self) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def crbegin(self) -> CoordinateReference: ...
    def crend(self) -> CoordinateReference: ...
    def data(self) -> Any: ...
    @overload
    def data(self) -> Any: ...
    def deallocate(self) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> Any: ...
    def erase(selffirst: CoordinateReference, last1: CoordinateReference) -> Any: ...
    @overload
    def erase(selfp: CoordinateReference) -> Any: ...
    def eraseFast(selfp: CoordinateReference) -> Any: ...
    def fill(self, *args, **kwargs) -> Any: ...
    def front(self) -> Any: ...
    @overload
    def front(self) -> Any: ...
    def getElt(selfi: CoordinateReference) -> Any: ...
    def insert(selfp: CoordinateReference, n: CoordinateReference, value: CoordinateReference) -> Any: ...
    @overload
    def insert(selfp: CoordinateReference, value: CoordinateReference) -> Any: ...
    def isOwner(self) -> bool: ...
    def max_size(self) -> CoordinateReference: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def raw_push_back(self) -> Any: ...
    def rbegin(self) -> CoordinateReference: ...
    @overload
    def rbegin(self) -> CoordinateReference: ...
    def rend(self) -> CoordinateReference: ...
    @overload
    def rend(self) -> CoordinateReference: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def shareData(selfnewData: CoordinateReference, dataSize: CoordinateReference) -> Any: ...
    @overload
    def shareData(selffirst: CoordinateReference, last1: CoordinateReference) -> Any: ...
    def shrink_to_fit(self, *args, **kwargs) -> Any: ...
    def size(self) -> CoordinateReference: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updElt(selfi: CoordinateReference) -> Any: ...

class SimbodyEngine:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaFileName: str) -> None: ...
    @overload
    def __init__(selfaEngine: SimbodyEngine) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistance(selfs: State, aBody1: PhysicalFrame, aPoint1: Vec3, aBody2: PhysicalFrame, aPoint2: Vec3) -> float: ...
    @overload
    def calcDistance(selfs: State, aBody1: PhysicalFrame, aPoint1: Any, aBody2: PhysicalFrame, aPoint2: Any) -> float: ...
    def clone(self) -> Any: ...
    def computeReactions(self, *args, **kwargs) -> Any: ...
    def connectSimbodyEngineToModel(self, *args, **kwargs) -> Any: ...
    def convertAnglesToDirectionCosines(self, *args, **kwargs) -> Any: ...
    def convertDegreesToRadians(self, *args, **kwargs) -> Any: ...
    def convertDirectionCosinesToAngles(self, *args, **kwargs) -> Any: ...
    def convertDirectionCosinesToQuaternions(self, *args, **kwargs) -> Any: ...
    def convertQuaternionsToDirectionCosines(self, *args, **kwargs) -> Any: ...
    def convertRadiansToDegrees(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def formCompleteStorages(self, *args, **kwargs) -> Any: ...
    def getAcceleration(self, *args, **kwargs) -> Any: ...
    def getAngularAcceleration(self, *args, **kwargs) -> Any: ...
    def getAngularAccelerationBodyLocal(self, *args, **kwargs) -> Any: ...
    def getAngularVelocity(self, *args, **kwargs) -> Any: ...
    def getAngularVelocityBodyLocal(self, *args, **kwargs) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDirectionCosines(self, *args, **kwargs) -> Any: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPosition(self, *args, **kwargs) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getTransform(selfs: State, aBody: PhysicalFrame) -> Any: ...
    def getVelocity(self, *args, **kwargs) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def transform(self, *args, **kwargs) -> Any: ...
    def transformPosition(self, *args, **kwargs) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SliderJoint:
    Coord_TranslationX: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: SliderJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: SliderJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SmoothSphereHalfSpaceForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_half_space: Any
    PropertyIndex_socket_sphere: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, contactSphere: ContactSphere, contactHalfSpace: ContactHalfSpace) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_constant_contact_force(selfvalue: Any) -> int: ...
    def append_dissipation(selfvalue: Any) -> int: ...
    def append_dynamic_friction(selfvalue: Any) -> int: ...
    def append_force_visualization_radius(selfvalue: Any) -> int: ...
    def append_force_visualization_scale_factor(selfvalue: Any) -> int: ...
    def append_hertz_smoothing(selfvalue: Any) -> int: ...
    def append_hunt_crossley_smoothing(selfvalue: Any) -> int: ...
    def append_static_friction(selfvalue: Any) -> int: ...
    def append_stiffness(selfvalue: Any) -> int: ...
    def append_transition_velocity(selfvalue: Any) -> int: ...
    def append_viscous_friction(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_half_space(self, *args, **kwargs) -> Any: ...
    def connectSocket_sphere(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_constant_contact_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_dissipation(self, *args, **kwargs) -> Any: ...
    def constructProperty_dynamic_friction(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_visualization_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_visualization_scale_factor(self, *args, **kwargs) -> Any: ...
    def constructProperty_hertz_smoothing(self, *args, **kwargs) -> Any: ...
    def constructProperty_hunt_crossley_smoothing(self, *args, **kwargs) -> Any: ...
    def constructProperty_static_friction(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def constructProperty_transition_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_viscous_friction(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_constant_contact_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_dissipation(self, *args, **kwargs) -> Any: ...
    def copyProperty_dynamic_friction(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_visualization_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_visualization_scale_factor(self, *args, **kwargs) -> Any: ...
    def copyProperty_hertz_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_hunt_crossley_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_static_friction(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_transition_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_viscous_friction(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getHalfSpaceForce(selfs: State) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSphereForce(selfs: State) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_constant_contact_force(selfi: int) -> Any: ...
    @overload
    def get_constant_contact_force(self) -> Any: ...
    def get_dissipation(selfi: int) -> Any: ...
    @overload
    def get_dissipation(self) -> Any: ...
    def get_dynamic_friction(selfi: int) -> Any: ...
    @overload
    def get_dynamic_friction(self) -> Any: ...
    def get_force_visualization_radius(selfi: int) -> Any: ...
    @overload
    def get_force_visualization_radius(self) -> Any: ...
    def get_force_visualization_scale_factor(selfi: int) -> Any: ...
    @overload
    def get_force_visualization_scale_factor(self) -> Any: ...
    def get_hertz_smoothing(selfi: int) -> Any: ...
    @overload
    def get_hertz_smoothing(self) -> Any: ...
    def get_hunt_crossley_smoothing(selfi: int) -> Any: ...
    @overload
    def get_hunt_crossley_smoothing(self) -> Any: ...
    def get_static_friction(selfi: int) -> Any: ...
    @overload
    def get_static_friction(self) -> Any: ...
    def get_stiffness(selfi: int) -> Any: ...
    @overload
    def get_stiffness(self) -> Any: ...
    def get_transition_velocity(selfi: int) -> Any: ...
    @overload
    def get_transition_velocity(self) -> Any: ...
    def get_viscous_friction(selfi: int) -> Any: ...
    @overload
    def get_viscous_friction(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_constant_contact_force(self, *args, **kwargs) -> Any: ...
    def set_dissipation(self, *args, **kwargs) -> Any: ...
    def set_dynamic_friction(self, *args, **kwargs) -> Any: ...
    def set_force_visualization_radius(self, *args, **kwargs) -> Any: ...
    def set_force_visualization_scale_factor(self, *args, **kwargs) -> Any: ...
    def set_hertz_smoothing(self, *args, **kwargs) -> Any: ...
    def set_hunt_crossley_smoothing(self, *args, **kwargs) -> Any: ...
    def set_static_friction(self, *args, **kwargs) -> Any: ...
    def set_stiffness(self, *args, **kwargs) -> Any: ...
    def set_transition_velocity(self, *args, **kwargs) -> Any: ...
    def set_viscous_friction(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_constant_contact_force(selfi: int) -> float: ...
    @overload
    def upd_constant_contact_force(self) -> Any: ...
    def upd_dissipation(selfi: int) -> float: ...
    @overload
    def upd_dissipation(self) -> Any: ...
    def upd_dynamic_friction(selfi: int) -> float: ...
    @overload
    def upd_dynamic_friction(self) -> Any: ...
    def upd_force_visualization_radius(selfi: int) -> float: ...
    @overload
    def upd_force_visualization_radius(self) -> Any: ...
    def upd_force_visualization_scale_factor(selfi: int) -> float: ...
    @overload
    def upd_force_visualization_scale_factor(self) -> Any: ...
    def upd_hertz_smoothing(selfi: int) -> float: ...
    @overload
    def upd_hertz_smoothing(self) -> Any: ...
    def upd_hunt_crossley_smoothing(selfi: int) -> float: ...
    @overload
    def upd_hunt_crossley_smoothing(self) -> Any: ...
    def upd_static_friction(selfi: int) -> float: ...
    @overload
    def upd_static_friction(self) -> Any: ...
    def upd_stiffness(selfi: int) -> float: ...
    @overload
    def upd_stiffness(self) -> Any: ...
    def upd_transition_velocity(selfi: int) -> float: ...
    @overload
    def upd_transition_velocity(self) -> Any: ...
    def upd_viscous_friction(selfi: int) -> float: ...
    @overload
    def upd_viscous_friction(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Solver:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SpatialTransform:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def append_rotation1(selfvalue: TransformAxis) -> int: ...
    def append_rotation2(selfvalue: TransformAxis) -> int: ...
    def append_rotation3(selfvalue: TransformAxis) -> int: ...
    def append_translation1(selfvalue: TransformAxis) -> int: ...
    def append_translation2(selfvalue: TransformAxis) -> int: ...
    def append_translation3(selfvalue: TransformAxis) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToJoint(self, *args, **kwargs) -> Any: ...
    def constructIndependentAxes(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotation1(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotation2(self, *args, **kwargs) -> Any: ...
    def constructProperty_rotation3(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation1(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation2(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation3(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotation1(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotation2(self, *args, **kwargs) -> Any: ...
    def copyProperty_rotation3(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation1(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation2(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation3(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getAxes(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCoordinateNames(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFunctions(self) -> Function: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getTransformAxis(selfwhichAxis: int) -> Any: ...
    def get_rotation1(selfi: int) -> Any: ...
    @overload
    def get_rotation1(self) -> Any: ...
    def get_rotation2(selfi: int) -> Any: ...
    @overload
    def get_rotation2(self) -> Any: ...
    def get_rotation3(selfi: int) -> Any: ...
    @overload
    def get_rotation3(self) -> Any: ...
    def get_translation1(selfi: int) -> Any: ...
    @overload
    def get_translation1(self) -> Any: ...
    def get_translation2(selfi: int) -> Any: ...
    @overload
    def get_translation2(self) -> Any: ...
    def get_translation3(selfi: int) -> Any: ...
    @overload
    def get_translation3(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_rotation1(self, *args, **kwargs) -> Any: ...
    def set_rotation2(self, *args, **kwargs) -> Any: ...
    def set_rotation3(self, *args, **kwargs) -> Any: ...
    def set_translation1(self, *args, **kwargs) -> Any: ...
    def set_translation2(self, *args, **kwargs) -> Any: ...
    def set_translation3(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updTransformAxis(selfwhichAxis: int) -> Any: ...
    def upd_rotation1(selfi: int) -> Any: ...
    @overload
    def upd_rotation1(self) -> Any: ...
    def upd_rotation2(selfi: int) -> Any: ...
    @overload
    def upd_rotation2(self) -> Any: ...
    def upd_rotation3(selfi: int) -> Any: ...
    @overload
    def upd_rotation3(self) -> Any: ...
    def upd_translation1(selfi: int) -> Any: ...
    @overload
    def upd_translation1(self) -> Any: ...
    def upd_translation2(selfi: int) -> Any: ...
    @overload
    def upd_translation2(self) -> Any: ...
    def upd_translation3(selfi: int) -> Any: ...
    @overload
    def upd_translation3(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Sphere:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfradius: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_radius(selfvalue: Any) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_radius(selfi: int) -> Any: ...
    @overload
    def get_radius(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_radius(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_radius(selfi: int) -> float: ...
    @overload
    def upd_radius(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class StatesDocument:
    def __init__(self) -> None: ...
    @overload
    def __init__(selffilename: String) -> None: ...
    @overload
    def __init__(selfmodel: Model, trajectory: Array_, note: String, precision: int) -> None: ...
    @overload
    def __init__(selfmodel: Model, trajectory: State, note: String, precision: int) -> None: ...
    def deserialize(self, *args, **kwargs) -> Any: ...
    def getNote(self) -> String: ...
    def getPrecision(self) -> int: ...
    def serialize(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StatesTrajectory:
    def __init__(self) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> StatesTrajectory: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def createFromStatesStorage(selfmodel: Model, sto: Storage, allowMissingColumns: bool, allowExtraColumns: bool, assemble: bool) -> Any: ...
    @overload
    def createFromStatesStorage(selfmodel: Model, filepath: str) -> Any: ...
    def createFromStatesTable(selfmodel: Model, table: TimeSeriesTable, allowMissingColumns: bool, allowExtraColumns: bool, assemble: bool) -> Any: ...
    def end(self) -> StatesTrajectory: ...
    def exportToStatesDocument(selfmodel: Model, note: String, precision: int) -> Any: ...
    def exportToTable(selfmodel: Model, stateVars: Any) -> Any: ...
    def front(self) -> Any: ...
    def get(selfindex: Any) -> Any: ...
    def getBetween(self, *args, **kwargs) -> Any: ...
    def getSize(self) -> Any: ...
    def getStateArray(self) -> Any: ...
    def hasIntegrity(self) -> bool: ...
    def isCompatibleWith(selfmodel: Model) -> bool: ...
    def isConsistent(self) -> bool: ...
    def isNondecreasingInTime(self) -> bool: ...
    thisown: Any

class StatesTrajectoryReporter:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStates(self) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVectorOfStateObjects(self) -> Any: ...
    def get_report_time_interval(selfi: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_report_time_interval(selfi: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Station:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfframe: PhysicalFrame, location: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_location(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDistanceBetween(selfstate: State, other: Point) -> float: ...
    @overload
    def calcDistanceBetween(selfstate: State, frame: Frame, location: Vec3) -> float: ...
    def calcSpeedBetween(selfstate: State, other: Point) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_location(self, *args, **kwargs) -> Any: ...
    def copyProperty_location(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def findLocationInFrame(selfs: State, frame: Frame) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAccelerationInGround(selfstate: State) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLocationInGround(selfstate: State) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getVelocityInGround(selfstate: State) -> Any: ...
    def get_location(selfi: int) -> Any: ...
    @overload
    def get_location(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setParentFrame(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_location(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_location(selfi: int) -> Any: ...
    @overload
    def upd_location(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class StdVectorIMUs:
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: IMU) -> None: ...
    @overload
    def __init__(selfsize: IMU) -> None: ...
    @overload
    def __init__(selfsize: IMU, value: IMU) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> IMU: ...
    def capacity(self) -> IMU: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> IMU: ...
    def erase(selfpos: IMU) -> IMU: ...
    @overload
    def erase(selffirst: IMU, last: IMU) -> IMU: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> IMU: ...
    def insert(selfpos: IMU, x: IMU, pos: IMU, n: IMU, x: IMU) -> IMU: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> IMU: ...
    def rend(self) -> IMU: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> IMU: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StreamableReferenceRotation:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self) -> Any: ...
    def getNextValuesAndTime(selfvalues: Array_) -> float: ...
    def getNumProperties(self) -> int: ...
    def getNumRefs(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValidTimeRange(self) -> Any: ...
    def getValues(selftime: float) -> Any: ...
    def getValuesAtTime(self, *args, **kwargs) -> Any: ...
    def getWeights(selfs: State) -> Any: ...
    def hasNext(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SurfaceProperties:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def append_representation(selfvalue: Any) -> int: ...
    def append_texture(selfvalue: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_representation(self, *args, **kwargs) -> Any: ...
    def constructProperty_texture(self, *args, **kwargs) -> Any: ...
    def copyProperty_representation(self, *args, **kwargs) -> Any: ...
    def copyProperty_texture(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_representation(selfi: int) -> Any: ...
    @overload
    def get_representation(self) -> Any: ...
    def get_texture(selfi: int) -> Any: ...
    @overload
    def get_texture(self) -> str: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasTexture(self) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_representation(self, *args, **kwargs) -> Any: ...
    def set_texture(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_representation(selfi: int) -> int: ...
    @overload
    def upd_representation(self) -> Any: ...
    def upd_texture(selfi: int) -> str: ...
    @overload
    def upd_texture(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SwigPyIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def advance(selfn: Any) -> Any: ...
    def copy(self) -> Any: ...
    def decr(selfn: Any) -> Any: ...
    def distance(selfx: Any) -> Any: ...
    def equal(selfx: Any) -> bool: ...
    def incr(selfn: Any) -> Any: ...
    def next(self) -> Any: ...
    def previous(self) -> Any: ...
    thisown: Any
    def value(self) -> Any: ...

class SynergyController:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_controls: Any
    PropertyIndex_socket_actuators: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfother: SynergyController) -> None: ...
    @overload
    def __init__(selfother: SynergyController) -> None: ...
    def addActuator(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addSynergyVector(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appendSocketConnectee_actuators(self, *args, **kwargs) -> Any: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_synergy_vectors(selfvalue: SynergyVector) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeControls(self, *args, **kwargs) -> Any: ...
    def computeControlsImpl(self, *args, **kwargs) -> Any: ...
    def connectInput_controls(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_synergy_vectors(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_synergy_vectors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControlIndexes(self) -> Any: ...
    def getControlNames(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputControlLabels(self) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumActuators(self) -> int: ...
    def getNumControls(self) -> int: ...
    def getNumInputControls(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getNumSynergies(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSynergyVector(selfindex: int) -> Any: ...
    def getSynergyVectorsAsMatrix(self) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_synergy_vectors(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuators(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_synergy_vectors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updSynergyVector(self, *args, **kwargs) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_synergy_vectors(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SynergyVector:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, weights: Any) -> None: ...
    def append_synergy_weights(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_synergy_weights(self, *args, **kwargs) -> Any: ...
    def copyProperty_synergy_weights(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_synergy_weights(selfi: int) -> Any: ...
    @overload
    def get_synergy_weights(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_synergy_weights(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_synergy_weights(selfi: int) -> Any: ...
    @overload
    def upd_synergy_weights(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SystemEnergyProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfcomputeKE: bool, computePE: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_compute_kinetic_energy(selfvalue: Any) -> int: ...
    def append_compute_potential_energy(selfvalue: Any) -> int: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_compute_kinetic_energy(self, *args, **kwargs) -> Any: ...
    def constructProperty_compute_potential_energy(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_compute_kinetic_energy(self, *args, **kwargs) -> Any: ...
    def copyProperty_compute_potential_energy(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getComputeKineticEnergy(self) -> bool: ...
    def getComputePotentialEnergy(self) -> bool: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_compute_kinetic_energy(selfi: int) -> Any: ...
    @overload
    def get_compute_kinetic_energy(self) -> Any: ...
    def get_compute_potential_energy(selfi: int) -> Any: ...
    @overload
    def get_compute_potential_energy(self) -> Any: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setComputeKineticEnergy(self, *args, **kwargs) -> Any: ...
    def setComputePotentialEnergy(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_compute_kinetic_energy(self, *args, **kwargs) -> Any: ...
    def set_compute_potential_energy(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_compute_kinetic_energy(selfi: int) -> bool: ...
    @overload
    def upd_compute_kinetic_energy(self) -> Any: ...
    def upd_compute_potential_energy(selfi: int) -> bool: ...
    @overload
    def upd_compute_potential_energy(self) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TabOpAppendCoordinateValueDerivativesAsSpeeds:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfoverwriteExistingColumns: bool) -> None: ...
    def append_overwrite_existing_columns(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_overwrite_existing_columns(self, *args, **kwargs) -> Any: ...
    def copyProperty_overwrite_existing_columns(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_overwrite_existing_columns(selfi: int) -> Any: ...
    @overload
    def get_overwrite_existing_columns(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_overwrite_existing_columns(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_overwrite_existing_columns(selfi: int) -> bool: ...
    @overload
    def upd_overwrite_existing_columns(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TabOpAppendCoupledCoordinateValues:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfoverwriteExistingColumns: bool) -> None: ...
    def append_overwrite_existing_columns(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_overwrite_existing_columns(self, *args, **kwargs) -> Any: ...
    def copyProperty_overwrite_existing_columns(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_overwrite_existing_columns(selfi: int) -> Any: ...
    @overload
    def get_overwrite_existing_columns(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_overwrite_existing_columns(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_overwrite_existing_columns(selfi: int) -> bool: ...
    @overload
    def upd_overwrite_existing_columns(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TabOpConvertDegreesToRadians:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TabOpLowPassFilter:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfcutoffFrequency: float) -> None: ...
    @overload
    def __init__(selfcutoffFrequency: float, trimToOriginalTimeRange: bool) -> None: ...
    def append_cutoff_frequency(selfvalue: Any) -> int: ...
    def append_trim_to_original_time_range(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_cutoff_frequency(self, *args, **kwargs) -> Any: ...
    def constructProperty_trim_to_original_time_range(self, *args, **kwargs) -> Any: ...
    def copyProperty_cutoff_frequency(self, *args, **kwargs) -> Any: ...
    def copyProperty_trim_to_original_time_range(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_cutoff_frequency(selfi: int) -> Any: ...
    @overload
    def get_cutoff_frequency(self) -> Any: ...
    def get_trim_to_original_time_range(selfi: int) -> Any: ...
    @overload
    def get_trim_to_original_time_range(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_cutoff_frequency(self, *args, **kwargs) -> Any: ...
    def set_trim_to_original_time_range(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_cutoff_frequency(selfi: int) -> float: ...
    @overload
    def upd_cutoff_frequency(self) -> Any: ...
    def upd_trim_to_original_time_range(selfi: int) -> bool: ...
    @overload
    def upd_trim_to_original_time_range(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TabOpUseAbsoluteStateNames:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableOperator:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableProcessor:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selftable: TimeSeriesTable) -> None: ...
    @overload
    def __init__(selffilepath: str) -> None: ...
    def append(selfop: TableOperator) -> Any: ...
    @overload
    def append(selftraj: TableProcessor) -> Any: ...
    def append_filepath(selfvalue: str) -> int: ...
    def append_operators(selfvalue: TableOperator) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_filepath(self, *args, **kwargs) -> Any: ...
    def constructProperty_operators(self, *args, **kwargs) -> Any: ...
    def copyProperty_filepath(self, *args, **kwargs) -> Any: ...
    def copyProperty_operators(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def empty(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_filepath(selfi: int) -> Any: ...
    @overload
    def get_filepath(self) -> str: ...
    def get_operators(selfi: int) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def process(selfrelativeToDirectory: str, model: Model) -> Any: ...
    @overload
    def process(selfmodel: Model) -> Any: ...
    def processAndConvertToRadians(selfrelativeToDirectory: str, model: Model) -> Any: ...
    @overload
    def processAndConvertToRadians(selfmodel: Model) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_filepath(self, *args, **kwargs) -> Any: ...
    def set_operators(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_filepath(selfi: int) -> str: ...
    @overload
    def upd_filepath(self) -> Any: ...
    def upd_operators(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TendonForceLengthCurve:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfstrainAtOneNormForce: float, stiffnessAtOneNormForce: float, normForceAtToeEnd: float, curviness: float) -> None: ...
    @overload
    def __init__(selfstrainAtOneNormForce: float) -> None: ...
    def append_curviness(selfvalue: Any) -> int: ...
    def append_norm_force_at_toe_end(selfvalue: Any) -> int: ...
    def append_stiffness_at_one_norm_force(selfvalue: Any) -> int: ...
    def append_strain_at_one_norm_force(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(selfaNormLength: float, order: int) -> float: ...
    @overload
    def calcDerivative(selfderivComponents: Any, x: Any) -> float: ...
    def calcIntegral(selfaNormLength: float) -> float: ...
    def calcValue(selfx: Any) -> float: ...
    @overload
    def calcValue(selfaNormLength: float) -> float: ...
    def calcValueAndDerivative(selfaNormLength: float) -> SmoothSegmentedFunction: ...
    def clone(self) -> Any: ...
    def constructProperty_curviness(self, *args, **kwargs) -> Any: ...
    def constructProperty_norm_force_at_toe_end(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_curviness(self, *args, **kwargs) -> Any: ...
    def copyProperty_norm_force_at_toe_end(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def ensureCurveUpToDate(self, *args, **kwargs) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCurveDomain(self) -> Any: ...
    def getCurvinessInUse(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNormForceAtToeEndInUse(self) -> float: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStiffnessAtOneNormForceInUse(self) -> float: ...
    def getStrainAtOneNormForce(self) -> float: ...
    def get_curviness(selfi: int) -> Any: ...
    @overload
    def get_curviness(self) -> Any: ...
    def get_norm_force_at_toe_end(selfi: int) -> Any: ...
    @overload
    def get_norm_force_at_toe_end(self) -> Any: ...
    def get_stiffness_at_one_norm_force(selfi: int) -> Any: ...
    @overload
    def get_stiffness_at_one_norm_force(self) -> Any: ...
    def get_strain_at_one_norm_force(selfi: int) -> Any: ...
    @overload
    def get_strain_at_one_norm_force(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isFittedCurveBeingUsed(self) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(selfaFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptionalProperties(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStrainAtOneNormForce(self, *args, **kwargs) -> Any: ...
    def set_curviness(self, *args, **kwargs) -> Any: ...
    def set_norm_force_at_toe_end(self, *args, **kwargs) -> Any: ...
    def set_stiffness_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def set_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_curviness(selfi: int) -> float: ...
    @overload
    def upd_curviness(self) -> Any: ...
    def upd_norm_force_at_toe_end(selfi: int) -> float: ...
    @overload
    def upd_norm_force_at_toe_end(self) -> Any: ...
    def upd_stiffness_at_one_norm_force(selfi: int) -> float: ...
    @overload
    def upd_stiffness_at_one_norm_force(self) -> Any: ...
    def upd_strain_at_one_norm_force(selfi: int) -> float: ...
    @overload
    def upd_strain_at_one_norm_force(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Thelen2003Muscle:
    FiberActiveForceLength: Any
    FiberForceVelocity: Any
    FiberPassiveForceLength: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    TendonForceLength: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selfaName: str, aMaxIsometricForce: float, aOptimalFiberLength: float, aTendonSlackLength: float, aPennationAngle: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Af(selfvalue: Any) -> int: ...
    def append_Flen(selfvalue: Any) -> int: ...
    def append_FmaxMuscleStrain(selfvalue: Any) -> int: ...
    def append_FmaxTendonStrain(selfvalue: Any) -> int: ...
    def append_KshapeActive(selfvalue: Any) -> int: ...
    def append_KshapePassive(selfvalue: Any) -> int: ...
    def append_activation_time_constant(selfvalue: Any) -> int: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_deactivation_time_constant(selfvalue: Any) -> int: ...
    def append_default_activation(selfvalue: Any) -> int: ...
    def append_default_fiber_length(selfvalue: Any) -> int: ...
    def append_fv_linear_extrap_threshold(selfvalue: Any) -> int: ...
    def append_ignore_activation_dynamics(selfvalue: Any) -> int: ...
    def append_ignore_tendon_compliance(selfvalue: Any) -> int: ...
    def append_max_contraction_velocity(selfvalue: Any) -> int: ...
    def append_max_control(selfvalue: Any) -> int: ...
    def append_max_isometric_force(selfvalue: Any) -> int: ...
    def append_maximum_pennation_angle(selfvalue: Any) -> int: ...
    def append_min_control(selfvalue: Any) -> int: ...
    def append_minimum_activation(selfvalue: Any) -> int: ...
    def append_optimal_fiber_length(selfvalue: Any) -> int: ...
    def append_optimal_force(selfvalue: Any) -> int: ...
    def append_path(selfvalue: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(selfvalue: Any) -> int: ...
    def append_tendon_slack_length(selfvalue: Any) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcActiveFiberForceAlongTendon(selfactivation: float, fiberLength: float, fiberVelocity: float) -> float: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeInitialFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Af(self, *args, **kwargs) -> Any: ...
    def constructProperty_Flen(self, *args, **kwargs) -> Any: ...
    def constructProperty_FmaxMuscleStrain(self, *args, **kwargs) -> Any: ...
    def constructProperty_FmaxTendonStrain(self, *args, **kwargs) -> Any: ...
    def constructProperty_KshapeActive(self, *args, **kwargs) -> Any: ...
    def constructProperty_KshapePassive(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_fv_linear_extrap_threshold(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_minimum_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_Af(self, *args, **kwargs) -> Any: ...
    def copyProperty_Flen(self, *args, **kwargs) -> Any: ...
    def copyProperty_FmaxMuscleStrain(self, *args, **kwargs) -> Any: ...
    def copyProperty_FmaxTendonStrain(self, *args, **kwargs) -> Any: ...
    def copyProperty_KshapeActive(self, *args, **kwargs) -> Any: ...
    def copyProperty_KshapePassive(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_fv_linear_extrap_threshold(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_minimum_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActivationModel(self) -> Any: ...
    def getActivationRate(selfs: State) -> float: ...
    def getActivationTimeConstant(self) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDeactivationTimeConstant(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultActivation(self) -> float: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultFiberLength(self) -> float: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMaximumPennationAngle(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getMinimumActivation(self) -> float: ...
    def getMinimumFiberLength(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPennationModel(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def get_Af(selfi: int) -> Any: ...
    @overload
    def get_Af(self) -> Any: ...
    def get_Flen(selfi: int) -> Any: ...
    @overload
    def get_Flen(self) -> Any: ...
    def get_FmaxMuscleStrain(selfi: int) -> Any: ...
    @overload
    def get_FmaxMuscleStrain(self) -> Any: ...
    def get_FmaxTendonStrain(selfi: int) -> Any: ...
    @overload
    def get_FmaxTendonStrain(self) -> Any: ...
    def get_KshapeActive(selfi: int) -> Any: ...
    @overload
    def get_KshapeActive(self) -> Any: ...
    def get_KshapePassive(selfi: int) -> Any: ...
    @overload
    def get_KshapePassive(self) -> Any: ...
    def get_activation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_deactivation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_deactivation_time_constant(self) -> Any: ...
    def get_default_activation(selfi: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_default_fiber_length(self) -> Any: ...
    def get_fv_linear_extrap_threshold(selfi: int) -> Any: ...
    @overload
    def get_fv_linear_extrap_threshold(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_maximum_pennation_angle(selfi: int) -> Any: ...
    @overload
    def get_maximum_pennation_angle(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_minimum_activation(selfi: int) -> Any: ...
    @overload
    def get_minimum_activation(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActivationTimeConstant(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDeactivationTimeConstant(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultActivation(self, *args, **kwargs) -> Any: ...
    def setDefaultFiberLength(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setFiberLength(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMaximumPennationAngle(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setMinimumActivation(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_Af(self, *args, **kwargs) -> Any: ...
    def set_Flen(self, *args, **kwargs) -> Any: ...
    def set_FmaxMuscleStrain(self, *args, **kwargs) -> Any: ...
    def set_FmaxTendonStrain(self, *args, **kwargs) -> Any: ...
    def set_KshapeActive(self, *args, **kwargs) -> Any: ...
    def set_KshapePassive(self, *args, **kwargs) -> Any: ...
    def set_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_default_activation(self, *args, **kwargs) -> Any: ...
    def set_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_fv_linear_extrap_threshold(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_maximum_pennation_angle(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_minimum_activation(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Af(selfi: int) -> float: ...
    @overload
    def upd_Af(self) -> Any: ...
    def upd_Flen(selfi: int) -> float: ...
    @overload
    def upd_Flen(self) -> Any: ...
    def upd_FmaxMuscleStrain(selfi: int) -> float: ...
    @overload
    def upd_FmaxMuscleStrain(self) -> Any: ...
    def upd_FmaxTendonStrain(selfi: int) -> float: ...
    @overload
    def upd_FmaxTendonStrain(self) -> Any: ...
    def upd_KshapeActive(selfi: int) -> float: ...
    @overload
    def upd_KshapeActive(self) -> Any: ...
    def upd_KshapePassive(selfi: int) -> float: ...
    @overload
    def upd_KshapePassive(self) -> Any: ...
    def upd_activation_time_constant(selfi: int) -> float: ...
    @overload
    def upd_activation_time_constant(self) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_deactivation_time_constant(selfi: int) -> float: ...
    @overload
    def upd_deactivation_time_constant(self) -> Any: ...
    def upd_default_activation(selfi: int) -> float: ...
    @overload
    def upd_default_activation(self) -> Any: ...
    def upd_default_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_default_fiber_length(self) -> Any: ...
    def upd_fv_linear_extrap_threshold(selfi: int) -> float: ...
    @overload
    def upd_fv_linear_extrap_threshold(self) -> Any: ...
    def upd_ignore_activation_dynamics(selfi: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_tendon_compliance(selfi: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_max_contraction_velocity(selfi: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(selfi: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(selfi: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_maximum_pennation_angle(selfi: int) -> float: ...
    @overload
    def upd_maximum_pennation_angle(self) -> Any: ...
    def upd_min_control(selfi: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_minimum_activation(selfi: int) -> float: ...
    @overload
    def upd_minimum_activation(self) -> Any: ...
    def upd_optimal_fiber_length(selfi: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(selfi: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(selfi: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(selfi: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_slack_length(selfi: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Thelen2003MuscleIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def appliesForce(selfs: State) -> bool: ...
    def calcActiveFiberForceAlongTendon(selfactivation: float, fiberLength: float, fiberVelocity: float) -> float: ...
    def calcInextensibleTendonActiveFiberForce(selfs: State, aActivation: float) -> float: ...
    def clone(self) -> Any: ...
    def computeActuation(selfs: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeInitialFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(selfs: State, aCoord: Coordinate) -> float: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(selfother: ComponentListIterator) -> bool: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(selfs: State) -> float: ...
    def getActivationModel(self) -> Any: ...
    def getActivationRate(selfs: State) -> float: ...
    def getActivationTimeConstant(self) -> float: ...
    def getActiveFiberForce(selfs: State) -> float: ...
    def getActiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getActiveForceLengthMultiplier(selfs: State) -> float: ...
    def getActuation(selfs: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getControl(selfs: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(selfs: State) -> float: ...
    def getDeactivationTimeConstant(self) -> float: ...
    def getDefaultActivation(self) -> float: ...
    def getDefaultFiberLength(self) -> float: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(selfs: State) -> float: ...
    def getFiberActivePower(selfs: State) -> float: ...
    def getFiberForce(selfs: State) -> float: ...
    def getFiberForceAlongTendon(selfs: State) -> float: ...
    def getFiberLength(selfs: State) -> float: ...
    def getFiberLengthAlongTendon(selfs: State) -> float: ...
    def getFiberPassivePower(selfs: State) -> float: ...
    def getFiberPotentialEnergy(selfs: State) -> float: ...
    def getFiberStiffness(selfs: State) -> float: ...
    def getFiberStiffnessAlongTendon(selfs: State) -> float: ...
    def getFiberVelocity(selfs: State) -> float: ...
    def getFiberVelocityAlongTendon(selfs: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(selfs: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(selfs: State) -> bool: ...
    def getIgnoreTendonCompliance(selfs: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(selfs: State) -> float: ...
    def getLengtheningSpeed(selfs: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMaximumPennationAngle(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getMinimumActivation(self) -> float: ...
    def getMinimumFiberLength(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(selfs: State) -> float: ...
    def getMusclePower(selfs: State) -> float: ...
    def getMuscleStiffness(selfs: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(selfs: State) -> float: ...
    def getNormalizedFiberVelocity(selfs: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(selfs: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(selfs: State) -> float: ...
    def getPassiveFiberForceAlongTendon(selfs: State) -> float: ...
    def getPassiveForceMultiplier(selfs: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(selfs: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(selfs: State) -> float: ...
    def getPennationModel(self) -> Any: ...
    def getPower(selfs: State) -> float: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(selfs: State) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getStress(selfs: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(selfs: State) -> float: ...
    def getTendonLength(selfs: State) -> float: ...
    def getTendonPotentialEnergy(selfs: State) -> float: ...
    def getTendonPower(selfs: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(selfs: State) -> float: ...
    def getTendonStrain(selfs: State) -> float: ...
    def getTendonVelocity(selfs: State) -> float: ...
    def get_Af(selfi: int) -> Any: ...
    @overload
    def get_Af(self) -> Any: ...
    def get_Flen(selfi: int) -> Any: ...
    @overload
    def get_Flen(self) -> Any: ...
    def get_FmaxMuscleStrain(selfi: int) -> Any: ...
    @overload
    def get_FmaxMuscleStrain(self) -> Any: ...
    def get_FmaxTendonStrain(selfi: int) -> Any: ...
    @overload
    def get_FmaxTendonStrain(self) -> Any: ...
    def get_KshapeActive(selfi: int) -> Any: ...
    @overload
    def get_KshapeActive(self) -> Any: ...
    def get_KshapePassive(selfi: int) -> Any: ...
    @overload
    def get_KshapePassive(self) -> Any: ...
    def get_activation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_deactivation_time_constant(selfi: int) -> Any: ...
    @overload
    def get_deactivation_time_constant(self) -> Any: ...
    def get_default_activation(selfi: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_default_fiber_length(self) -> Any: ...
    def get_fv_linear_extrap_threshold(selfi: int) -> Any: ...
    @overload
    def get_fv_linear_extrap_threshold(self) -> Any: ...
    def get_ignore_activation_dynamics(selfi: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(selfi: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(selfi: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(selfi: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(selfi: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_maximum_pennation_angle(selfi: int) -> Any: ...
    @overload
    def get_maximum_pennation_angle(self) -> Any: ...
    def get_min_control(selfi: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_minimum_activation(selfi: int) -> Any: ...
    @overload
    def get_minimum_activation(self) -> Any: ...
    def get_optimal_fiber_length(selfi: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(selfi: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(selfi: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(selfi: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(selfi: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isActuationOverridden(selfs: State) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setFiberLength(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Thelen2003MuscleList:
    def __init__(selfroot: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(selfroot: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class Torus:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_transform: Any
    PropertyIndex_socket_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfringRadius: Any, crossSectionRadius: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_cross_section(selfvalue: Any) -> int: ...
    def append_ring_radius(selfvalue: Any) -> int: ...
    def append_scale_factors(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_transform(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_cross_section(self, *args, **kwargs) -> Any: ...
    def constructProperty_ring_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def constructSocket_frame(self) -> PropertyIndex: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_cross_section(self, *args, **kwargs) -> Any: ...
    def copyProperty_ring_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_scale_factors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getColor(self) -> Any: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOpacity(self) -> float: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRepresentation(self) -> VisualRepresentation: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_cross_section(selfi: int) -> Any: ...
    @overload
    def get_cross_section(self) -> Any: ...
    def get_ring_radius(selfi: int) -> Any: ...
    @overload
    def get_ring_radius(self) -> Any: ...
    def get_scale_factors(selfi: int) -> Any: ...
    @overload
    def get_scale_factors(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setColor(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOpacity(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRepresentation(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_cross_section(self, *args, **kwargs) -> Any: ...
    def set_ring_radius(self, *args, **kwargs) -> Any: ...
    def set_scale_factors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_cross_section(selfi: int) -> float: ...
    @overload
    def upd_cross_section(self) -> Any: ...
    def upd_ring_radius(selfi: int) -> float: ...
    @overload
    def upd_ring_radius(self) -> Any: ...
    def upd_scale_factors(selfi: int) -> Any: ...
    @overload
    def upd_scale_factors(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TransformAxis:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfcoordNames: Array, axis: Vec3) -> None: ...
    @overload
    def __init__(selfnode: Xml) -> None: ...
    def append_axis(selfvalue: Vec3) -> int: ...
    def append_coordinates(selfvalue: str) -> int: ...
    def append_function(selfvalue: Function) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToJoint(self, *args, **kwargs) -> Any: ...
    def constructProperty_axis(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_function(self, *args, **kwargs) -> Any: ...
    def copyProperty_axis(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_function(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getAxis(selfaxis: Vec3) -> Any: ...
    @overload
    def getAxis(selfwhich: int) -> float: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getCoordinateNames(self) -> Any: ...
    def getCoordinateNamesInArray(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFunction(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getJoint(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValue(selfs: State) -> float: ...
    def get_axis(selfi: int) -> Any: ...
    @overload
    def get_axis(self) -> Any: ...
    def get_coordinates(selfi: int) -> str: ...
    def get_function(selfi: int) -> Any: ...
    @overload
    def get_function(self) -> Any: ...
    def hasFunction(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setAxis(self, *args, **kwargs) -> Any: ...
    def setCoordinateNames(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setFunction(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_axis(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_function(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updFunction(self) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_axis(selfi: int) -> Any: ...
    @overload
    def upd_axis(self) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_function(selfi: int) -> Any: ...
    @overload
    def upd_function(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TwoFrameLinkerConstraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_frames(selfi: int) -> Any: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TwoFrameLinkerForce:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TwoFrameLinkerForceProducer:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(selfvalue: Any) -> int: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def appliesForce(selfs: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(selfi: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_appliesForce(selfi: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Umberger2010MuscleMetabolicsProbe:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfactivation_maintenance_rate_on: Any, shortening_rate_on: Any, basal_rate_on: Any, work_rate_on: Any) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addMuscle(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(selfvalue: Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet) -> int: ...
    def append_activation_maintenance_rate_on(selfvalue: Any) -> int: ...
    def append_aerobic_factor(selfvalue: Any) -> int: ...
    def append_basal_coefficient(selfvalue: Any) -> int: ...
    def append_basal_exponent(selfvalue: Any) -> int: ...
    def append_basal_rate_on(selfvalue: Any) -> int: ...
    def append_enabled(selfvalue: Any) -> int: ...
    def append_enforce_minimum_heat_rate_per_muscle(selfvalue: Any) -> int: ...
    def append_forbid_negative_total_power(selfvalue: Any) -> int: ...
    def append_gain(selfvalue: Any) -> int: ...
    def append_include_negative_mechanical_work(selfvalue: Any) -> int: ...
    def append_initial_conditions_for_integration(selfvalue: Any) -> int: ...
    def append_mechanical_work_rate_on(selfvalue: Any) -> int: ...
    def append_muscle_effort_scaling_factor(selfvalue: Any) -> int: ...
    def append_probe_operation(selfvalue: str) -> int: ...
    def append_report_total_metabolics_only(selfvalue: Any) -> int: ...
    def append_shortening_rate_on(selfvalue: Any) -> int: ...
    def append_use_Bhargava_recruitment_model(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeProbeInputs(selfstate: State) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_maintenance_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_aerobic_factor(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_exponent(self, *args, **kwargs) -> Any: ...
    def constructProperty_basal_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_enabled(self, *args, **kwargs) -> Any: ...
    def constructProperty_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def constructProperty_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def constructProperty_gain(self, *args, **kwargs) -> Any: ...
    def constructProperty_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def constructProperty_mechanical_work_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def constructProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_total_metabolics_only(self, *args, **kwargs) -> Any: ...
    def constructProperty_shortening_rate_on(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_Bhargava_recruitment_model(self, *args, **kwargs) -> Any: ...
    def copyProperty_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_maintenance_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_aerobic_factor(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_exponent(self, *args, **kwargs) -> Any: ...
    def copyProperty_basal_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_enabled(self, *args, **kwargs) -> Any: ...
    def copyProperty_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def copyProperty_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def copyProperty_gain(self, *args, **kwargs) -> Any: ...
    def copyProperty_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def copyProperty_mechanical_work_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def copyProperty_probe_operation(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_total_metabolics_only(self, *args, **kwargs) -> Any: ...
    def copyProperty_shortening_rate_on(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_Bhargava_recruitment_model(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDensity(selfmuscleName: str) -> float: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGain(self) -> float: ...
    def getInitialConditions(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMuscleMass(selfmuscleName: str) -> float: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumInternalMeasureStates(self) -> int: ...
    def getNumMetabolicMuscles(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProbeInputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOperation(self) -> str: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getProbeOutputLabels(self) -> Any: ...
    def getProbeOutputs(selfstate: State) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRatioSlowTwitchFibers(selfmuscleName: str) -> float: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpecificTension(selfmuscleName: str) -> float: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(selfi: int) -> Any: ...
    @overload
    def get_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self) -> Any: ...
    def get_activation_maintenance_rate_on(selfi: int) -> Any: ...
    @overload
    def get_activation_maintenance_rate_on(self) -> Any: ...
    def get_aerobic_factor(selfi: int) -> Any: ...
    @overload
    def get_aerobic_factor(self) -> Any: ...
    def get_basal_coefficient(selfi: int) -> Any: ...
    @overload
    def get_basal_coefficient(self) -> Any: ...
    def get_basal_exponent(selfi: int) -> Any: ...
    @overload
    def get_basal_exponent(self) -> Any: ...
    def get_basal_rate_on(selfi: int) -> Any: ...
    @overload
    def get_basal_rate_on(self) -> Any: ...
    def get_enabled(selfi: int) -> Any: ...
    @overload
    def get_enabled(self) -> Any: ...
    def get_enforce_minimum_heat_rate_per_muscle(selfi: int) -> Any: ...
    @overload
    def get_enforce_minimum_heat_rate_per_muscle(self) -> Any: ...
    def get_forbid_negative_total_power(selfi: int) -> Any: ...
    @overload
    def get_forbid_negative_total_power(self) -> Any: ...
    def get_gain(selfi: int) -> Any: ...
    @overload
    def get_gain(self) -> Any: ...
    def get_include_negative_mechanical_work(selfi: int) -> Any: ...
    @overload
    def get_include_negative_mechanical_work(self) -> Any: ...
    def get_initial_conditions_for_integration(selfi: int) -> Any: ...
    def get_mechanical_work_rate_on(selfi: int) -> Any: ...
    @overload
    def get_mechanical_work_rate_on(self) -> Any: ...
    def get_muscle_effort_scaling_factor(selfi: int) -> Any: ...
    @overload
    def get_muscle_effort_scaling_factor(self) -> Any: ...
    def get_probe_operation(selfi: int) -> Any: ...
    @overload
    def get_probe_operation(self) -> str: ...
    def get_report_total_metabolics_only(selfi: int) -> Any: ...
    @overload
    def get_report_total_metabolics_only(self) -> Any: ...
    def get_shortening_rate_on(selfi: int) -> Any: ...
    @overload
    def get_shortening_rate_on(self) -> Any: ...
    def get_use_Bhargava_recruitment_model(selfi: int) -> Any: ...
    @overload
    def get_use_Bhargava_recruitment_model(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isUsingProvidedMass(selfmuscleName: str) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def removeMuscle(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def reset(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDensity(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setEnabled(self, *args, **kwargs) -> Any: ...
    def setGain(self, *args, **kwargs) -> Any: ...
    def setInitialConditions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOperation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setRatioSlowTwitchFibers(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSpecificTension(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self, *args, **kwargs) -> Any: ...
    def set_activation_maintenance_rate_on(self, *args, **kwargs) -> Any: ...
    def set_aerobic_factor(self, *args, **kwargs) -> Any: ...
    def set_basal_coefficient(self, *args, **kwargs) -> Any: ...
    def set_basal_exponent(self, *args, **kwargs) -> Any: ...
    def set_basal_rate_on(self, *args, **kwargs) -> Any: ...
    def set_enabled(self, *args, **kwargs) -> Any: ...
    def set_enforce_minimum_heat_rate_per_muscle(self, *args, **kwargs) -> Any: ...
    def set_forbid_negative_total_power(self, *args, **kwargs) -> Any: ...
    def set_gain(self, *args, **kwargs) -> Any: ...
    def set_include_negative_mechanical_work(self, *args, **kwargs) -> Any: ...
    def set_initial_conditions_for_integration(self, *args, **kwargs) -> Any: ...
    def set_mechanical_work_rate_on(self, *args, **kwargs) -> Any: ...
    def set_muscle_effort_scaling_factor(self, *args, **kwargs) -> Any: ...
    def set_probe_operation(self, *args, **kwargs) -> Any: ...
    def set_report_total_metabolics_only(self, *args, **kwargs) -> Any: ...
    def set_shortening_rate_on(self, *args, **kwargs) -> Any: ...
    def set_use_Bhargava_recruitment_model(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(selfi: int) -> Any: ...
    @overload
    def upd_Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet(self) -> Any: ...
    def upd_activation_maintenance_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_activation_maintenance_rate_on(self) -> Any: ...
    def upd_aerobic_factor(selfi: int) -> float: ...
    @overload
    def upd_aerobic_factor(self) -> Any: ...
    def upd_basal_coefficient(selfi: int) -> float: ...
    @overload
    def upd_basal_coefficient(self) -> Any: ...
    def upd_basal_exponent(selfi: int) -> float: ...
    @overload
    def upd_basal_exponent(self) -> Any: ...
    def upd_basal_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_basal_rate_on(self) -> Any: ...
    def upd_enabled(selfi: int) -> bool: ...
    @overload
    def upd_enabled(self) -> Any: ...
    def upd_enforce_minimum_heat_rate_per_muscle(selfi: int) -> bool: ...
    @overload
    def upd_enforce_minimum_heat_rate_per_muscle(self) -> Any: ...
    def upd_forbid_negative_total_power(selfi: int) -> bool: ...
    @overload
    def upd_forbid_negative_total_power(self) -> Any: ...
    def upd_gain(selfi: int) -> float: ...
    @overload
    def upd_gain(self) -> Any: ...
    def upd_include_negative_mechanical_work(selfi: int) -> bool: ...
    @overload
    def upd_include_negative_mechanical_work(self) -> Any: ...
    def upd_initial_conditions_for_integration(selfi: int) -> Any: ...
    def upd_mechanical_work_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_mechanical_work_rate_on(self) -> Any: ...
    def upd_muscle_effort_scaling_factor(selfi: int) -> float: ...
    @overload
    def upd_muscle_effort_scaling_factor(self) -> Any: ...
    def upd_probe_operation(selfi: int) -> str: ...
    @overload
    def upd_probe_operation(self) -> Any: ...
    def upd_report_total_metabolics_only(selfi: int) -> bool: ...
    @overload
    def upd_report_total_metabolics_only(self) -> Any: ...
    def upd_shortening_rate_on(selfi: int) -> bool: ...
    @overload
    def upd_shortening_rate_on(self) -> Any: ...
    def upd_use_Bhargava_recruitment_model(selfi: int) -> bool: ...
    @overload
    def upd_use_Bhargava_recruitment_model(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def useCalculatedMass(self, *args, **kwargs) -> Any: ...
    def useProvidedMass(self, *args, **kwargs) -> Any: ...

class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameter:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfmuscleName: str, ratio_slow_twitch_fibers: float, muscle_mass: float) -> None: ...
    def append_density(selfvalue: Any) -> int: ...
    def append_provided_muscle_mass(selfvalue: Any) -> int: ...
    def append_ratio_slow_twitch_fibers(selfvalue: Any) -> int: ...
    def append_specific_tension(selfvalue: Any) -> int: ...
    def append_use_provided_muscle_mass(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_density(self, *args, **kwargs) -> Any: ...
    def constructProperty_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def constructProperty_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def constructProperty_specific_tension(self, *args, **kwargs) -> Any: ...
    def constructProperty_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_density(self, *args, **kwargs) -> Any: ...
    def copyProperty_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def copyProperty_specific_tension(self, *args, **kwargs) -> Any: ...
    def copyProperty_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMuscle(self) -> Any: ...
    def getMuscleMass(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_density(selfi: int) -> Any: ...
    @overload
    def get_density(self) -> Any: ...
    def get_provided_muscle_mass(selfi: int) -> Any: ...
    @overload
    def get_provided_muscle_mass(self) -> Any: ...
    def get_ratio_slow_twitch_fibers(selfi: int) -> Any: ...
    @overload
    def get_ratio_slow_twitch_fibers(self) -> Any: ...
    def get_specific_tension(selfi: int) -> Any: ...
    @overload
    def get_specific_tension(self) -> Any: ...
    def get_use_provided_muscle_mass(selfi: int) -> Any: ...
    @overload
    def get_use_provided_muscle_mass(self) -> Any: ...
    def hasProperty(selfname: str) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMuscle(self, *args, **kwargs) -> Any: ...
    def setMuscleMass(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_density(self, *args, **kwargs) -> Any: ...
    def set_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    def set_ratio_slow_twitch_fibers(self, *args, **kwargs) -> Any: ...
    def set_specific_tension(self, *args, **kwargs) -> Any: ...
    def set_use_provided_muscle_mass(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def upd_density(selfi: int) -> float: ...
    @overload
    def upd_density(self) -> Any: ...
    def upd_provided_muscle_mass(selfi: int) -> float: ...
    @overload
    def upd_provided_muscle_mass(self) -> Any: ...
    def upd_ratio_slow_twitch_fibers(selfi: int) -> float: ...
    @overload
    def upd_ratio_slow_twitch_fibers(self) -> Any: ...
    def upd_specific_tension(selfi: int) -> float: ...
    @overload
    def upd_specific_tension(self) -> Any: ...
    def upd_use_provided_muscle_mass(selfi: int) -> bool: ...
    @overload
    def upd_use_provided_muscle_mass(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Umberger2010MuscleMetabolicsProbe_MetabolicMuscleParameterSet:
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    thisown: Any

class UniversalJoint:
    Coord_Rotation1X: Any
    Coord_Rotation2Y: Any
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    @overload
    def getCoordinate(selfidx: UniversalJoint) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    @overload
    def updCoordinate(selfidx: UniversalJoint) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class UnsupportedFileType:
    def __init__(selffile: str, line: Any, func: str, filename: str, msg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class VisualizerUtilities:
    def __init__(self) -> None: ...
    def showMarkerData(self, *args, **kwargs) -> Any: ...
    def showModel(self, *args, **kwargs) -> Any: ...
    def showMotion(self, *args, **kwargs) -> Any: ...
    def showOrientationData(self, *args, **kwargs) -> Any: ...
    thisown: Any

class WeldConstraint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_frame1: Any
    PropertyIndex_socket_frame2: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, frame1Name: str, frame2Name: str) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, locationInFrame1: Vec3, orientationInFrame1: Vec3, frame2: PhysicalFrame, locationInFrame2: Vec3, orientationInFrame2: Vec3) -> None: ...
    @overload
    def __init__(selfname: str, frame1: PhysicalFrame, transformInFrame1: Transform, frame2: PhysicalFrame, transformInFrame2: Transform) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_frames(selfvalue: PhysicalFrame) -> int: ...
    def append_isEnforced(selfvalue: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcConstraintForces(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeDeflection(selfs: State) -> Any: ...
    def computeDeflectionRate(selfs: State) -> Any: ...
    def computeRelativeOffset(selfs: State) -> Any: ...
    def computeRelativeVelocity(selfs: State) -> Any: ...
    def connectSocket_frame1(self, *args, **kwargs) -> Any: ...
    def connectSocket_frame2(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_isEnforced(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame1(self) -> Any: ...
    def getFrame2(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(selfstate: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_frames(selfi: int) -> Any: ...
    def get_isEnforced(selfi: int) -> Any: ...
    @overload
    def get_isEnforced(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEnforced(selfs: State) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setContactPointForInducedAccelerations(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIsEnforced(selfs: State, isEnforced: bool) -> bool: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    def set_isEnforced(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def upd_isEnforced(selfi: int) -> bool: ...
    @overload
    def upd_isEnforced(self) -> Any: ...
    def updateFromConstraint(self, *args, **kwargs) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class WeldJoint:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_child_frame: Any
    PropertyIndex_socket_parent_frame: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, child: PhysicalFrame) -> None: ...
    @overload
    def __init__(selfname: str, parent: PhysicalFrame, locationInParent: Vec3, orientationInParent: Vec3, child: PhysicalFrame, locationInChild: Vec3, orientationInChild: Vec3) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addFrame(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_coordinates(selfvalue: Coordinate) -> int: ...
    def append_frames(selfvalue: PhysicalOffsetFrame) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcEquivalentSpatialForce(selfstate: State, mobilityForces: Any) -> Any: ...
    def calcPower(selfs: State) -> float: ...
    def calcReactionOnChildExpressedInGround(selfstate: State) -> Any: ...
    def calcReactionOnParentExpressedInGround(selfstate: State) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectSocket_child_frame(self, *args, **kwargs) -> Any: ...
    def connectSocket_parent_frame(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def constructProperty_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinates(self, *args, **kwargs) -> Any: ...
    def copyProperty_frames(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getChildFrame(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getCoordinate(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getParentFrame(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_coordinates(selfi: int) -> Any: ...
    def get_frames(selfi: int) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isCoordinateUsed(selfaCoordinate: Coordinate) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def numCoordinates(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_coordinates(self, *args, **kwargs) -> Any: ...
    def set_frames(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updCoordinate(self) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_coordinates(selfi: int) -> Any: ...
    def upd_frames(selfi: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class WrapCylinder:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    allQuadrants: Any
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_active(selfvalue: Any) -> int: ...
    def append_length(selfvalue: Any) -> int: ...
    def append_quadrant(selfvalue: str) -> int: ...
    def append_radius(selfvalue: Any) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def append_xyz_body_rotation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def connectToModelAndBody(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_active(self, *args, **kwargs) -> Any: ...
    def constructProperty_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def constructProperty_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def constructProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_active(self, *args, **kwargs) -> Any: ...
    def copyProperty_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def copyProperty_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActiveUseDefault(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDimensionsString(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getQuadrantNameUseDefault(self) -> bool: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def getWrapTypeName(self) -> str: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_active(selfi: int) -> Any: ...
    @overload
    def get_active(self) -> Any: ...
    def get_length(selfi: int) -> Any: ...
    @overload
    def get_length(self) -> Any: ...
    def get_quadrant(selfi: int) -> Any: ...
    @overload
    def get_quadrant(self) -> str: ...
    def get_radius(selfi: int) -> Any: ...
    @overload
    def get_radius(self) -> Any: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def get_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def get_xyz_body_rotation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    insideRadius: Any
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    mandatoryWrap: Any
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    negativeX: Any
    negativeY: Any
    negativeZ: Any
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    noWrap: Any
    positiveX: Any
    positiveY: Any
    positiveZ: Any
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_active(self, *args, **kwargs) -> Any: ...
    def set_length(self, *args, **kwargs) -> Any: ...
    def set_quadrant(self, *args, **kwargs) -> Any: ...
    def set_radius(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    def set_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_active(selfi: int) -> bool: ...
    @overload
    def upd_active(self) -> Any: ...
    def upd_length(selfi: int) -> float: ...
    @overload
    def upd_length(self) -> Any: ...
    def upd_quadrant(selfi: int) -> str: ...
    @overload
    def upd_quadrant(self) -> Any: ...
    def upd_radius(selfi: int) -> float: ...
    @overload
    def upd_radius(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def upd_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def upd_xyz_body_rotation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def wrapPathSegment(selfstate: State, aPoint1: AbstractPathPoint, aPoint2: AbstractPathPoint, aPathWrap: PathWrap, aWrapResult: WrapResult) -> int: ...
    wrapped: Any

class WrapEllipsoid:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    allQuadrants: Any
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_active(selfvalue: Any) -> int: ...
    def append_dimensions(selfvalue: Vec3) -> int: ...
    def append_quadrant(selfvalue: str) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def append_xyz_body_rotation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def connectToModelAndBody(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_active(self, *args, **kwargs) -> Any: ...
    def constructProperty_dimensions(self, *args, **kwargs) -> Any: ...
    def constructProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def constructProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_active(self, *args, **kwargs) -> Any: ...
    def copyProperty_dimensions(self, *args, **kwargs) -> Any: ...
    def copyProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActiveUseDefault(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDimensionsString(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getQuadrantNameUseDefault(self) -> bool: ...
    def getRadii(self) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def getWrapTypeName(self) -> str: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_active(selfi: int) -> Any: ...
    @overload
    def get_active(self) -> Any: ...
    def get_dimensions(selfi: int) -> Any: ...
    @overload
    def get_dimensions(self) -> Any: ...
    def get_quadrant(selfi: int) -> Any: ...
    @overload
    def get_quadrant(self) -> str: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def get_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def get_xyz_body_rotation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    insideRadius: Any
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    mandatoryWrap: Any
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    negativeX: Any
    negativeY: Any
    negativeZ: Any
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    noWrap: Any
    positiveX: Any
    positiveY: Any
    positiveZ: Any
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_active(self, *args, **kwargs) -> Any: ...
    def set_dimensions(self, *args, **kwargs) -> Any: ...
    def set_quadrant(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    def set_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_active(selfi: int) -> bool: ...
    @overload
    def upd_active(self) -> Any: ...
    def upd_dimensions(selfi: int) -> Any: ...
    @overload
    def upd_dimensions(self) -> Any: ...
    def upd_quadrant(selfi: int) -> str: ...
    @overload
    def upd_quadrant(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def upd_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def upd_xyz_body_rotation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def wrapPathSegment(selfstate: State, aPoint1: AbstractPathPoint, aPoint2: AbstractPathPoint, aPathWrap: PathWrap, aWrapResult: WrapResult) -> int: ...
    wrapped: Any

class WrapObject:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    allQuadrants: Any
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_active(selfvalue: Any) -> int: ...
    def append_quadrant(selfvalue: str) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def append_xyz_body_rotation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def connectToModelAndBody(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_active(self, *args, **kwargs) -> Any: ...
    def constructProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def constructProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_active(self, *args, **kwargs) -> Any: ...
    def copyProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActiveUseDefault(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDimensionsString(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getQuadrantNameUseDefault(self) -> bool: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def getWrapTypeName(self) -> str: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_active(selfi: int) -> Any: ...
    @overload
    def get_active(self) -> Any: ...
    def get_quadrant(selfi: int) -> Any: ...
    @overload
    def get_quadrant(self) -> str: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def get_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def get_xyz_body_rotation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    insideRadius: Any
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    mandatoryWrap: Any
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    negativeX: Any
    negativeY: Any
    negativeZ: Any
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    noWrap: Any
    positiveX: Any
    positiveY: Any
    positiveZ: Any
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_active(self, *args, **kwargs) -> Any: ...
    def set_quadrant(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    def set_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_active(selfi: int) -> bool: ...
    @overload
    def upd_active(self) -> Any: ...
    def upd_quadrant(selfi: int) -> str: ...
    @overload
    def upd_quadrant(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def upd_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def upd_xyz_body_rotation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def wrapPathSegment(selfstate: State, aPoint1: AbstractPathPoint, aPoint2: AbstractPathPoint, aPathWrap: PathWrap, aWrapResult: WrapResult) -> int: ...
    wrapped: Any

class WrapObjectSet:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(selffile: str, updateFromXML: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(selfaObject: WrapObject) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(selfaObject: WrapObject) -> bool: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def contains(selfaName: str) -> bool: ...
    def dump(self) -> str: ...
    def extendFinalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def get(selfaIndex: int) -> Any: ...
    @overload
    def get(selfaName: str) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(selfaGroupName: str) -> Any: ...
    @overload
    def getGroup(selfaIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(selfaObject: WrapObject, aStartIndex: int) -> int: ...
    @overload
    def getIndex(selfaName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def insert(selfaIndex: int, aObject: WrapObject) -> bool: ...
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(selfaIndex: int) -> bool: ...
    @overload
    def remove(selfaObject: WrapObject) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def set(selfaIndex: int, aObject: WrapObject, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(selfaSize: int) -> bool: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class WrapSphere:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    allQuadrants: Any
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_active(selfvalue: Any) -> int: ...
    def append_quadrant(selfvalue: str) -> int: ...
    def append_radius(selfvalue: Any) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def append_xyz_body_rotation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def connectToModelAndBody(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_active(self, *args, **kwargs) -> Any: ...
    def constructProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def constructProperty_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def constructProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_active(self, *args, **kwargs) -> Any: ...
    def copyProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def copyProperty_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActiveUseDefault(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDimensionsString(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getQuadrantNameUseDefault(self) -> bool: ...
    def getRadius(self) -> float: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def getWrapTypeName(self) -> str: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_active(selfi: int) -> Any: ...
    @overload
    def get_active(self) -> Any: ...
    def get_quadrant(selfi: int) -> Any: ...
    @overload
    def get_quadrant(self) -> str: ...
    def get_radius(selfi: int) -> Any: ...
    @overload
    def get_radius(self) -> Any: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def get_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def get_xyz_body_rotation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    insideRadius: Any
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    mandatoryWrap: Any
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    negativeX: Any
    negativeY: Any
    negativeZ: Any
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    noWrap: Any
    positiveX: Any
    positiveY: Any
    positiveZ: Any
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_active(self, *args, **kwargs) -> Any: ...
    def set_quadrant(self, *args, **kwargs) -> Any: ...
    def set_radius(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    def set_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_active(selfi: int) -> bool: ...
    @overload
    def upd_active(self) -> Any: ...
    def upd_quadrant(selfi: int) -> str: ...
    @overload
    def upd_quadrant(self) -> Any: ...
    def upd_radius(selfi: int) -> float: ...
    @overload
    def upd_radius(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def upd_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def upd_xyz_body_rotation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def wrapPathSegment(selfstate: State, aPoint1: AbstractPathPoint, aPoint2: AbstractPathPoint, aPathWrap: PathWrap, aWrapResult: WrapResult) -> int: ...
    wrapped: Any

class WrapTorus:
    def PrintPropertyInfo(selfos: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(selfos: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(selfaObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    allQuadrants: Any
    def append_Appearance(selfvalue: Appearance) -> int: ...
    def append_active(selfvalue: Any) -> int: ...
    def append_inner_radius(selfvalue: Any) -> int: ...
    def append_outer_radius(selfvalue: Any) -> int: ...
    def append_quadrant(selfvalue: str) -> int: ...
    def append_translation(selfvalue: Vec3) -> int: ...
    def append_xyz_body_rotation(selfvalue: Vec3) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def connectToModelAndBody(self, *args, **kwargs) -> Any: ...
    def constructProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def constructProperty_active(self, *args, **kwargs) -> Any: ...
    def constructProperty_inner_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_outer_radius(self, *args, **kwargs) -> Any: ...
    def constructProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def constructProperty_translation(self, *args, **kwargs) -> Any: ...
    def constructProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def copyProperty_Appearance(self, *args, **kwargs) -> Any: ...
    def copyProperty_active(self, *args, **kwargs) -> Any: ...
    def copyProperty_inner_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_outer_radius(self, *args, **kwargs) -> Any: ...
    def copyProperty_quadrant(self, *args, **kwargs) -> Any: ...
    def copyProperty_translation(self, *args, **kwargs) -> Any: ...
    def copyProperty_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(selfpathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(selfpathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActiveUseDefault(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(selfname: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(selfpathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(selfname: str) -> Any: ...
    @overload
    def getConnectee(selfname: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(selfconcreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDimensionsString(self) -> str: ...
    def getDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(selfstate: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrame(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInnerRadius(self) -> Real: ...
    def getInput(selfname: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(selfstate: State, path: str) -> int: ...
    @overload
    def getModelingOption(selfstate: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOuterRadius(self) -> Real: ...
    def getOutput(selfname: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def getPropertyByName(selfname: str) -> Any: ...
    def getQuadrantNameUseDefault(self) -> bool: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(selfwrt: Component) -> Any: ...
    def getRelativePathString(selfwrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(selfname: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(selfstate: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(selfstate: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(selfstate: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTransform(self) -> Any: ...
    def getWrapTypeName(self) -> str: ...
    def get_Appearance(selfi: int) -> Any: ...
    @overload
    def get_Appearance(self) -> Any: ...
    def get_active(selfi: int) -> Any: ...
    @overload
    def get_active(self) -> Any: ...
    def get_inner_radius(selfi: int) -> Any: ...
    @overload
    def get_inner_radius(self) -> Any: ...
    def get_outer_radius(selfi: int) -> Any: ...
    @overload
    def get_outer_radius(self) -> Any: ...
    def get_quadrant(selfi: int) -> Any: ...
    @overload
    def get_quadrant(self) -> str: ...
    def get_translation(selfi: int) -> Any: ...
    @overload
    def get_translation(self) -> Any: ...
    def get_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def get_xyz_body_rotation(self) -> Any: ...
    def hasComponent(selfpathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(selfname: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    insideRadius: Any
    def isA(selftype: str) -> bool: ...
    def isCacheVariableValid(selfstate: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(selfcomponent: Component) -> bool: ...
    def isEqualTo(selfaObject: Object) -> bool: ...
    def isKindOf(selftype: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(selffileName: str) -> Any: ...
    mandatoryWrap: Any
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    negativeX: Any
    negativeY: Any
    negativeZ: Any
    def newInstanceOfType(selfconcreteClassName: str) -> Any: ...
    noWrap: Any
    positiveX: Any
    positiveY: Any
    positiveZ: Any
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(selfsubstring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(selffileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(selfpath: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(selfobj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setFrame(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_Appearance(self, *args, **kwargs) -> Any: ...
    def set_active(self, *args, **kwargs) -> Any: ...
    def set_inner_radius(self, *args, **kwargs) -> Any: ...
    def set_outer_radius(self, *args, **kwargs) -> Any: ...
    def set_quadrant(self, *args, **kwargs) -> Any: ...
    def set_translation(self, *args, **kwargs) -> Any: ...
    def set_xyz_body_rotation(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(selfname: str) -> Any: ...
    def tryGetSocket(selfname: str) -> Any: ...
    def tryUpdOutput(selfname: str) -> Any: ...
    def tryUpdSocket(selfname: str) -> Any: ...
    def updComponent(selfpathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(selfstate: State, path: str) -> AbstractValue: ...
    def updInput(selfname: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(selfname: str) -> Any: ...
    def updPropertyByIndex(selfpropertyIndex: int) -> Any: ...
    def updPropertyByName(selfname: str) -> Any: ...
    def updSocket(selfname: str) -> Any: ...
    def upd_Appearance(selfi: int) -> Any: ...
    @overload
    def upd_Appearance(self) -> Any: ...
    def upd_active(selfi: int) -> bool: ...
    @overload
    def upd_active(self) -> Any: ...
    def upd_inner_radius(selfi: int) -> float: ...
    @overload
    def upd_inner_radius(self) -> Any: ...
    def upd_outer_radius(selfi: int) -> float: ...
    @overload
    def upd_outer_radius(self) -> Any: ...
    def upd_quadrant(selfi: int) -> str: ...
    @overload
    def upd_quadrant(self) -> Any: ...
    def upd_translation(selfi: int) -> Any: ...
    @overload
    def upd_translation(self) -> Any: ...
    def upd_xyz_body_rotation(selfi: int) -> Any: ...
    @overload
    def upd_xyz_body_rotation(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...
    def wrapPathSegment(selfstate: State, aPoint1: AbstractPathPoint, aPoint2: AbstractPathPoint, aPathWrap: PathWrap, aWrapResult: WrapResult) -> int: ...
    wrapped: Any

