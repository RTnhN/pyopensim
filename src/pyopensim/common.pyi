from typing import Any, overload

class APDMDataReader:
    AngularVelocity: Any
    LinearAccelerations: Any
    MagneticHeading: Any
    Orientations: Any
    TimeLabel: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, settings: APDMDataReaderSettings) -> None: ...
    acceleration_labels: Any
    angular_velocity_labels: Any
    def clone(self) -> Any: ...
    def getAngularVelocityTable(self, tables: DataAdapter) -> Any: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def getLinearAccelerationsTable(self, tables: DataAdapter) -> Any: ...
    def getMagneticHeadingTable(self, tables: DataAdapter) -> Any: ...
    def getOrientationsTable(self, tables: DataAdapter) -> Any: ...
    magnetic_heading_labels: Any
    orientation_labels: Any
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    thisown: Any

class APDMDataReaderSettings:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, xmlFile: str) -> None: ...
    def append_ExperimentalSensors(self, value: ExperimentalSensor) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_ExperimentalSensors(self, *args, **kwargs) -> Any: ...
    def copyProperty_ExperimentalSensors(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_ExperimentalSensors(self, i: int) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_ExperimentalSensors(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_ExperimentalSensors(self, i: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AbstractChannel:
    def __init__(self, *args, **kwargs) -> Any: ...
    def getChannelName(self) -> str: ...
    def getName(self) -> str: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    thisown: Any

class AbstractDataTable:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    thisown: Any

class AbstractInput:
    def __init__(self, *args, **kwargs) -> Any: ...
    def appendConnecteePath(self, *args, **kwargs) -> Any: ...
    def assignConnecteePath(self, *args, **kwargs) -> Any: ...
    def canConnectTo(self, arg2: Object) -> bool: ...
    def clearConnecteePath(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def composeConnecteePath(self, componentPath: str, outputName: str, channelName: str, alias: str) -> str: ...
    def connect(self, *args, **kwargs) -> Any: ...
    def disconnect(self, *args, **kwargs) -> Any: ...
    def finalizeConnection(self, *args, **kwargs) -> Any: ...
    def findAndConnect(self, *args, **kwargs) -> Any: ...
    def getAlias(self) -> Any: ...
    @overload
    def getAlias(self, index: Any) -> str: ...
    def getConnectAtStage(self) -> Any: ...
    def getConnecteeAsObject(self, index: int) -> Any: ...
    def getConnecteePath(self, index: int) -> Any: ...
    def getConnecteeTypeName(self) -> str: ...
    def getLabel(self) -> str: ...
    @overload
    def getLabel(self, index: Any) -> str: ...
    def getName(self) -> str: ...
    def getNumConnectees(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def isConnected(self) -> bool: ...
    def isConnecteePathEmpty(self) -> bool: ...
    def isListSocket(self) -> bool: ...
    def parseConnecteePath(self, connecteePath: str, componentPath: Any, outputName: Any, channelName: Any, alias: Any) -> bool: ...
    def setAlias(self, *args, **kwargs) -> Any: ...
    def setConnecteePath(self, *args, **kwargs) -> Any: ...
    thisown: Any

class AbstractOutput:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addChannel(self, *args, **kwargs) -> Any: ...
    def clearChannels(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compatibleAssign(self, *args, **kwargs) -> Any: ...
    def getChannel(self, name: str) -> Any: ...
    def getDependsOnStage(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumberOfSignificantDigits(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValueAsString(self, state: State) -> str: ...
    def isCompatible(self, arg2: AbstractOutput) -> bool: ...
    def isListOutput(self) -> bool: ...
    def setNumberOfSignificantDigits(self, *args, **kwargs) -> Any: ...
    thisown: Any

class AbstractProperty:
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def empty(self) -> bool: ...
    def equals(self, other: AbstractProperty) -> bool: ...
    def getComment(self) -> str: ...
    def getMaxListSize(self) -> int: ...
    def getMinListSize(self) -> int: ...
    def getName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValueAsObject(self, index: int) -> Any: ...
    def getValueIsDefault(self) -> bool: ...
    def isListProperty(self) -> bool: ...
    def isObjectProperty(self) -> bool: ...
    def isOneObjectProperty(self) -> bool: ...
    def isOneValueProperty(self) -> bool: ...
    def isOptionalProperty(self) -> bool: ...
    def isSamePropertyClass(self, other: AbstractProperty) -> bool: ...
    def isUnnamedProperty(self) -> bool: ...
    def readFromXMLParentElement(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAllowableListSize(self, *args, **kwargs) -> Any: ...
    def setComment(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setValueAsObject(self, *args, **kwargs) -> Any: ...
    def setValueIsDefault(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def toStringForDisplay(self, precision: Any) -> str: ...
    def updValueAsObject(self, index: int) -> Any: ...
    def writeToXMLParentElement(self, *args, **kwargs) -> Any: ...

class AbstractReporter:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class AbstractSocket:
    def __init__(self, *args, **kwargs) -> Any: ...
    def appendConnecteePath(self, *args, **kwargs) -> Any: ...
    def assignConnecteePath(self, *args, **kwargs) -> Any: ...
    def canConnectTo(self, arg2: Object) -> bool: ...
    def clearConnecteePath(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connect(self, *args, **kwargs) -> Any: ...
    def disconnect(self, *args, **kwargs) -> Any: ...
    def finalizeConnection(self, *args, **kwargs) -> Any: ...
    def findAndConnect(self, *args, **kwargs) -> Any: ...
    def getConnectAtStage(self) -> Any: ...
    def getConnecteeAsObject(self, index: int) -> Any: ...
    def getConnecteePath(self, index: int) -> Any: ...
    def getConnecteeTypeName(self) -> str: ...
    def getName(self) -> str: ...
    def getNumConnectees(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def isConnected(self) -> bool: ...
    def isConnecteePathEmpty(self) -> bool: ...
    def isListSocket(self) -> bool: ...
    def setConnecteePath(self, *args, **kwargs) -> Any: ...
    thisown: Any

class ArrayBool:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Any) -> None: ...
    @overload
    def __init__(self, aDefaultValue: bool, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: Any) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: Any) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> bool: ...
    def insert(self, aIndex: int, aValue: Any) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: Any) -> int: ...
    def searchBinary(self, aValue: Any, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayConstObjPtr:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Object) -> None: ...
    @overload
    def __init__(self, aDefaultValue: Object, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: Object) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: Object) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> Any: ...
    def insert(self, aIndex: int, aValue: Object) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: Object) -> int: ...
    def searchBinary(self, aValue: Object, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayDouble:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Any) -> None: ...
    @overload
    def __init__(self, aDefaultValue: float, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: Any) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def appendVec3(self, *args, **kwargs) -> Any: ...
    def appendVector(self, *args, **kwargs) -> Any: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def createVec3(self, e1: float, e2: float, e3: float) -> Any: ...
    @overload
    def createVec3(self, e1: float) -> Any: ...
    @overload
    def createVec3(self, es: Any) -> Any: ...
    def findIndex(self, aValue: Any) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getAsVec3(self) -> Any: ...
    def getAsVector(self) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getValuesFromVec3(self, vec3: Vec3) -> Any: ...
    def getitem(self, index: int) -> float: ...
    def insert(self, aIndex: int, aValue: Any) -> int: ...
    def populateFromVector(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: Any) -> int: ...
    def searchBinary(self, aValue: Any, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setFromPyArray(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayInt:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Any) -> None: ...
    @overload
    def __init__(self, aDefaultValue: int, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: Any) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: Any) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> int: ...
    def insert(self, aIndex: int, aValue: Any) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: Any) -> int: ...
    def searchBinary(self, aValue: Any, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayObjPtr:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Object) -> None: ...
    @overload
    def __init__(self, aDefaultValue: Object, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: Object) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: Object) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> Any: ...
    def insert(self, aIndex: int, aValue: Object) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: Object) -> int: ...
    def searchBinary(self, aValue: Object, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayPtrsConstObj:
    def __init__(self, aCapacity: int) -> None: ...
    @overload
    def __init__(self, aArray: ArrayPtrs) -> None: ...
    def append(self, aObject: Object) -> bool: ...
    @overload
    def append(self, aArray: ArrayPtrs) -> bool: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getIndex(self, aObject: ArrayPtrs, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def insert(self, aIndex: int, aObject: Object) -> bool: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: ArrayPtrs) -> bool: ...
    def searchBinary(self, aObject: ArrayPtrs, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, aIndex: int, aObject: Object) -> bool: ...
    def setSize(self, aSize: int) -> bool: ...
    def size(self) -> int: ...
    thisown: Any

class ArrayPtrsObj:
    def __init__(self, aCapacity: int) -> None: ...
    @overload
    def __init__(self, aArray: ArrayPtrs) -> None: ...
    def append(self, aObject: Object) -> bool: ...
    @overload
    def append(self, aArray: ArrayPtrs) -> bool: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getIndex(self, aObject: ArrayPtrs, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def insert(self, aIndex: int, aObject: Object) -> bool: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: ArrayPtrs) -> bool: ...
    def searchBinary(self, aObject: ArrayPtrs, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, aIndex: int, aObject: Object) -> bool: ...
    def setSize(self, aSize: int) -> bool: ...
    def size(self) -> int: ...
    thisown: Any

class ArrayPtrsPropertyGroup:
    def __init__(self, aCapacity: int) -> None: ...
    @overload
    def __init__(self, aArray: ArrayPtrs) -> None: ...
    def append(self, aObject: PropertyGroup) -> bool: ...
    @overload
    def append(self, aArray: ArrayPtrs) -> bool: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getIndex(self, aObject: ArrayPtrs, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def insert(self, aIndex: int, aObject: PropertyGroup) -> bool: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: ArrayPtrs) -> bool: ...
    def searchBinary(self, aObject: ArrayPtrs, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, aIndex: int, aObject: PropertyGroup) -> bool: ...
    def setSize(self, aSize: int) -> bool: ...
    def size(self) -> int: ...
    thisown: Any

class ArrayStateVector:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: StateVector) -> None: ...
    @overload
    def __init__(self, aDefaultValue: StateVector, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: StateVector) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: StateVector) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> Any: ...
    def insert(self, aIndex: int, aValue: StateVector) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: StateVector) -> int: ...
    def searchBinary(self, aValue: StateVector, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayStorage:
    def __init__(self, aCapacity: int) -> None: ...
    @overload
    def __init__(self, aArray: ArrayPtrs) -> None: ...
    def append(self, aObject: Storage) -> bool: ...
    @overload
    def append(self, aArray: ArrayPtrs) -> bool: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getIndex(self, aObject: ArrayPtrs, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def insert(self, aIndex: int, aObject: Storage) -> bool: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: ArrayPtrs) -> bool: ...
    def searchBinary(self, aObject: ArrayPtrs, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, aIndex: int, aObject: Storage) -> bool: ...
    def setSize(self, aSize: int) -> bool: ...
    def size(self) -> int: ...
    thisown: Any

class ArrayStr:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Any) -> None: ...
    @overload
    def __init__(self, aDefaultValue: str, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: str) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: str) -> int: ...
    def get(self, aIndex: int) -> str: ...
    def getLast(self) -> str: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> str: ...
    def insert(self, aIndex: int, aValue: str) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: str) -> int: ...
    def searchBinary(self, aValue: str, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayVec3:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: Vec) -> None: ...
    @overload
    def __init__(self, aDefaultValue: Vec, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: Vec) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: Vec) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> Any: ...
    def insert(self, aIndex: int, aValue: Vec) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: Vec) -> int: ...
    def searchBinary(self, aValue: Vec, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class ArrayXYPoint:
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, arg2: Array) -> None: ...
    @overload
    def __init__(self, initList: XYPoint) -> None: ...
    @overload
    def __init__(self, aDefaultValue: XYPoint, aSize: int, aCapacity: int) -> None: ...
    def append(self, aValue: XYPoint) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    def arrayEquals(self, aArray: Array) -> bool: ...
    def findIndex(self, aValue: XYPoint) -> int: ...
    def get(self, aIndex: int) -> Any: ...
    def getLast(self) -> Any: ...
    def getSize(self) -> int: ...
    def getitem(self, index: int) -> Any: ...
    def insert(self, aIndex: int, aValue: XYPoint) -> int: ...
    def remove(self, aIndex: int) -> int: ...
    def rfindIndex(self, aValue: XYPoint) -> int: ...
    def searchBinary(self, aValue: XYPoint, aFindFirst: bool, aLo: int, aHi: int) -> int: ...
    def set(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setitem(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def trim(self, *args, **kwargs) -> Any: ...

class BoolLike:
    def __init__(self, value_: bool) -> None: ...
    thisown: Any

class C3DFileAdapter:
    ForceLocation_CenterOfPressure: Any
    ForceLocation_OriginOfForcePlate: Any
    ForceLocation_PointOfWrenchApplication: Any
    def __init__(self) -> None: ...
    def clone(self) -> Any: ...
    def createAdapterFromExtension(self, fileName: str) -> DataAdapter: ...
    def findExtension(self, filename: str) -> str: ...
    def getAnalogDataTable(self, tables: DataAdapter) -> TimeSeriesTable: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def getForcesTable(self, tables: DataAdapter) -> TimeSeriesTableVec3: ...
    def getLocationForForceExpression(self) -> C3DFileAdapter: ...
    def getMarkersTable(self, tables: DataAdapter) -> TimeSeriesTableVec3: ...
    def getNextLine(self, stream: Any, delims: str) -> Any: ...
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    def setLocationForForceExpression(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def tokenize(self, str: str, delims: str) -> Any: ...
    def writeFile(self, *args, **kwargs) -> Any: ...

class CSVFileAdapter:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: CSVFileAdapter) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class ColumnIndexOutOfRange:
    def __init__(self, *args, **kwargs) -> Any: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class Component:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ComponentAlreadyPartOfOwnershipTree:
    def __init__(self, file: str, line: Any, methodName: str, compName: str, thisName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentFilter:
    def __init__(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def isMatch(self, comp: Component) -> bool: ...
    thisown: Any

class ComponentFilterAbsolutePathNameContainsString:
    def __init__(self, substring: str) -> None: ...
    def clone(self) -> Any: ...
    def isMatch(self, comp: Component) -> bool: ...
    thisown: Any

class ComponentFilterMatchAll:
    def __init__(self) -> None: ...
    def clone(self) -> Any: ...
    def isMatch(self, comp: Component) -> bool: ...
    thisown: Any

class ComponentHasNoName:
    def __init__(self, file: str, line: Any, methodName: str, componentConcreteClassName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentHasNoSystem:
    def __init__(self, file: str, line: Any, methodName: str, obj: Object) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentIsAnOrphan:
    def __init__(self, file: str, line: Any, methodName: str, thisName: str, componentConcreteClassName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentIsRootWithNoSubcomponents:
    def __init__(self, file: str, line: Any, methodName: str, thisName: str, componentConcreteClassName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def deref(self) -> Any: ...
    def dump(self) -> str: ...
    def equals(self, other: ComponentListIterator) -> bool: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def next(self) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ComponentNotFound:
    def __init__(self, file: str, line: Any, func: str, toFindName: str, toFindClassName: str, thisName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentNotFoundOnSpecifiedPath:
    def __init__(self, file: str, line: Any, methodName: str, toFindName: str, toFindClassName: str, thisName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ComponentPath:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: str) -> None: ...
    @overload
    def __init__(self, pathVec: Any, isAbsolute: bool) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def formAbsolutePath(self, otherPath: ComponentPath) -> Any: ...
    def formRelativePath(self, otherPath: ComponentPath) -> Any: ...
    def getComponentName(self) -> str: ...
    def getInvalidChars(self) -> str: ...
    def getNumPathLevels(self) -> Any: ...
    def getParentPath(self) -> Any: ...
    def getParentPathString(self) -> str: ...
    def getSeparator(self) -> Any: ...
    def getSubcomponentNameAtLevel(self, index: Any) -> str: ...
    def isAbsolute(self) -> bool: ...
    def isLegalPathElement(self, pathElement: str) -> bool: ...
    def pushBack(self, *args, **kwargs) -> Any: ...
    def root(self) -> Any: ...
    def separator(self) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def trimDotAndDotDotElements(self, *args, **kwargs) -> Any: ...

class ComponentsList:
    def __init__(self, root: Component, f: ComponentFilter) -> None: ...
    @overload
    def __init__(self, root: Component) -> None: ...
    def begin(self) -> Any: ...
    @overload
    def begin(self) -> ComponentList: ...
    def cbegin(self) -> ComponentList: ...
    def cend(self) -> ComponentList: ...
    def end(self) -> Any: ...
    @overload
    def end(self) -> ComponentList: ...
    def setFilter(self, *args, **kwargs) -> Any: ...
    thisown: Any

class ConnecteeNotSpecified:
    def __init__(self, file: str, line: Any, func: str, socket: AbstractSocket, owner: Component) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ConsoleReporter:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ConsoleReporterVec3:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Constant:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, value: float) -> None: ...
    @overload
    def __init__(self, aSpline: Constant) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, xUnused: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getValue(self) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class DataAdapter:
    def __init__(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    thisown: Any

class DataAdapterAlreadyRegistered:
    def __init__(self, file: str, line: Any, func: str, key: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class DataTable:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def packQuaternion(self) -> Any: ...
    @overload
    def packQuaternion(self, suffixes: Any) -> Any: ...
    def packRotation(self) -> Any: ...
    @overload
    def packRotation(self, suffixes: Any) -> Any: ...
    def packSpatialVec(self) -> Any: ...
    @overload
    def packSpatialVec(self, suffixes: Any) -> Any: ...
    def packUnitVec3(self) -> Any: ...
    @overload
    def packUnitVec3(self, suffixes: Any) -> Any: ...
    def packVec3(self) -> Any: ...
    @overload
    def packVec3(self, suffixes: Any) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class DataTableMat33:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class DataTableQuaternion:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class DataTableRotation:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class DataTableSpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> DataTable_: ...
    def getRowAtIndex(self, index: Any) -> DataTable_: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updRow(self, ind: Any) -> DataTable_: ...
    def updRowAtIndex(self, index: Any) -> DataTable_: ...

class DataTableUnitVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> DataTable_: ...
    def getRowAtIndex(self, index: Any) -> DataTable_: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updRow(self, ind: Any) -> DataTable_: ...
    def updRowAtIndex(self, index: Any) -> DataTable_: ...

class DataTableVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class DataTableVec6:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class DataTypeMismatch:
    def __init__(self, file: str, line: Any, func: str, expected: str, received: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class EmptyComponentPath:
    def __init__(self, file: str, line: Any, methodName: str, componentName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class EmptyFileName:
    def __init__(self, file: str, line: Any, func: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class EmptyTable:
    def __init__(self, file: str, line: Any, func: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class Event:
    def __init__(self) -> None: ...
    description: Any
    frame: Any
    label: Any
    thisown: Any
    time: Any

class ExperimentalSensor:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, sensorName: str, nameInModel: str) -> None: ...
    @overload
    def __init__(self) -> None: ...
    def append_name_in_model(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_name_in_model(self, *args, **kwargs) -> Any: ...
    def copyProperty_name_in_model(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_name_in_model(self, i: int) -> Any: ...
    @overload
    def get_name_in_model(self) -> str: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_name_in_model(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_name_in_model(self, i: int) -> str: ...
    @overload
    def upd_name_in_model(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ExpressionBasedFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, expression: str, variables: Any) -> None: ...
    def append_expression(self, value: str) -> int: ...
    def append_variables(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def constructProperty_expression(self, *args, **kwargs) -> Any: ...
    def constructProperty_variables(self, *args, **kwargs) -> Any: ...
    def copyProperty_expression(self, *args, **kwargs) -> Any: ...
    def copyProperty_variables(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExpression(self) -> str: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getVariables(self) -> Any: ...
    def get_expression(self, i: int) -> Any: ...
    @overload
    def get_expression(self) -> str: ...
    def get_variables(self, i: int) -> str: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setExpression(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setVariables(self, *args, **kwargs) -> Any: ...
    def set_expression(self, *args, **kwargs) -> Any: ...
    def set_variables(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_expression(self, i: int) -> str: ...
    @overload
    def upd_expression(self) -> Any: ...
    def upd_variables(self, i: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FileAdapter:
    def __init__(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def createAdapterFromExtension(self, fileName: str) -> DataAdapter: ...
    def findExtension(self, filename: str) -> str: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def getNextLine(self, stream: Any, delims: str) -> Any: ...
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    thisown: Any
    def tokenize(self, str: str, delims: str) -> Any: ...
    def writeFile(self, *args, **kwargs) -> Any: ...

class FileDoesNotExist:
    def __init__(self, file: str, line: Any, func: str, filename: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class FileExtensionNotFound:
    def __init__(self, file: str, line: Any, func: str, filename: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class FileIsEmpty:
    def __init__(self, file: str, line: Any, func: str, filename: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class FileRemover:
    def __init__(self, filepath: str) -> None: ...
    def remove(self, *args, **kwargs) -> Any: ...
    thisown: Any

class Function:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class FunctionSet:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: Function) -> bool: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def evaluate(self, aIndex: int, aDerivOrder: int, aX: float, rValues: Array) -> float: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: Function, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: Function) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: Function) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: Function, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class GCVSpline:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aDegree: int, aN: int, aX: Any, aF: Any, aName: str, aErrorVariance: float) -> None: ...
    @overload
    def __init__(self, aSpline: GCVSpline) -> None: ...
    def addPoint(self, aX: float, aY: float) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def deletePoint(self, aIndex: int) -> bool: ...
    def deletePoints(self, indices: Array) -> bool: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getCoefficients(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDegree(self) -> int: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getHalfOrder(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getMaxX(self) -> float: ...
    def getMinX(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getNumberOfPoints(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getX(self) -> Any: ...
    @overload
    def getX(self, aIndex: int) -> float: ...
    def getXValues(self) -> Any: ...
    def getY(self, aIndex: int) -> float: ...
    def getYValues(self) -> Any: ...
    def getZ(self, aIndex: int) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDegree(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class GCVSplineSet:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str) -> None: ...
    @overload
    def __init__(self, aDegree: int, aStore: Storage, aErrorVariance: float) -> None: ...
    @overload
    def __init__(self, table: TimeSeriesTable, labels: Any, degree: int, errorVariance: float) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: Function) -> bool: ...
    def constructStorage(self, aDerivOrder: int, aDX: float) -> Any: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def evaluate(self, aIndex: int, aDerivOrder: int, aX: float, rValues: Array) -> float: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGCVSpline(self, aIndex: int) -> Any: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: Function, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxX(self) -> float: ...
    def getMinX(self) -> float: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: Function) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: Function) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: Function, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class IMUDataReader:
    AngularVelocity: Any
    LinearAccelerations: Any
    MagneticHeading: Any
    Orientations: Any
    def __init__(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def getAngularVelocityTable(self, tables: DataAdapter) -> Any: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def getLinearAccelerationsTable(self, tables: DataAdapter) -> Any: ...
    def getMagneticHeadingTable(self, tables: DataAdapter) -> Any: ...
    def getOrientationsTable(self, tables: DataAdapter) -> Any: ...
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    thisown: Any

class IO:
    def ConstructDateAndTimeStamp(self) -> Any: ...
    def EndsWith(self, string: str, ending: str) -> bool: ...
    def EndsWithIgnoringCase(self, string: str, ending: str) -> bool: ...
    def FixSlashesInFilePath(self, path: str) -> str: ...
    def GetDigitsPad(self) -> int: ...
    def GetDoubleOutputFormat(self) -> str: ...
    def GetFileNameFromURI(self, aURI: str) -> str: ...
    def GetGFormatForDoubleOutput(self) -> bool: ...
    def GetPrecision(self) -> int: ...
    def GetPrintOfflineDocuments(self) -> bool: ...
    def GetScientific(self) -> bool: ...
    def GetSuffix(self, aStr: str, aLen: int) -> str: ...
    def Lowercase(self, aStr: str) -> str: ...
    def RemoveSuffix(self, *args, **kwargs) -> Any: ...
    def SetDigitsPad(self, *args, **kwargs) -> Any: ...
    def SetGFormatForDoubleOutput(self, *args, **kwargs) -> Any: ...
    def SetPrecision(self, *args, **kwargs) -> Any: ...
    def SetPrintOfflineDocuments(self, *args, **kwargs) -> Any: ...
    def SetScientific(self, *args, **kwargs) -> Any: ...
    def StartsWith(self, string: str, start: str) -> bool: ...
    def StartsWithIgnoringCase(self, string: str, start: str) -> bool: ...
    def TrimLeadingWhitespace(self, *args, **kwargs) -> Any: ...
    def TrimTrailingWhitespace(self, *args, **kwargs) -> Any: ...
    def TrimWhitespace(self, *args, **kwargs) -> Any: ...
    def Uppercase(self, aStr: str) -> str: ...
    def __init__(self) -> None: ...
    def chDir(self, aDirName: str) -> int: ...
    def eraseEmptyElements(self, *args, **kwargs) -> Any: ...
    def formatText(self, aComment: str, leadingWhitespace: str, width: int, endlineTokenToInsert: str) -> str: ...
    def getCwd(self) -> str: ...
    def getParentDirectory(self, fileName: str) -> str: ...
    def makeDir(self, aDirName: str) -> int: ...
    def replaceSubstring(self, aStr: str, aFrom: str, aTo: str) -> str: ...
    thisown: Any

class IOError:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectMetaDataLength:
    def __init__(self, file: str, line: Any, func: str, key: str, expected: Any, received: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectNumColumnLabels:
    def __init__(self, file: str, line: Any, func: str, filename: str, expected: Any, received: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectNumColumns:
    def __init__(self, file: str, line: Any, func: str, expected: Any, received: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectNumMetaDataKeys:
    def __init__(self, file: str, line: Any, func: str, filename: str, expected: Any, received: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectNumRows:
    def __init__(self, file: str, line: Any, func: str, expected: Any, received: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectNumTokens:
    def __init__(self, file: str, line: Any, func: str, msg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IncorrectTableType:
    def __init__(self, file: str, line: Any, func: str, message: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class IndexOutOfRange:
    def __init__(self, file: str, line: Any, func: str, index: Any, min: Any, max: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InputDouble:
    def __init__(self, *args, **kwargs) -> Any: ...
    def appendConnecteePath(self, *args, **kwargs) -> Any: ...
    def assignConnecteePath(self, *args, **kwargs) -> Any: ...
    def canConnectTo(self, arg2: Object) -> bool: ...
    def clearConnecteePath(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def composeConnecteePath(self, componentPath: str, outputName: str, channelName: str, alias: str) -> str: ...
    def connect(self, *args, **kwargs) -> Any: ...
    def disconnect(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractInput) -> Any: ...
    def finalizeConnection(self, *args, **kwargs) -> Any: ...
    def findAndConnect(self, *args, **kwargs) -> Any: ...
    def getAlias(self) -> Any: ...
    @overload
    def getAlias(self, index: Any) -> str: ...
    def getChannel(self) -> Input: ...
    @overload
    def getChannel(self, index: Any) -> Input: ...
    def getChannels(self) -> Input: ...
    def getConnectAtStage(self) -> Any: ...
    def getConnecteeAsObject(self, index: int) -> Any: ...
    def getConnecteePath(self, index: int) -> Any: ...
    def getConnecteeTypeName(self) -> str: ...
    def getLabel(self) -> str: ...
    @overload
    def getLabel(self, index: Any) -> str: ...
    def getName(self) -> str: ...
    def getNumConnectees(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getValue(self, state: State) -> Any: ...
    @overload
    def getValue(self, state: State, index: Any) -> Any: ...
    def getVector(self, state: State) -> Any: ...
    def isA(self, p: AbstractInput) -> bool: ...
    def isConnected(self) -> bool: ...
    def isConnecteePathEmpty(self) -> bool: ...
    def isListSocket(self) -> bool: ...
    def parseConnecteePath(self, connecteePath: str, componentPath: Any, outputName: Any, channelName: Any, alias: Any) -> bool: ...
    def safeDownCast(self, base: AbstractInput) -> Any: ...
    def setAlias(self, *args, **kwargs) -> Any: ...
    def setConnecteePath(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractInput) -> Any: ...

class InputNotConnected:
    def __init__(self, file: str, line: Any, func: str, inputName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InputNotFound:
    def __init__(self, file: str, line: Any, methodName: str, obj: Object, inputName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InputVec3:
    def __init__(self, *args, **kwargs) -> Any: ...
    def appendConnecteePath(self, *args, **kwargs) -> Any: ...
    def assignConnecteePath(self, *args, **kwargs) -> Any: ...
    def canConnectTo(self, arg2: Object) -> bool: ...
    def clearConnecteePath(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def composeConnecteePath(self, componentPath: str, outputName: str, channelName: str, alias: str) -> str: ...
    def connect(self, *args, **kwargs) -> Any: ...
    def disconnect(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractInput) -> Any: ...
    def finalizeConnection(self, *args, **kwargs) -> Any: ...
    def findAndConnect(self, *args, **kwargs) -> Any: ...
    def getAlias(self) -> Any: ...
    @overload
    def getAlias(self, index: Any) -> str: ...
    def getChannel(self) -> Input: ...
    @overload
    def getChannel(self, index: Any) -> Input: ...
    def getChannels(self) -> Input: ...
    def getConnectAtStage(self) -> Any: ...
    def getConnecteeAsObject(self, index: int) -> Any: ...
    def getConnecteePath(self, index: int) -> Any: ...
    def getConnecteeTypeName(self) -> str: ...
    def getLabel(self) -> str: ...
    @overload
    def getLabel(self, index: Any) -> str: ...
    def getName(self) -> str: ...
    def getNumConnectees(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getValue(self, state: State) -> Any: ...
    @overload
    def getValue(self, state: State, index: Any) -> Any: ...
    def getVector(self, state: State) -> Any: ...
    def isA(self, p: AbstractInput) -> bool: ...
    def isConnected(self) -> bool: ...
    def isConnecteePathEmpty(self) -> bool: ...
    def isListSocket(self) -> bool: ...
    def parseConnecteePath(self, connecteePath: str, componentPath: Any, outputName: Any, channelName: Any, alias: Any) -> bool: ...
    def safeDownCast(self, base: AbstractInput) -> Any: ...
    def setAlias(self, *args, **kwargs) -> Any: ...
    def setConnecteePath(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractInput) -> Any: ...

class InvalidArgument:
    def __init__(self, file: str, line: Any, func: str, msg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidCall:
    def __init__(self, file: str, line: Any, func: str, msg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidColumn:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidColumnLabel:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidComponentName:
    def __init__(self, file: str, line: Any, methodName: str, thisName: str, invalidChars: str, componentConcreteClassName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidIndices:
    def __init__(self, file: str, line: Any, func: str, index: Any, min: Any, max: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidPropertyValue:
    def __init__(self, file: str, line: Any, func: str, obj: Object, propertyName: str, errorMsg: str) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str, component: Component, propertyName: str, errorMsg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidRow:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidTable:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidTemplateArgument:
    def __init__(self, file: str, line: Any, func: str, msg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidTimeRange:
    def __init__(self, file: str, line: Any, func: str, begTime: Any, endTime: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class InvalidTimestamp:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class KeyExists:
    def __init__(self, file: str, line: Any, func: str, key: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class KeyMissing:
    def __init__(self, file: str, line: Any, func: str, key: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class KeyNotFound:
    def __init__(self, file: str, line: Any, func: str, key: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class LinearFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, coefficients: Array) -> None: ...
    @overload
    def __init__(self, slope: float, intercept: float) -> None: ...
    @overload
    def __init__(self, aSpline: LinearFunction) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getCoefficients(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getIntercept(self) -> float: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSlope(self) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCoefficients(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setIntercept(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSlope(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class LogSink:
    def __init__(self, self: Any) -> None: ...
    def flushImpl(self, *args, **kwargs) -> Any: ...
    def sinkImpl(self, *args, **kwargs) -> Any: ...
    thisown: Any

class Logger:
    Level_Critical: Any
    Level_Debug: Any
    Level_Error: Any
    Level_Info: Any
    Level_Off: Any
    Level_Trace: Any
    Level_Warn: Any
    def __init__(self, *args, **kwargs) -> Any: ...
    def addFileSink(self, *args, **kwargs) -> Any: ...
    def addSink(self, *args, **kwargs) -> Any: ...
    def getLevel(self) -> Logger: ...
    def getLevelString(self) -> str: ...
    def removeFileSink(self, *args, **kwargs) -> Any: ...
    def removeSink(self, *args, **kwargs) -> Any: ...
    def setLevel(self, *args, **kwargs) -> Any: ...
    def setLevelString(self, *args, **kwargs) -> Any: ...
    def shouldLog(self, level: Logger) -> bool: ...
    thisown: Any

class MarkerData:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def averageFrames(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def convertToUnits(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def findFrameRange(self, *args, **kwargs) -> Any: ...
    def getAuthors(self) -> str: ...
    def getCameraRate(self) -> float: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDataRate(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFileName(self) -> str: ...
    def getFrame(self, aIndex: int) -> Any: ...
    def getInlined(self) -> bool: ...
    def getLastFrameTime(self) -> float: ...
    def getMarkerIndex(self, aName: str) -> int: ...
    def getMarkerNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumFrames(self) -> int: ...
    def getNumMarkers(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStartFrameTime(self) -> float: ...
    def getUnits(self) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def makeRdStorage(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MarkerFrame:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aNumMarkers: int, aFrameNumber: int, aTime: float, aUnits: Units) -> None: ...
    def addMarker(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFrameNumber(self) -> int: ...
    def getFrameTime(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getMarker(self, aIndex: int) -> Any: ...
    def getMarkers(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setFrameNumber(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updMarker(self, aIndex: int) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MetaDataLengthMismatch:
    def __init__(self, file: str, line: Any, func: str, filename: str, keys_len: Any, values_len: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class MissingHeader:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class MissingMetaData:
    def __init__(self, file: str, line: Any, func: str, key: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ModelDisplayHints:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def append_marker_color(self, value: Vec3) -> int: ...
    def append_show_contact_geometry(self, value: Any) -> int: ...
    def append_show_debug_geometry(self, value: Any) -> int: ...
    def append_show_forces(self, value: Any) -> int: ...
    def append_show_frames(self, value: Any) -> int: ...
    def append_show_labels(self, value: Any) -> int: ...
    def append_show_markers(self, value: Any) -> int: ...
    def append_show_path_geometry(self, value: Any) -> int: ...
    def append_show_path_points(self, value: Any) -> int: ...
    def append_show_wrap_geometry(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_marker_color(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_contact_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_debug_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_forces(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_frames(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_labels(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_markers(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_path_geometry(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_path_points(self, *args, **kwargs) -> Any: ...
    def constructProperty_show_wrap_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_marker_color(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_contact_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_debug_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_forces(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_frames(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_labels(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_markers(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_path_geometry(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_path_points(self, *args, **kwargs) -> Any: ...
    def copyProperty_show_wrap_geometry(self, *args, **kwargs) -> Any: ...
    def disableVisualization(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_marker_color(self, i: int) -> Any: ...
    @overload
    def get_marker_color(self) -> Any: ...
    def get_show_contact_geometry(self, i: int) -> Any: ...
    @overload
    def get_show_contact_geometry(self) -> Any: ...
    def get_show_debug_geometry(self, i: int) -> Any: ...
    @overload
    def get_show_debug_geometry(self) -> Any: ...
    def get_show_forces(self, i: int) -> Any: ...
    @overload
    def get_show_forces(self) -> Any: ...
    def get_show_frames(self, i: int) -> Any: ...
    @overload
    def get_show_frames(self) -> Any: ...
    def get_show_labels(self, i: int) -> Any: ...
    @overload
    def get_show_labels(self) -> Any: ...
    def get_show_markers(self, i: int) -> Any: ...
    @overload
    def get_show_markers(self) -> Any: ...
    def get_show_path_geometry(self, i: int) -> Any: ...
    @overload
    def get_show_path_geometry(self) -> Any: ...
    def get_show_path_points(self, i: int) -> Any: ...
    @overload
    def get_show_path_points(self) -> Any: ...
    def get_show_wrap_geometry(self, i: int) -> Any: ...
    @overload
    def get_show_wrap_geometry(self) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isVisualizationEnabled(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_marker_color(self, *args, **kwargs) -> Any: ...
    def set_show_contact_geometry(self, *args, **kwargs) -> Any: ...
    def set_show_debug_geometry(self, *args, **kwargs) -> Any: ...
    def set_show_forces(self, *args, **kwargs) -> Any: ...
    def set_show_frames(self, *args, **kwargs) -> Any: ...
    def set_show_labels(self, *args, **kwargs) -> Any: ...
    def set_show_markers(self, *args, **kwargs) -> Any: ...
    def set_show_path_geometry(self, *args, **kwargs) -> Any: ...
    def set_show_path_points(self, *args, **kwargs) -> Any: ...
    def set_show_wrap_geometry(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_marker_color(self, i: int) -> Any: ...
    @overload
    def upd_marker_color(self) -> Any: ...
    def upd_show_contact_geometry(self, i: int) -> bool: ...
    @overload
    def upd_show_contact_geometry(self) -> Any: ...
    def upd_show_debug_geometry(self, i: int) -> bool: ...
    @overload
    def upd_show_debug_geometry(self) -> Any: ...
    def upd_show_forces(self, i: int) -> bool: ...
    @overload
    def upd_show_forces(self) -> Any: ...
    def upd_show_frames(self, i: int) -> bool: ...
    @overload
    def upd_show_frames(self) -> Any: ...
    def upd_show_labels(self, i: int) -> bool: ...
    @overload
    def upd_show_labels(self) -> Any: ...
    def upd_show_markers(self, i: int) -> bool: ...
    @overload
    def upd_show_markers(self) -> Any: ...
    def upd_show_path_geometry(self, i: int) -> bool: ...
    @overload
    def upd_show_path_geometry(self) -> Any: ...
    def upd_show_path_points(self, i: int) -> bool: ...
    @overload
    def upd_show_path_points(self) -> Any: ...
    def upd_show_wrap_geometry(self, i: int) -> bool: ...
    @overload
    def upd_show_wrap_geometry(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelingOptionMaxExceeded:
    def __init__(self, file: str, line: Any, methodName: str, componentName: str, moName: str, flag: Any, max: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class MultiplierFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFunction: Function) -> None: ...
    @overload
    def __init__(self, aFunction: Function, aScaleFactor: float) -> None: ...
    @overload
    def __init__(self, aFunction: MultiplierFunction) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFunction(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getScale(self) -> float: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setFunction(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setScale(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class MultivariatePolynomialFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, coefficients: Any, dimension: int, order: int) -> None: ...
    def append_coefficients(self, value: Any) -> int: ...
    def append_dimension(self, value: Any) -> int: ...
    def append_order(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def constructProperty_coefficients(self, *args, **kwargs) -> Any: ...
    def constructProperty_dimension(self, *args, **kwargs) -> Any: ...
    def constructProperty_order(self, *args, **kwargs) -> Any: ...
    def copyProperty_coefficients(self, *args, **kwargs) -> Any: ...
    def copyProperty_dimension(self, *args, **kwargs) -> Any: ...
    def copyProperty_order(self, *args, **kwargs) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def generateDerivativeFunction(self, derivComponent: int, negateCoefficients: bool) -> Any: ...
    def generatePartialVelocityFunction(self) -> Any: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getCoefficients(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDimension(self) -> int: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getOrder(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getTermDerivatives(self, derivComponent: Any, x: Any) -> Any: ...
    def getTermValues(self, x: Any) -> Any: ...
    def get_coefficients(self, i: int) -> Any: ...
    @overload
    def get_coefficients(self) -> Any: ...
    def get_dimension(self, i: int) -> Any: ...
    @overload
    def get_dimension(self) -> Any: ...
    def get_order(self, i: int) -> Any: ...
    @overload
    def get_order(self) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCoefficients(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDimension(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOrder(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_coefficients(self, *args, **kwargs) -> Any: ...
    def set_dimension(self, *args, **kwargs) -> Any: ...
    def set_order(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_coefficients(self, i: int) -> Any: ...
    @overload
    def upd_coefficients(self) -> Any: ...
    def upd_dimension(self, i: int) -> int: ...
    @overload
    def upd_dimension(self) -> Any: ...
    def upd_order(self, i: int) -> int: ...
    @overload
    def upd_order(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class NoColumnLabels:
    def __init__(self, file: str, line: Any, func: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class NoRegisteredDataAdapter:
    def __init__(self, file: str, line: Any, func: str, key: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class NoTableFound:
    def __init__(self, file: str, line: Any, func: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class NonUniqueLabels:
    def __init__(self) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class ObjectGroup:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aName: str) -> None: ...
    @overload
    def __init__(self, aGroup: ObjectGroup) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def contains(self, aName: str) -> bool: ...
    def copyData(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMembers(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def replace(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setupGroup(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class OpenSimException:
    def __init__(self, aMsg: str, aFile: str, aLine: int) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str, msg: str) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str, obj: Object) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str, obj: Object, msg: str) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str, component: Component) -> None: ...
    @overload
    def __init__(self, file: str, line: Any, func: str, component: Component, msg: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class OpenSimObject:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class OpenSimObjectSet:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(self, aSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, aObject: Object) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: Object) -> bool: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: Object, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: Object) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: Object) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: Object, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class OutputDouble:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, outputFunction: Component, dependsOnStage: Stage, isList: bool) -> None: ...
    @overload
    def __init__(self, source: Output) -> None: ...
    def addChannel(self, *args, **kwargs) -> Any: ...
    def clearChannels(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compatibleAssign(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractOutput) -> Any: ...
    def getChannel(self, name: str) -> Any: ...
    def getChannels(self) -> Output: ...
    def getDependsOnStage(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumberOfSignificantDigits(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, state: State) -> Any: ...
    def getValueAsString(self, state: State) -> str: ...
    def isA(self, p: AbstractOutput) -> bool: ...
    def isCompatible(self, o: AbstractOutput) -> bool: ...
    def isListOutput(self) -> bool: ...
    def safeDownCast(self, parent: AbstractOutput) -> Any: ...
    def setNumberOfSignificantDigits(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractOutput) -> Any: ...

class OutputNotFound:
    def __init__(self, file: str, line: Any, methodName: str, obj: Object, outputName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class OutputSpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, outputFunction: Component, dependsOnStage: Stage, isList: bool) -> None: ...
    @overload
    def __init__(self, source: Output) -> None: ...
    def addChannel(self, *args, **kwargs) -> Any: ...
    def clearChannels(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compatibleAssign(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractOutput) -> Any: ...
    def getChannel(self, name: str) -> Any: ...
    def getChannels(self) -> Output: ...
    def getDependsOnStage(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumberOfSignificantDigits(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, state: State) -> Any: ...
    def getValueAsString(self, state: State) -> str: ...
    def isA(self, p: AbstractOutput) -> bool: ...
    def isCompatible(self, o: AbstractOutput) -> bool: ...
    def isListOutput(self) -> bool: ...
    def safeDownCast(self, parent: AbstractOutput) -> Any: ...
    def setNumberOfSignificantDigits(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractOutput) -> Any: ...

class OutputTransform:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, outputFunction: Component, dependsOnStage: Stage, isList: bool) -> None: ...
    @overload
    def __init__(self, source: Output) -> None: ...
    def addChannel(self, *args, **kwargs) -> Any: ...
    def clearChannels(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compatibleAssign(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractOutput) -> Any: ...
    def getChannel(self, name: str) -> Any: ...
    def getChannels(self) -> Output: ...
    def getDependsOnStage(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumberOfSignificantDigits(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, state: State) -> Any: ...
    def getValueAsString(self, state: State) -> str: ...
    def isA(self, p: AbstractOutput) -> bool: ...
    def isCompatible(self, o: AbstractOutput) -> bool: ...
    def isListOutput(self) -> bool: ...
    def safeDownCast(self, parent: AbstractOutput) -> Any: ...
    def setNumberOfSignificantDigits(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractOutput) -> Any: ...

class OutputVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, outputFunction: Component, dependsOnStage: Stage, isList: bool) -> None: ...
    @overload
    def __init__(self, source: Output) -> None: ...
    def addChannel(self, *args, **kwargs) -> Any: ...
    def clearChannels(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compatibleAssign(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractOutput) -> Any: ...
    def getChannel(self, name: str) -> Any: ...
    def getChannels(self) -> Output: ...
    def getDependsOnStage(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumberOfSignificantDigits(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, state: State) -> Any: ...
    def getValueAsString(self, state: State) -> str: ...
    def isA(self, p: AbstractOutput) -> bool: ...
    def isCompatible(self, o: AbstractOutput) -> bool: ...
    def isListOutput(self) -> bool: ...
    def safeDownCast(self, parent: AbstractOutput) -> Any: ...
    def setNumberOfSignificantDigits(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractOutput) -> Any: ...

class OutputVector:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, outputFunction: Component, dependsOnStage: Stage, isList: bool) -> None: ...
    @overload
    def __init__(self, source: Output) -> None: ...
    def addChannel(self, *args, **kwargs) -> Any: ...
    def clearChannels(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compatibleAssign(self, *args, **kwargs) -> Any: ...
    def downcast(self, p: AbstractOutput) -> Any: ...
    def getChannel(self, name: str) -> Any: ...
    def getChannels(self) -> Output: ...
    def getDependsOnStage(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumberOfSignificantDigits(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPathName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, state: State) -> Any: ...
    def getValueAsString(self, state: State) -> str: ...
    def isA(self, p: AbstractOutput) -> bool: ...
    def isCompatible(self, o: AbstractOutput) -> bool: ...
    def isListOutput(self) -> bool: ...
    def safeDownCast(self, parent: AbstractOutput) -> Any: ...
    def setNumberOfSignificantDigits(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def updDowncast(self, p: AbstractOutput) -> Any: ...

class PiecewiseConstantFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aN: int, aTimes: Any, aValues: Any, aName: str) -> None: ...
    @overload
    def __init__(self, aFunction: PiecewiseConstantFunction) -> None: ...
    def addPoint(self, aX: float, aY: float) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def deletePoint(self, aIndex: int) -> bool: ...
    def deletePoints(self, indices: Array) -> bool: ...
    def dump(self) -> str: ...
    def evaluateTotalFirstDerivative(self, aX: float, aDxdt: float) -> float: ...
    def evaluateTotalSecondDerivative(self, aX: float, aDxdt: float, aD2xdt2: float) -> float: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getNumberOfPoints(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getX(self) -> Any: ...
    @overload
    def getX(self, aIndex: int) -> float: ...
    def getXValues(self) -> Any: ...
    def getY(self) -> Any: ...
    @overload
    def getY(self, aIndex: int) -> float: ...
    def getYValues(self) -> Any: ...
    def getZ(self, aIndex: int) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PiecewiseLinearFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aN: int, aTimes: Any, aValues: Any, aName: str) -> None: ...
    @overload
    def __init__(self, aFunction: PiecewiseLinearFunction) -> None: ...
    def addPoint(self, aX: float, aY: float) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def deletePoint(self, aIndex: int) -> bool: ...
    def deletePoints(self, indices: Array) -> bool: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getNumberOfPoints(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getX(self) -> Any: ...
    @overload
    def getX(self, aIndex: int) -> float: ...
    def getXValues(self) -> Any: ...
    def getY(self) -> Any: ...
    @overload
    def getY(self, aIndex: int) -> float: ...
    def getYValues(self) -> Any: ...
    def getZ(self, aIndex: int) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PolynomialFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, coefficients: Any) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getCoefficients(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCoefficients(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PropertyBoolList:
    def __init__(self, *args, **kwargs) -> Any: ...
    def adoptAndAppendValue(self, value: Any) -> int: ...
    def appendValue(self, value: Any) -> int: ...
    @overload
    def appendValue(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def empty(self) -> bool: ...
    def equals(self, other: AbstractProperty) -> bool: ...
    def findIndex(self, value: Any) -> int: ...
    def findIndexForName(self, name: String) -> int: ...
    def getAs(self, prop: AbstractProperty) -> Any: ...
    def getComment(self) -> str: ...
    def getMaxListSize(self) -> int: ...
    def getMinListSize(self) -> int: ...
    def getName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, index: int) -> Any: ...
    def getValueAsObject(self, index: int) -> Any: ...
    def getValueIsDefault(self) -> bool: ...
    def isA(self, prop: AbstractProperty) -> bool: ...
    def isListProperty(self) -> bool: ...
    def isObjectProperty(self) -> bool: ...
    def isOneObjectProperty(self) -> bool: ...
    def isOneValueProperty(self) -> bool: ...
    def isOptionalProperty(self) -> bool: ...
    def isSamePropertyClass(self, other: AbstractProperty) -> bool: ...
    def isUnnamedProperty(self) -> bool: ...
    def readFromXMLParentElement(self, *args, **kwargs) -> Any: ...
    def removeValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAllowableListSize(self, *args, **kwargs) -> Any: ...
    def setComment(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValueAsObject(self, *args, **kwargs) -> Any: ...
    def setValueIsDefault(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def toStringForDisplay(self, precision: Any) -> str: ...
    def updAs(self, prop: AbstractProperty) -> Any: ...
    def updValue(self, index: int) -> bool: ...
    def updValueAsObject(self, index: int) -> Any: ...
    def writeToXMLParentElement(self, *args, **kwargs) -> Any: ...

class PropertyDoubleList:
    def __init__(self, *args, **kwargs) -> Any: ...
    def adoptAndAppendValue(self, value: Any) -> int: ...
    def appendValue(self, value: Any) -> int: ...
    @overload
    def appendValue(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def empty(self) -> bool: ...
    def equals(self, other: AbstractProperty) -> bool: ...
    def findIndex(self, value: Any) -> int: ...
    def findIndexForName(self, name: String) -> int: ...
    def getAs(self, prop: AbstractProperty) -> Any: ...
    def getComment(self) -> str: ...
    def getMaxListSize(self) -> int: ...
    def getMinListSize(self) -> int: ...
    def getName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, index: int) -> Any: ...
    def getValueAsObject(self, index: int) -> Any: ...
    def getValueIsDefault(self) -> bool: ...
    def isA(self, prop: AbstractProperty) -> bool: ...
    def isListProperty(self) -> bool: ...
    def isObjectProperty(self) -> bool: ...
    def isOneObjectProperty(self) -> bool: ...
    def isOneValueProperty(self) -> bool: ...
    def isOptionalProperty(self) -> bool: ...
    def isSamePropertyClass(self, other: AbstractProperty) -> bool: ...
    def isUnnamedProperty(self) -> bool: ...
    def readFromXMLParentElement(self, *args, **kwargs) -> Any: ...
    def removeValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAllowableListSize(self, *args, **kwargs) -> Any: ...
    def setComment(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValueAsObject(self, *args, **kwargs) -> Any: ...
    def setValueIsDefault(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def toStringForDisplay(self, precision: Any) -> str: ...
    def updAs(self, prop: AbstractProperty) -> Any: ...
    def updValue(self, index: int) -> float: ...
    def updValueAsObject(self, index: int) -> Any: ...
    def writeToXMLParentElement(self, *args, **kwargs) -> Any: ...

class PropertyGroup:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aName: Any) -> None: ...
    @overload
    def __init__(self, aGroup: PropertyGroup) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def contains(self, aName: str) -> bool: ...
    def copyData(self, *args, **kwargs) -> Any: ...
    def get(self, aIndex: int) -> Any: ...
    def getName(self) -> str: ...
    def getPropertyIndex(self, aProperty: Any) -> int: ...
    def remove(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    thisown: Any

class PropertyHelper:
    def __init__(self) -> None: ...
    def appendValueBool(self, *args, **kwargs) -> Any: ...
    def appendValueDouble(self, *args, **kwargs) -> Any: ...
    def appendValueInt(self, *args, **kwargs) -> Any: ...
    def appendValueString(self, *args, **kwargs) -> Any: ...
    def getValueBool(self, p: AbstractProperty, index: int) -> bool: ...
    def getValueDouble(self, p: AbstractProperty, index: int) -> float: ...
    def getValueInt(self, p: AbstractProperty, index: int) -> int: ...
    def getValueString(self, p: AbstractProperty, index: int) -> str: ...
    def getValueStringArray(self, p: AbstractProperty) -> Any: ...
    def getValueTransform(self, p: AbstractProperty, index: int) -> float: ...
    def getValueVec3(self, p: AbstractProperty, index: int) -> float: ...
    def getValueVec6(self, p: AbstractProperty, index: int) -> float: ...
    def removeItem(self, *args, **kwargs) -> Any: ...
    def setValueBool(self, *args, **kwargs) -> Any: ...
    def setValueDouble(self, *args, **kwargs) -> Any: ...
    def setValueInt(self, *args, **kwargs) -> Any: ...
    def setValueString(self, *args, **kwargs) -> Any: ...
    def setValueStringArray(self, *args, **kwargs) -> Any: ...
    def setValueTransform(self, *args, **kwargs) -> Any: ...
    def setValueVec3(self, *args, **kwargs) -> Any: ...
    def setValueVec6(self, *args, **kwargs) -> Any: ...
    thisown: Any

class PropertyIntList:
    def __init__(self, *args, **kwargs) -> Any: ...
    def adoptAndAppendValue(self, value: Any) -> int: ...
    def appendValue(self, value: Any) -> int: ...
    @overload
    def appendValue(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def empty(self) -> bool: ...
    def equals(self, other: AbstractProperty) -> bool: ...
    def findIndex(self, value: Any) -> int: ...
    def findIndexForName(self, name: String) -> int: ...
    def getAs(self, prop: AbstractProperty) -> Any: ...
    def getComment(self) -> str: ...
    def getMaxListSize(self) -> int: ...
    def getMinListSize(self) -> int: ...
    def getName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, index: int) -> Any: ...
    def getValueAsObject(self, index: int) -> Any: ...
    def getValueIsDefault(self) -> bool: ...
    def isA(self, prop: AbstractProperty) -> bool: ...
    def isListProperty(self) -> bool: ...
    def isObjectProperty(self) -> bool: ...
    def isOneObjectProperty(self) -> bool: ...
    def isOneValueProperty(self) -> bool: ...
    def isOptionalProperty(self) -> bool: ...
    def isSamePropertyClass(self, other: AbstractProperty) -> bool: ...
    def isUnnamedProperty(self) -> bool: ...
    def readFromXMLParentElement(self, *args, **kwargs) -> Any: ...
    def removeValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAllowableListSize(self, *args, **kwargs) -> Any: ...
    def setComment(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValueAsObject(self, *args, **kwargs) -> Any: ...
    def setValueIsDefault(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def toStringForDisplay(self, precision: Any) -> str: ...
    def updAs(self, prop: AbstractProperty) -> Any: ...
    def updValue(self, index: int) -> int: ...
    def updValueAsObject(self, index: int) -> Any: ...
    def writeToXMLParentElement(self, *args, **kwargs) -> Any: ...

class PropertyObjectList:
    def __init__(self, *args, **kwargs) -> Any: ...
    def adoptAndAppendValue(self, value: Object) -> int: ...
    def appendValue(self, value: Object) -> int: ...
    @overload
    def appendValue(self, value: Object) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def empty(self) -> bool: ...
    def equals(self, other: AbstractProperty) -> bool: ...
    def findIndex(self, value: Object) -> int: ...
    def findIndexForName(self, name: String) -> int: ...
    def getAs(self, prop: AbstractProperty) -> Any: ...
    def getComment(self) -> str: ...
    def getMaxListSize(self) -> int: ...
    def getMinListSize(self) -> int: ...
    def getName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, index: int) -> Any: ...
    def getValueAsObject(self, index: int) -> Any: ...
    def getValueIsDefault(self) -> bool: ...
    def isA(self, prop: AbstractProperty) -> bool: ...
    def isListProperty(self) -> bool: ...
    def isObjectProperty(self) -> bool: ...
    def isOneObjectProperty(self) -> bool: ...
    def isOneValueProperty(self) -> bool: ...
    def isOptionalProperty(self) -> bool: ...
    def isSamePropertyClass(self, other: AbstractProperty) -> bool: ...
    def isUnnamedProperty(self) -> bool: ...
    def readFromXMLParentElement(self, *args, **kwargs) -> Any: ...
    def removeValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAllowableListSize(self, *args, **kwargs) -> Any: ...
    def setComment(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValueAsObject(self, *args, **kwargs) -> Any: ...
    def setValueIsDefault(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def toStringForDisplay(self, precision: Any) -> str: ...
    def updAs(self, prop: AbstractProperty) -> Any: ...
    def updValue(self, index: int) -> Any: ...
    def updValueAsObject(self, index: int) -> Any: ...
    def writeToXMLParentElement(self, *args, **kwargs) -> Any: ...

class PropertyStringList:
    def __init__(self, *args, **kwargs) -> Any: ...
    def adoptAndAppendValue(self, value: Any) -> int: ...
    def appendValue(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def empty(self) -> bool: ...
    def equals(self, other: AbstractProperty) -> bool: ...
    def findIndex(self, value: str) -> int: ...
    def findIndexForName(self, name: String) -> int: ...
    def getAs(self, prop: AbstractProperty) -> Any: ...
    def getComment(self) -> str: ...
    def getMaxListSize(self) -> int: ...
    def getMinListSize(self) -> int: ...
    def getName(self) -> str: ...
    def getTypeName(self) -> str: ...
    def getValue(self, index: int) -> Any: ...
    def getValueAsObject(self, index: int) -> Any: ...
    def getValueIsDefault(self) -> bool: ...
    def isA(self, prop: AbstractProperty) -> bool: ...
    def isListProperty(self) -> bool: ...
    def isObjectProperty(self) -> bool: ...
    def isOneObjectProperty(self) -> bool: ...
    def isOneValueProperty(self) -> bool: ...
    def isOptionalProperty(self) -> bool: ...
    def isSamePropertyClass(self, other: AbstractProperty) -> bool: ...
    def isUnnamedProperty(self) -> bool: ...
    def readFromXMLParentElement(self, *args, **kwargs) -> Any: ...
    def removeValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAllowableListSize(self, *args, **kwargs) -> Any: ...
    def setComment(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setValue(self, *args, **kwargs) -> Any: ...
    def setValueAsObject(self, *args, **kwargs) -> Any: ...
    def setValueIsDefault(self, *args, **kwargs) -> Any: ...
    def size(self) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def toStringForDisplay(self, precision: Any) -> str: ...
    def updAs(self, prop: AbstractProperty) -> Any: ...
    def updValue(self, index: int) -> str: ...
    def updValueAsObject(self, index: int) -> Any: ...
    def writeToXMLParentElement(self, *args, **kwargs) -> Any: ...

class ReporterDouble:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ReporterVec3:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ReporterVector:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class RowIndexOutOfRange:
    def __init__(self, *args, **kwargs) -> Any: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class RowLengthMismatch:
    def __init__(self, file: str, line: Any, func: str, filename: str, line_num: Any, expected: Any, received: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class STODataTypeNotSupported:
    def __init__(self, file: str, line: Any, func: str, datatype: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class STOFileAdapter:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: STOFileAdapter_) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class STOFileAdapterQuaternion:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: STOFileAdapter_) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class STOFileAdapterSpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: STOFileAdapter_) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class STOFileAdapterUnitVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: STOFileAdapter_) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class STOFileAdapterVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: STOFileAdapter_) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class STOFileAdapterVec6:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: STOFileAdapter_) -> None: ...
    def clone(self) -> Any: ...
    thisown: Any
    def write(self, *args, **kwargs) -> Any: ...

class Scale:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aMarker: Scale) -> None: ...
    @overload
    def __init__(self, scaleFileName: str) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getApply(self) -> bool: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getScaleFactors(self) -> Any: ...
    def getSegmentName(self) -> str: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setApply(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setScaleFactors(self, *args, **kwargs) -> Any: ...
    def setSegmentName(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ScaleSet:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, scalesFileName: str) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: Scale) -> bool: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: Scale, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: Scale) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: Scale) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: Scale, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetFunctions:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(self, aSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, aObject: Function) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: Function) -> bool: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: Function, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: Function) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: Function) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: Function, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetScales:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(self, aSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, aObject: Scale) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: Scale) -> bool: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: Scale, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: Scale) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: Scale) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: Scale, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SimmSpline:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aN: int, aTimes: Any, aValues: Any, aName: str) -> None: ...
    @overload
    def __init__(self, aSpline: SimmSpline) -> None: ...
    def addPoint(self, aX: float, aY: float) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def deletePoint(self, aIndex: int) -> bool: ...
    def deletePoints(self, indices: Array) -> bool: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getNumberOfPoints(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getX(self) -> Any: ...
    @overload
    def getX(self, aIndex: int) -> float: ...
    def getXValues(self) -> Any: ...
    def getY(self) -> Any: ...
    @overload
    def getY(self, aIndex: int) -> float: ...
    def getYValues(self) -> Any: ...
    def getZ(self, aIndex: int) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Sine:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, amplitude: float, omega: float, phase: float, offset: float) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SmoothSegmentedFunction:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: SmoothSegmentedFunction) -> None: ...
    @overload
    def __init__(self, arg2: SmoothSegmentedFunction) -> None: ...
    def calcDerivative(self, x: float, order: int) -> float: ...
    def calcIntegral(self, x: float) -> float: ...
    def calcSampledMuscleCurve(self, maxOrder: int, domainMin: float, domainMax: float) -> Any: ...
    def calcValue(self, x: float) -> float: ...
    def calcValueAndFirstDerivative(self, x: float) -> SmoothSegmentedFunction: ...
    def getCurveDomain(self) -> Any: ...
    def getName(self) -> str: ...
    def isIntegralAvailable(self) -> bool: ...
    def isIntegralComputedLeftToRight(self) -> bool: ...
    def printMuscleCurveToCSVFile(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    thisown: Any

class SmoothSegmentedFunctionFactory:
    def __init__(self) -> None: ...
    def createFiberActiveForceLengthCurve(self, lce0: float, lce1: float, lce2: float, lce3: float, minActiveForceLengthValue: float, plateauSlope: float, curviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    def createFiberCompressiveForceCosPennationCurve(self, cosPhi0: float, kiso: float, curviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    def createFiberCompressiveForceLengthCurve(self, l0: float, kiso: float, curviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    def createFiberCompressiveForcePennationCurve(self, phi0: float, kiso: float, curviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    def createFiberForceLengthCurve(self, eZero: float, eIso: float, kLow: float, kIso: float, curviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    def createFiberForceVelocityCurve(self, fmaxE: float, dydxC: float, dydxNearC: float, dydxIso: float, dydxE: float, dydxNearE: float, concCurviness: float, eccCurviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    def createFiberForceVelocityInverseCurve(self, fmaxE: float, dydxC: float, dydxNearC: float, dydxIso: float, dydxE: float, dydxNearE: float, concCurviness: float, eccCurviness: float, computeIntegral: bool, muscleName: str) -> Any: ...
    def createTendonForceLengthCurve(self, eIso: float, kIso: float, fToe: float, curviness: float, computeIntegral: bool, curveName: str) -> Any: ...
    thisown: Any

class SocketNotFound:
    def __init__(self, file: str, line: Any, methodName: str, obj: Object, socketName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class StateVector:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: StateVector) -> None: ...
    @overload
    def __init__(self, aT: float) -> None: ...
    @overload
    def __init__(self, aT: float, data: Vector_) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def divide(self, *args, **kwargs) -> Any: ...
    def getData(self) -> Any: ...
    def getDataValue(self, aIndex: int, rValue: Any) -> int: ...
    def getSize(self) -> int: ...
    def getTime(self) -> float: ...
    def multiply(self, *args, **kwargs) -> Any: ...
    def scaleTime(self, *args, **kwargs) -> Any: ...
    def setDataValue(self, *args, **kwargs) -> Any: ...
    def setStates(self, *args, **kwargs) -> Any: ...
    def setTime(self, *args, **kwargs) -> Any: ...
    def shiftTime(self, *args, **kwargs) -> Any: ...
    def subtract(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdMapStringAbstractDataTable:
    def __init__(self, other: Any) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: AbstractDataTable) -> None: ...
    def asdict(self) -> Any: ...
    def begin(self) -> AbstractDataTable: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def count(self, x: AbstractDataTable) -> AbstractDataTable: ...
    def empty(self) -> bool: ...
    def end(self) -> AbstractDataTable: ...
    def erase(self, x: AbstractDataTable, position: AbstractDataTable, first: AbstractDataTable, last: AbstractDataTable) -> AbstractDataTable: ...
    def find(self, x: AbstractDataTable) -> AbstractDataTable: ...
    def get_allocator(self) -> AbstractDataTable: ...
    def has_key(self, key: AbstractDataTable) -> bool: ...
    def items(self) -> Any: ...
    def iterator(self) -> Any: ...
    def iteritems(self, *args, **kwargs) -> Any: ...
    def iterkeys(self, *args, **kwargs) -> Any: ...
    def itervalues(self, *args, **kwargs) -> Any: ...
    def key_iterator(self) -> Any: ...
    def keys(self) -> Any: ...
    def lower_bound(self, x: AbstractDataTable) -> AbstractDataTable: ...
    def rbegin(self) -> AbstractDataTable: ...
    def rend(self) -> AbstractDataTable: ...
    def size(self) -> AbstractDataTable: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def upper_bound(self, x: AbstractDataTable) -> AbstractDataTable: ...
    def value_iterator(self) -> Any: ...
    def values(self) -> Any: ...

class StdMapStringDataAdapter:
    def __init__(self, other: Any) -> None: ...
    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: DataAdapter) -> None: ...
    def asdict(self) -> Any: ...
    def begin(self) -> DataAdapter: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def count(self, x: DataAdapter) -> DataAdapter: ...
    def empty(self) -> bool: ...
    def end(self) -> DataAdapter: ...
    def erase(self, x: DataAdapter, position: DataAdapter, first: DataAdapter, last: DataAdapter) -> DataAdapter: ...
    def find(self, x: DataAdapter) -> DataAdapter: ...
    def get_allocator(self) -> DataAdapter: ...
    def has_key(self, key: DataAdapter) -> bool: ...
    def items(self) -> Any: ...
    def iterator(self) -> Any: ...
    def iteritems(self, *args, **kwargs) -> Any: ...
    def iterkeys(self, *args, **kwargs) -> Any: ...
    def itervalues(self, *args, **kwargs) -> Any: ...
    def key_iterator(self) -> Any: ...
    def keys(self) -> Any: ...
    def lower_bound(self, x: DataAdapter) -> DataAdapter: ...
    def rbegin(self) -> DataAdapter: ...
    def rend(self) -> DataAdapter: ...
    def size(self) -> DataAdapter: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def upper_bound(self, x: DataAdapter) -> DataAdapter: ...
    def value_iterator(self) -> Any: ...
    def values(self) -> Any: ...

class StdVectorEvent:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Event) -> None: ...
    @overload
    def __init__(self, size: Event) -> None: ...
    @overload
    def __init__(self, size: Event, value: Event) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Event: ...
    def capacity(self) -> Event: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Event: ...
    def erase(self, pos: Event) -> Event: ...
    @overload
    def erase(self, first: Event, last: Event) -> Event: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Event: ...
    def insert(self, pos: Event, x: Event, n: Event) -> Event: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Event: ...
    def rend(self) -> Event: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Event: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StdVectorMatrix:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, other: Matrix_) -> None: ...
    @overload
    def __init__(self, size: Matrix_) -> None: ...
    @overload
    def __init__(self, size: Matrix_, value: Matrix_) -> None: ...
    def append(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def back(self) -> Any: ...
    def begin(self) -> Matrix_: ...
    def capacity(self) -> Matrix_: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def empty(self) -> bool: ...
    def end(self) -> Matrix_: ...
    def erase(self, pos: Matrix_) -> Matrix_: ...
    @overload
    def erase(self, first: Matrix_, last: Matrix_) -> Matrix_: ...
    def front(self) -> Any: ...
    def get_allocator(self) -> Matrix_: ...
    def insert(self, pos: Matrix_, x: Matrix_, n: Matrix_) -> Matrix_: ...
    def iterator(self) -> Any: ...
    def pop(self) -> Any: ...
    def pop_back(self, *args, **kwargs) -> Any: ...
    def push_back(self, *args, **kwargs) -> Any: ...
    def rbegin(self) -> Matrix_: ...
    def rend(self) -> Matrix_: ...
    def reserve(self, *args, **kwargs) -> Any: ...
    def resize(self, *args, **kwargs) -> Any: ...
    def size(self) -> Matrix_: ...
    def swap(self, *args, **kwargs) -> Any: ...
    thisown: Any

class StepFunction:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, startTime: float, endTime: float, startValue: float, endValue: float) -> None: ...
    @overload
    def __init__(self, aSpline: StepFunction) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcDerivative(self, derivComponents: Any, x: Any) -> float: ...
    def calcValue(self, x: Any) -> float: ...
    def clone(self) -> Any: ...
    def createSimTKFunction(self) -> Function: ...
    def dump(self) -> str: ...
    def getArgumentSize(self) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEndTime(self) -> float: ...
    def getEndValue(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getMaxDerivativeOrder(self) -> int: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getStartTime(self) -> float: ...
    def getStartValue(self) -> float: ...
    def hasProperty(self, name: str) -> bool: ...
    def init(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeFunctionOfType(self, aFunction: Function, aNewTypeName: str) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setEndTime(self, *args, **kwargs) -> Any: ...
    def setEndValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStartTime(self, *args, **kwargs) -> Any: ...
    def setStartValue(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Storage:
    DEFAULT_HEADER_SEPARATOR: Any
    DEFAULT_HEADER_TOKEN: Any
    MAX_RESAMPLE_SIZE: Any
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, aCapacity: int, aName: str) -> None: ...
    @overload
    def __init__(self, aFileName: str, readHeadersOnly: bool) -> None: ...
    @overload
    def __init__(self, aStorage: Storage, aCopyData: bool) -> None: ...
    @overload
    def __init__(self, aStorage: Storage, aStateIndex: int, aN: int, aDelimiter: str) -> None: ...
    def add(self, *args, **kwargs) -> Any: ...
    def addKeyValuePair(self, *args, **kwargs) -> Any: ...
    def addToRdStorage(self, *args, **kwargs) -> Any: ...
    def append(self, aVec: StateVector, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    @overload
    def append(self, aT: float, aN: int, aY: Any, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aT: float, aY: Any, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aT: float, aY: Array, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aT: float, aY: Vec3, aCheckForDuplicateTime: bool) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def compareColumn(self, aOtherStorage: Storage, aColumnName: str, startTime: float, endTime: float) -> float: ...
    def compareColumnRMS(self, aOtherStorage: Storage, aColumnName: str, startTime: float, endTime: float) -> float: ...
    def compareWithStandard(self, *args, **kwargs) -> Any: ...
    def computeArea(self, aN: int, aArea: Any) -> int: ...
    @overload
    def computeArea(self, aTI: float, aTF: float, aN: int, aArea: Any) -> int: ...
    def computeAverage(self, aN: int, aAve: Any) -> int: ...
    @overload
    def computeAverage(self, aTI: float, aTF: float, aN: int, aAve: Any) -> int: ...
    def crop(self, *args, **kwargs) -> Any: ...
    def divide(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def exportToTable(self) -> Any: ...
    def findFrameRange(self, *args, **kwargs) -> Any: ...
    def findIndex(self, aT: float) -> int: ...
    @overload
    def findIndex(self, aI: int, aT: float) -> int: ...
    def getAuthors(self) -> str: ...
    def getCapacityIncrement(self) -> int: ...
    def getClassName(self) -> str: ...
    def getColumnIndicesForIdentifier(self, identifier: str) -> Any: ...
    def getColumnLabels(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getData(self, aTimeIndex: int, aStateIndex: int, rValue: Any) -> int: ...
    @overload
    def getData(self, aTimeIndex: int, aStateIndex: int, aN: int, rData: Any) -> int: ...
    def getDataAtTime(self, aTime: float, aN: int, rData: Any) -> int: ...
    @overload
    def getDataAtTime(self, aTime: float, aN: int, rData: Any) -> int: ...
    @overload
    def getDataAtTime(self, aTime: float, aN: int, rData: Array) -> int: ...
    @overload
    def getDataAtTime(self, aTime: float, aN: int, v: Any) -> int: ...
    def getDataColumn(self, aStateIndex: int, rData: Any) -> int: ...
    @overload
    def getDataColumn(self, aStateIndex: int, rData: Array) -> int: ...
    @overload
    def getDataColumn(self, columnName: str, rData: Any, columnName: str, data: Array, startTime: float) -> int: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFileVersion(self) -> Any: ...
    def getFirstTime(self) -> float: ...
    def getHeaderToken(self) -> str: ...
    def getInlined(self) -> bool: ...
    def getLastStateVector(self) -> Any: ...
    def getLastTime(self) -> float: ...
    def getLatestVersion(self) -> Any: ...
    def getMinTimeStep(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getSmallestNumberOfStates(self) -> int: ...
    def getStateIndex(self, aColumnName: str, startIndex: int) -> int: ...
    def getStateVector(self, aTimeIndex: int) -> Any: ...
    def getStepInterval(self) -> int: ...
    def getTime(self, aTimeIndex: int, rTime: Any, aStateIndex: int) -> bool: ...
    def getTimeColumn(self, rTimes: Any, aStateIndex: int) -> int: ...
    @overload
    def getTimeColumn(self, rTimes: Array, aStateIndex: int) -> int: ...
    def getTimeColumnWithStartTime(self, *args, **kwargs) -> Any: ...
    def getValueForKey(self, *args, **kwargs) -> Any: ...
    def getWriteSIMMHeader(self) -> bool: ...
    def hasKey(self, aKey: str) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def integrate(self, aI1: int, aI2: int) -> Any: ...
    @overload
    def integrate(self, aT1: float, aT2: float) -> Any: ...
    def interpolateAt(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isInDegrees(self) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def lowpassFIR(self, *args, **kwargs) -> Any: ...
    def lowpassIIR(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def makeStorageLabelsUnique(self) -> bool: ...
    def multiply(self, *args, **kwargs) -> Any: ...
    def multiplyColumn(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def pad(self, *args, **kwargs) -> Any: ...
    def printResult(self, *args, **kwargs) -> Any: ...
    def printToFile(self, aFileName: str, aMode: str, aComment: str) -> bool: ...
    @overload
    def printToFile(self, aFileName: str, aDT: float, aMode: str) -> int: ...
    def printToXML(self, *args, **kwargs) -> Any: ...
    def purge(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resample(self, aDT: float, aDegree: int) -> float: ...
    def resampleLinear(self, aDT: float) -> float: ...
    def reset(self, aIndex: int) -> int: ...
    @overload
    def reset(self, aTime: float) -> int: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scaleTime(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCapacityIncrement(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setDataColumn(self, *args, **kwargs) -> Any: ...
    def setDataColumnToFixedValue(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setHeaderToken(self, *args, **kwargs) -> Any: ...
    def setInDegrees(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOutputFileName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStepInterval(self, *args, **kwargs) -> Any: ...
    def setWriteSIMMHeader(self, *args, **kwargs) -> Any: ...
    def shiftTime(self, *args, **kwargs) -> Any: ...
    def smoothSpline(self, *args, **kwargs) -> Any: ...
    def storageLabelsAreUnique(self) -> bool: ...
    def store(self, aStep: int, aT: float, aN: int, aY: Any) -> int: ...
    def subtract(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class StorageInterface:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def append(self, aVec: StateVector, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aArray: Array) -> int: ...
    @overload
    def append(self, aT: float, aN: int, aY: Any, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aT: float, aY: Any, aCheckForDuplicateTime: bool) -> int: ...
    @overload
    def append(self, aT: float, aY: Vec3, aCheckForDuplicateTime: bool) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def findIndex(self, aT: float) -> int: ...
    @overload
    def findIndex(self, aI: int, aT: float) -> int: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDataAtTime(self, aTime: float, aN: int, rData: Array) -> int: ...
    def getDataColumn(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFirstTime(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getLastStateVector(self) -> Any: ...
    def getLastTime(self) -> float: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def getStateVector(self, aTimeIndex: int) -> Any: ...
    def getTimeColumn(self, rTimes: Array, aStateIndex: int) -> int: ...
    def getTimeColumnWithStartTime(self, *args, **kwargs) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOutputFileName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def store(self, aStep: int, aT: float, aN: int, aY: Any) -> int: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class StringLogSink:
    def __init__(self) -> None: ...
    def clear(self, *args, **kwargs) -> Any: ...
    def flushImpl(self, *args, **kwargs) -> Any: ...
    def getString(self) -> str: ...
    def sinkImpl(self, *args, **kwargs) -> Any: ...
    thisown: Any

class SubcomponentsWithDuplicateName:
    def __init__(self, file: str, line: Any, methodName: str, thisName: str, duplicateName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class SwigPyIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def advance(self, n: Any) -> Any: ...
    def copy(self) -> Any: ...
    def decr(self, n: Any) -> Any: ...
    def distance(self, x: Any) -> Any: ...
    def equal(self, x: Any) -> bool: ...
    def incr(self, n: Any) -> Any: ...
    def next(self) -> Any: ...
    def previous(self) -> Any: ...
    thisown: Any
    def value(self) -> Any: ...

class TRCFileAdapter:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TRCFileAdapter) -> None: ...
    def clone(self) -> Any: ...
    def createAdapterFromExtension(self, fileName: str) -> DataAdapter: ...
    def findExtension(self, filename: str) -> str: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def getNextLine(self, stream: Any, delims: str) -> Any: ...
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    thisown: Any
    def tokenize(self, str: str, delims: str) -> Any: ...
    def write(self, *args, **kwargs) -> Any: ...
    def writeFile(self, *args, **kwargs) -> Any: ...

class TableMissingHeader:
    def __init__(self, file: str, line: Any, func: str, message: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class TableNotFoundException:
    def __init__(self, name: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class TableReporter:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearTable(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTable(self) -> Any: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableReporterSpatialVec:
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearTable(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getTable(self) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    thisown: Any

class TableReporterVec3:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearTable(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTable(self) -> Any: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableReporterVector:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_input_inputs: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToReport(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_report_time_interval(self, value: Any) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clearTable(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def connectInput_inputs(self, *args, **kwargs) -> Any: ...
    def constructProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def copyProperty_report_time_interval(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTable(self) -> Any: ...
    def get_report_time_interval(self, i: int) -> Any: ...
    @overload
    def get_report_time_interval(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def report(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_report_time_interval(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_report_time_interval(self, i: int) -> float: ...
    @overload
    def upd_report_time_interval(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableSource:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TableSource_) -> None: ...
    @overload
    def __init__(self, table: TableSource_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_filename(self, value: str) -> int: ...
    def append_tablename(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_filename(self, *args, **kwargs) -> Any: ...
    def constructProperty_tablename(self, *args, **kwargs) -> Any: ...
    def copyProperty_filename(self, *args, **kwargs) -> Any: ...
    def copyProperty_tablename(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTable(self) -> Any: ...
    def get_filename(self, i: int) -> Any: ...
    @overload
    def get_filename(self) -> str: ...
    def get_tablename(self, i: int) -> Any: ...
    @overload
    def get_tablename(self) -> str: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTable(self, *args, **kwargs) -> Any: ...
    def set_filename(self, *args, **kwargs) -> Any: ...
    def set_tablename(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_filename(self, i: int) -> str: ...
    @overload
    def upd_filename(self) -> Any: ...
    def upd_tablename(self, i: int) -> str: ...
    @overload
    def upd_tablename(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableSourceVec3:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TableSource_) -> None: ...
    @overload
    def __init__(self, table: TableSource_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_filename(self, value: str) -> int: ...
    def append_tablename(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_filename(self, *args, **kwargs) -> Any: ...
    def constructProperty_tablename(self, *args, **kwargs) -> Any: ...
    def copyProperty_filename(self, *args, **kwargs) -> Any: ...
    def copyProperty_tablename(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTable(self) -> Any: ...
    def get_filename(self, i: int) -> Any: ...
    @overload
    def get_filename(self) -> str: ...
    def get_tablename(self, i: int) -> Any: ...
    @overload
    def get_tablename(self) -> str: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTable(self, *args, **kwargs) -> Any: ...
    def set_filename(self, *args, **kwargs) -> Any: ...
    def set_tablename(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_filename(self, i: int) -> str: ...
    @overload
    def upd_filename(self) -> Any: ...
    def upd_tablename(self, i: int) -> str: ...
    @overload
    def upd_tablename(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class TableUtilities:
    def __init__(self) -> None: ...
    def checkNonUniqueLabels(self, *args, **kwargs) -> Any: ...
    def convertRotationsToEulerAngles(self, rotTable: TimeSeriesTable_) -> Any: ...
    def filterLowpass(self, *args, **kwargs) -> Any: ...
    def findStateLabelIndex(self, labels: Array, desired: str) -> int: ...
    @overload
    def findStateLabelIndex(self, labels: Any, desired: str) -> int: ...
    def isInDegrees(self, table: TimeSeriesTable) -> bool: ...
    def pad(self, *args, **kwargs) -> Any: ...
    thisown: Any

class TimeColumnNotIncreasing:
    def __init__(self, file: str, line: Any, func: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class TimeOutOfRange:
    def __init__(self, file: str, line: Any, func: str, time: Any, min: Any, max: Any) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class TimeSeriesTable:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> Any: ...
    def clone(self) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def packQuaternion(self) -> Any: ...
    @overload
    def packQuaternion(self, suffixes: Any) -> Any: ...
    def packRotation(self) -> Any: ...
    @overload
    def packRotation(self, suffixes: Any) -> Any: ...
    def packSpatialVec(self) -> Any: ...
    @overload
    def packSpatialVec(self, suffixes: Any) -> Any: ...
    def packUnitVec3(self) -> Any: ...
    @overload
    def packUnitVec3(self, suffixes: Any) -> Any: ...
    def packVec3(self) -> Any: ...
    @overload
    def packVec3(self, suffixes: Any) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class TimeSeriesTableMat33:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class TimeSeriesTableQuaternion:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class TimeSeriesTableRotation:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class TimeSeriesTableSpatialVec:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> TimeSeriesTable_: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> TimeSeriesTable_: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> DataTable_: ...
    def getRowAtIndex(self, index: Any) -> DataTable_: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> TimeSeriesTable_: ...
    def updRow(self, ind: Any) -> DataTable_: ...
    def updRowAtIndex(self, index: Any) -> DataTable_: ...

class TimeSeriesTableUnitVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> TimeSeriesTable_: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def getDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> DataTable_: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> TimeSeriesTable_: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> DataTable_: ...
    def getRowAtIndex(self, index: Any) -> DataTable_: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> DataTable_: ...
    def updDependentColumnAtIndex(self, index: Any) -> DataTable_: ...
    def updMatrix(self) -> DataTable_: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> DataTable_: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> TimeSeriesTable_: ...
    def updRow(self, ind: Any) -> DataTable_: ...
    def updRowAtIndex(self, index: Any) -> DataTable_: ...

class TimeSeriesTableVec3:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class TimeSeriesTableVec6:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: TimeSeriesTable_) -> None: ...
    @overload
    def __init__(self, indVec: Any, depData: Matrix_, labels: Any) -> None: ...
    @overload
    def __init__(self, indVec: Any) -> None: ...
    @overload
    def __init__(self, datatable: DataTable_) -> None: ...
    @overload
    def __init__(self, filename: str) -> None: ...
    @overload
    def __init__(self, filename: str, tablename: str) -> None: ...
    def addTableMetaDataString(self, *args, **kwargs) -> Any: ...
    def appendColumn(self, *args, **kwargs) -> Any: ...
    def appendRow(self, *args, **kwargs) -> Any: ...
    def averageRow(self, beginTime: Any, endTime: Any) -> Any: ...
    def clone(self) -> Any: ...
    def flatten(self) -> Any: ...
    @overload
    def flatten(self, suffixes: Any) -> Any: ...
    def getColumnIndex(self, columnLabel: str) -> Any: ...
    def getColumnLabel(self, columnIndex: Any) -> str: ...
    def getColumnLabels(self) -> Any: ...
    def getDependentColumn(self, columnLabel: str) -> Any: ...
    def getDependentColumnAtIndex(self, index: Any) -> Any: ...
    def getDependentsMetaDataString(self, key: str) -> Any: ...
    def getIndependentColumn(self) -> Any: ...
    def getMatrix(self) -> Any: ...
    def getMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def getNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNearestRowIndexForTime(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def getNumColumns(self) -> Any: ...
    def getNumRows(self) -> Any: ...
    def getRow(self, ind: Any) -> Any: ...
    def getRowAtIndex(self, index: Any) -> Any: ...
    def getRowIndexAfterTime(self, time: Any) -> Any: ...
    def getRowIndexBeforeTime(self, time: Any) -> Any: ...
    def getTableMetaDataAsString(self, key: str) -> str: ...
    def getTableMetaDataKeys(self) -> Any: ...
    def getTableMetaDataString(self, key: str) -> str: ...
    def getTableMetaDataVectorMatrix(self, key: str) -> Any: ...
    def getTableMetaDataVectorUnsigned(self, key: str) -> Any: ...
    def hasColumn(self, columnLabel: str) -> bool: ...
    @overload
    def hasColumn(self, columnIndex: Any) -> bool: ...
    def hasColumnLabels(self) -> bool: ...
    def hasTableMetaDataKey(self, key: str) -> bool: ...
    def numComponentsPerElement(self) -> Any: ...
    def removeColumn(self, *args, **kwargs) -> Any: ...
    def removeColumnAtIndex(self, *args, **kwargs) -> Any: ...
    def removeDependentsMetaDataForKey(self, *args, **kwargs) -> Any: ...
    def removeRow(self, *args, **kwargs) -> Any: ...
    def removeRowAtIndex(self, *args, **kwargs) -> Any: ...
    def removeTableMetaDataKey(self, *args, **kwargs) -> Any: ...
    def setColumnLabel(self, *args, **kwargs) -> Any: ...
    def setColumnLabels(self, *args, **kwargs) -> Any: ...
    def setIndependentValueAtIndex(self, *args, **kwargs) -> Any: ...
    def setRow(self, *args, **kwargs) -> Any: ...
    def setRowAtIndex(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self, rows: Any, columnLabels: Any, withMetaData: Any, splitSize: Any, maxWidth: Any, precision: Any) -> str: ...
    def trim(self, *args, **kwargs) -> Any: ...
    def trimFrom(self, *args, **kwargs) -> Any: ...
    def trimTo(self, *args, **kwargs) -> Any: ...
    def trimToIndices(self, *args, **kwargs) -> Any: ...
    def updDependentColumn(self, columnLabel: str) -> Any: ...
    def updDependentColumnAtIndex(self, index: Any) -> Any: ...
    def updMatrix(self) -> Any: ...
    def updMatrixBlock(self, rowStart: Any, columnStart: Any, numRows: Any, numColumns: Any) -> Any: ...
    def updNearestRow(self, time: Any, restrictToTimeRange: Any) -> Any: ...
    def updRow(self, ind: Any) -> Any: ...
    def updRowAtIndex(self, index: Any) -> Any: ...

class TimestampGreaterThanEqualToNext:
    def __init__(self, file: str, line: Any, func: str, rowIndex: Any, new_timestamp: float, next_timestamp: float) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class TimestampLessThanEqualToPrevious:
    def __init__(self, file: str, line: Any, func: str, rowIndex: Any, new_timestamp: float, prev_timestamp: float) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class UnexpectedColumnLabel:
    def __init__(self, file: str, line: Any, func: str, filename: str, expected: str, received: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class UnexpectedMetaDataKey:
    def __init__(self, file: str, line: Any, func: str, filename: str, expected: str, received: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class Units:
    Centimeters: Any
    Degrees: Any
    Meters: Any
    Millimeters: Any
    Milliseconds: Any
    Newtons: Any
    Radians: Any
    Seconds: Any
    UnknownUnits: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aString: Any) -> None: ...
    @overload
    def __init__(self, aType: Units) -> None: ...
    def convertTo(self, aType: Units, aValue: float) -> float: ...
    @overload
    def convertTo(self, aType: Units) -> float: ...
    @overload
    def convertTo(self, aUnit: Units) -> float: ...
    def getAbbreviation(self) -> str: ...
    def getLabel(self) -> str: ...
    def getType(self) -> Units: ...
    thisown: Any

class VariableNotFound:
    def __init__(self, file: str, line: Any, methodName: str, componentName: str, varName: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class VariableOwnerNotFoundOnSpecifiedPath:
    def __init__(self, file: str, line: Any, methodName: str, componentName: str, varName: str, ownerPath: str) -> None: ...
    def getMessage(self) -> str: ...
    def setMessage(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def what(self) -> str: ...

class XYFunctionInterface:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, f: Function) -> None: ...
    def addPoint(self, aX: float, aY: float) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def deletePoint(self, aIndex: int) -> bool: ...
    def deletePoints(self, indices: Array) -> bool: ...
    def deleteXYPointArray(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getConstant(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getFunctionType(self) -> XYFunctionInterface: ...
    def getGCVSpline(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getLinearFunction(self) -> Any: ...
    def getMultiStepFunction(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getNumberOfPoints(self) -> int: ...
    def getPiecewiseLinearFunction(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getScale(self) -> float: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSimmSpline(self) -> Any: ...
    def getStepFunction(self) -> Any: ...
    def getX(self, aIndex: int) -> float: ...
    def getXValues(self) -> Any: ...
    def getY(self, aIndex: int) -> float: ...
    def getYValues(self) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def isSpecifiedByControlPoints(self) -> bool: ...
    def isXYFunction(self, f: Function) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def renderAsLineSegments(self, aIndex: int) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setX(self, *args, **kwargs) -> Any: ...
    def setY(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    typeConstant: Any
    typeGCVSpline: Any
    typeLinearFunction: Any
    typeNatCubicSpline: Any
    typePiecewiseConstantFunction: Any
    typePiecewiseLinearFunction: Any
    typeStepFunction: Any
    typeUndefined: Any
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class XYPoint:
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aX: float, aY: float) -> None: ...
    thisown: Any

class XsensDataReader:
    AngularVelocity: Any
    LinearAccelerations: Any
    MagneticHeading: Any
    Orientations: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, settings: XsensDataReaderSettings) -> None: ...
    def clone(self) -> Any: ...
    def getAngularVelocityTable(self, tables: DataAdapter) -> Any: ...
    def getDataTable(self, tables: DataAdapter, tableName: Any) -> AbstractDataTable: ...
    def getLinearAccelerationsTable(self, tables: DataAdapter) -> Any: ...
    def getMagneticHeadingTable(self, tables: DataAdapter) -> Any: ...
    def getOrientationsTable(self, tables: DataAdapter) -> Any: ...
    def getSettings(self) -> Any: ...
    def read(self, dataSourceSpecification: str) -> Any: ...
    def registerDataAdapter(self, identifier: str, adapter: DataAdapter) -> bool: ...
    thisown: Any
    def updSettings(self) -> Any: ...

class XsensDataReaderSettings:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, xmlFile: str) -> None: ...
    def append_ExperimentalSensors(self, value: ExperimentalSensor) -> int: ...
    def append_data_folder(self, value: str) -> int: ...
    def append_sampling_rate(self, value: Any) -> int: ...
    def append_trial_extension(self, value: str) -> int: ...
    def append_trial_prefix(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_ExperimentalSensors(self, *args, **kwargs) -> Any: ...
    def constructProperty_data_folder(self, *args, **kwargs) -> Any: ...
    def constructProperty_sampling_rate(self, *args, **kwargs) -> Any: ...
    def constructProperty_trial_extension(self, *args, **kwargs) -> Any: ...
    def constructProperty_trial_prefix(self, *args, **kwargs) -> Any: ...
    def copyProperty_ExperimentalSensors(self, *args, **kwargs) -> Any: ...
    def copyProperty_data_folder(self, *args, **kwargs) -> Any: ...
    def copyProperty_sampling_rate(self, *args, **kwargs) -> Any: ...
    def copyProperty_trial_extension(self, *args, **kwargs) -> Any: ...
    def copyProperty_trial_prefix(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_ExperimentalSensors(self, i: int) -> Any: ...
    def get_data_folder(self, i: int) -> Any: ...
    @overload
    def get_data_folder(self) -> str: ...
    def get_sampling_rate(self, i: int) -> Any: ...
    @overload
    def get_sampling_rate(self) -> Any: ...
    def get_trial_extension(self, i: int) -> Any: ...
    @overload
    def get_trial_extension(self) -> str: ...
    def get_trial_prefix(self, i: int) -> Any: ...
    @overload
    def get_trial_prefix(self) -> str: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_ExperimentalSensors(self, *args, **kwargs) -> Any: ...
    def set_data_folder(self, *args, **kwargs) -> Any: ...
    def set_sampling_rate(self, *args, **kwargs) -> Any: ...
    def set_trial_extension(self, *args, **kwargs) -> Any: ...
    def set_trial_prefix(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_ExperimentalSensors(self, i: int) -> Any: ...
    def upd_data_folder(self, i: int) -> str: ...
    @overload
    def upd_data_folder(self) -> Any: ...
    def upd_sampling_rate(self, i: int) -> float: ...
    @overload
    def upd_sampling_rate(self) -> Any: ...
    def upd_trial_extension(self, i: int) -> str: ...
    @overload
    def upd_trial_extension(self) -> Any: ...
    def upd_trial_prefix(self, i: int) -> str: ...
    @overload
    def upd_trial_prefix(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

