from typing import Any, overload

class ActivationCoordinateActuator:
    def CreateForceSetOfCoordinateActuatorsForModel(self, s: State, aModel: Model, aOptimalForce: float, aIncludeLockedAndConstrainedCoordinates: bool) -> Any: ...
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, coordinateName: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_activation_time_constant(self, value: Any) -> int: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_coordinate(self, value: str) -> int: ...
    def append_default_activation(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getBoundsActivation(self, arg2: State) -> Any: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCoordinate(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_activation_time_constant(self, i: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_coordinate(self, i: int) -> Any: ...
    @overload
    def get_coordinate(self) -> str: ...
    def get_default_activation(self, i: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isCoordinateValid(self) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setCoordinate(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_coordinate(self, *args, **kwargs) -> Any: ...
    def set_default_activation(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_activation_time_constant(self, i: int) -> float: ...
    @overload
    def upd_activation_time_constant(self) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_coordinate(self, i: int) -> str: ...
    @overload
    def upd_coordinate(self) -> Any: ...
    def upd_default_activation(self, i: int) -> float: ...
    @overload
    def upd_default_activation(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class BodyActuator:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    PropertyIndex_socket_body: Any
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, body: Body, point: Vec3, pointIsGlobal: bool, spatialForceIsGlobal: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_point(self, value: Vec3) -> int: ...
    def append_point_is_global(self, value: Any) -> int: ...
    def append_spatial_force_is_global(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectSocket_body(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_point(self, *args, **kwargs) -> Any: ...
    def constructProperty_point_is_global(self, *args, **kwargs) -> Any: ...
    def constructProperty_spatial_force_is_global(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_point(self, *args, **kwargs) -> Any: ...
    def copyProperty_point_is_global(self, *args, **kwargs) -> Any: ...
    def copyProperty_spatial_force_is_global(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getBody(self) -> Any: ...
    def getBodyName(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPoint(self) -> Any: ...
    def getPointIsGlobal(self) -> bool: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpatialForceIsGlobal(self) -> bool: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_point(self, i: int) -> Any: ...
    @overload
    def get_point(self) -> Any: ...
    def get_point_is_global(self, i: int) -> Any: ...
    @overload
    def get_point_is_global(self) -> Any: ...
    def get_spatial_force_is_global(self, i: int) -> Any: ...
    @overload
    def get_spatial_force_is_global(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setBody(self, *args, **kwargs) -> Any: ...
    def setBodyName(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPoint(self, *args, **kwargs) -> Any: ...
    def setPointForceIsGlobal(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSpatialForceIsGlobal(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_point(self, *args, **kwargs) -> Any: ...
    def set_point_is_global(self, *args, **kwargs) -> Any: ...
    def set_spatial_force_is_global(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_point(self, i: int) -> Any: ...
    @overload
    def upd_point(self) -> Any: ...
    def upd_point_is_global(self, i: int) -> bool: ...
    @overload
    def upd_point_is_global(self) -> Any: ...
    def upd_spatial_force_is_global(self, i: int) -> bool: ...
    @overload
    def upd_spatial_force_is_global(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ClutchedPathSpring:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, stiffness: float, dissipation: float, relaxationTau: float, stretch0: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_dissipation(self, value: Any) -> int: ...
    def append_initial_stretch(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_path(self, value: AbstractGeometryPath) -> int: ...
    def append_relaxation_time_constant(self, value: Any) -> int: ...
    def append_stiffness(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(self, s: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(self, s: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_dissipation(self, *args, **kwargs) -> Any: ...
    def constructProperty_initial_stretch(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_relaxation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_dissipation(self, *args, **kwargs) -> Any: ...
    def copyProperty_initial_stretch(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_relaxation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDissipation(self) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getGeometryPath(self) -> Any: ...
    def getInitialStretch(self) -> float: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(self, s: State) -> float: ...
    def getLengtheningSpeed(self, s: State) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStiffness(self) -> float: ...
    def getStress(self, s: State) -> float: ...
    def getStretch(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTension(self, s: State) -> float: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_dissipation(self, i: int) -> Any: ...
    @overload
    def get_dissipation(self) -> Any: ...
    def get_initial_stretch(self, i: int) -> Any: ...
    @overload
    def get_initial_stretch(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(self, i: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_relaxation_time_constant(self, i: int) -> Any: ...
    @overload
    def get_relaxation_time_constant(self) -> Any: ...
    def get_stiffness(self, i: int) -> Any: ...
    @overload
    def get_stiffness(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setDissipation(self, *args, **kwargs) -> Any: ...
    def setInitialStretch(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setStiffness(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_dissipation(self, *args, **kwargs) -> Any: ...
    def set_initial_stretch(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_relaxation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_stiffness(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_dissipation(self, i: int) -> float: ...
    @overload
    def upd_dissipation(self) -> Any: ...
    def upd_initial_stretch(self, i: int) -> float: ...
    @overload
    def upd_initial_stretch(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(self, i: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_relaxation_time_constant(self, i: int) -> float: ...
    @overload
    def upd_relaxation_time_constant(self) -> Any: ...
    def upd_stiffness(self, i: int) -> float: ...
    @overload
    def upd_stiffness(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class CoordinateActuator:
    def CreateForceSetOfCoordinateActuatorsForModel(self, s: State, aModel: Model, aOptimalForce: float, aIncludeLockedAndConstrainedCoordinates: bool) -> Any: ...
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, coordinateName: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_coordinate(self, value: str) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCoordinate(self) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_coordinate(self, i: int) -> Any: ...
    @overload
    def get_coordinate(self) -> str: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isCoordinateValid(self) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setCoordinate(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_coordinate(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_coordinate(self, i: int) -> str: ...
    @overload
    def upd_coordinate(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class DeGrooteFregly2016Muscle:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_activation_dynamics_smoothing(self, value: Any) -> int: ...
    def append_activation_time_constant(self, value: Any) -> int: ...
    def append_active_force_width_scale(self, value: Any) -> int: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_deactivation_time_constant(self, value: Any) -> int: ...
    def append_default_activation(self, value: Any) -> int: ...
    def append_default_normalized_tendon_force(self, value: Any) -> int: ...
    def append_fiber_damping(self, value: Any) -> int: ...
    def append_ignore_activation_dynamics(self, value: Any) -> int: ...
    def append_ignore_passive_fiber_force(self, value: Any) -> int: ...
    def append_ignore_tendon_compliance(self, value: Any) -> int: ...
    def append_max_contraction_velocity(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_max_isometric_force(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_fiber_length(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_passive_fiber_strain_at_one_norm_force(self, value: Any) -> int: ...
    def append_path(self, value: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(self, value: Any) -> int: ...
    def append_tendon_compliance_dynamics_mode(self, value: str) -> int: ...
    def append_tendon_slack_length(self, value: Any) -> int: ...
    def append_tendon_strain_at_one_norm_force(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcActiveForceLengthMultiplier(self, normFiberLength: Real) -> Real: ...
    def calcActiveForceLengthMultiplierDerivative(self, normFiberLength: Real) -> Real: ...
    def calcEquilibriumResidual(self, muscleTendonLength: Real, muscleTendonVelocity: Real, activation: Real, normTendonForce: Real, normTendonForceDerivative: Real) -> Real: ...
    def calcFiberForce(self, *args, **kwargs) -> Any: ...
    def calcFiberStiffness(self, activation: Real, normFiberLength: Real, fiberVelocityMultiplier: Real) -> Real: ...
    def calcFiberStiffnessAlongTendon(self, fiberLength: Real, partialFiberForceAlongTendonPartialFiberLength: Real, sinPennationAngle: Real, cosPennationAngle: Real, partialPennationAnglePartialFiberLength: Real) -> Real: ...
    def calcForceVelocityInverseCurve(self, forceVelocityMult: Real) -> Real: ...
    def calcForceVelocityMultiplier(self, normFiberVelocity: Real) -> Real: ...
    def calcInextensibleTendonActiveFiberForce(self, s: State, aActivation: float) -> float: ...
    def calcLinearizedEquilibriumResidualDerivative(self, muscleTendonLength: Real, muscleTendonVelocity: Real, activation: Real, normTendonForce: Real, normTendonForceDerivative: Real) -> Real: ...
    def calcMuscleStiffness(self, tendonStiffness: Real, fiberStiffnessAlongTendon: Real) -> Real: ...
    @overload
    def calcMuscleStiffness(self, s: State) -> float: ...
    def calcPartialFiberForceAlongTendonPartialFiberLength(self, fiberForce: Real, fiberStiffness: Real, sinPennationAngle: Real, cosPennationAngle: Real, partialPennationAnglePartialFiberLength: Real) -> Real: ...
    def calcPartialPennationAnglePartialFiberLength(self, fiberLength: Real) -> Real: ...
    def calcPartialTendonForcePartialFiberLength(self, tendonStiffness: Real, fiberLength: Real, sinPennationAngle: Real, cosPennationAngle: Real) -> Real: ...
    def calcPartialTendonLengthPartialFiberLength(self, fiberLength: Real, sinPennationAngle: Real, cosPennationAngle: Real, partialPennationAnglePartialFiberLength: Real) -> Real: ...
    def calcPassiveForceMultiplier(self, normFiberLength: Real) -> Real: ...
    def calcPassiveForceMultiplierDerivative(self, normFiberLength: Real) -> Real: ...
    def calcPassiveForceMultiplierIntegral(self, normFiberLength: Real) -> Real: ...
    def calcTendonForceLengthInverseCurve(self, normTendonForce: Real) -> Real: ...
    def calcTendonForceLengthInverseCurveDerivative(self, derivNormTendonForce: Real, normTendonLength: Real) -> Real: ...
    def calcTendonForceMultiplier(self, normTendonLength: Real) -> Real: ...
    def calcTendonForceMultiplierDerivative(self, normTendonLength: Real) -> Real: ...
    def calcTendonForceMultiplierIntegral(self, normTendonLength: Real) -> Real: ...
    def calcTendonStiffness(self, normTendonLength: Real) -> Real: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(self, s: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeInitialFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(self, s: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_dynamics_smoothing(self, *args, **kwargs) -> Any: ...
    def constructProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_active_force_width_scale(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_normalized_tendon_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_fiber_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_passive_fiber_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_passive_fiber_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_compliance_dynamics_mode(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_dynamics_smoothing(self, *args, **kwargs) -> Any: ...
    def copyProperty_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_active_force_width_scale(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_normalized_tendon_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_fiber_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_passive_fiber_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_passive_fiber_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_compliance_dynamics_mode(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def exportFiberLengthCurvesToTable(self, normFiberLengths: Any) -> Any: ...
    def exportFiberVelocityMultiplierToTable(self, normFiberVelocities: Any) -> Any: ...
    def exportTendonForceMultiplierToTable(self, normTendonLengths: Any) -> Any: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(self, s: State) -> float: ...
    def getActivationStateName(self) -> str: ...
    def getActiveFiberForce(self, s: State) -> float: ...
    def getActiveFiberForceAlongTendon(self, s: State) -> float: ...
    def getActiveForceLengthMultiplier(self, s: State) -> float: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getBoundsNormalizedFiberLength(self) -> Any: ...
    def getBoundsNormalizedTendonForce(self, arg2: State) -> Any: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(self, s: State) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getEquilibriumResidual(self, s: State) -> float: ...
    def getExcitation(self, s: State) -> float: ...
    def getFiberActivePower(self, s: State) -> float: ...
    def getFiberForce(self, s: State) -> float: ...
    def getFiberForceAlongTendon(self, s: State) -> float: ...
    def getFiberLength(self, s: State) -> float: ...
    def getFiberLengthAlongTendon(self, s: State) -> float: ...
    def getFiberPassivePower(self, s: State) -> float: ...
    def getFiberPotentialEnergy(self, s: State) -> float: ...
    def getFiberStiffness(self, s: State) -> float: ...
    def getFiberStiffnessAlongTendon(self, s: State) -> float: ...
    def getFiberVelocity(self, s: State) -> float: ...
    def getFiberVelocityAlongTendon(self, s: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(self, s: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(self, s: State) -> bool: ...
    def getIgnoreTendonCompliance(self, s: State) -> bool: ...
    def getImplicitDynamicsDerivativeName(self) -> str: ...
    def getImplicitDynamicsResidualName(self) -> str: ...
    def getImplicitEnabledNormalizedTendonForce(self, arg2: State) -> bool: ...
    def getImplicitResidualNormalizedTendonForce(self, s: State) -> float: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(self, s: State) -> float: ...
    def getLengtheningSpeed(self, s: State) -> float: ...
    def getLinearizedEquilibriumResidualDerivative(self, s: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMaxNormalizedFiberLength(self) -> float: ...
    def getMaxNormalizedTendonForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getMinNormalizedFiberLength(self) -> float: ...
    def getMinNormalizedTendonForce(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(self, s: State) -> float: ...
    def getMusclePower(self, s: State) -> float: ...
    def getMuscleStiffness(self, s: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(self, s: State) -> float: ...
    def getNormalizedFiberVelocity(self, s: State) -> float: ...
    def getNormalizedTendonForce(self, s: State) -> float: ...
    def getNormalizedTendonForceDerivative(self, s: State) -> float: ...
    def getNormalizedTendonForceStateName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberDampingForce(self, s: State) -> float: ...
    def getPassiveFiberDampingForceAlongTendon(self, s: State) -> float: ...
    def getPassiveFiberElasticForce(self, s: State) -> float: ...
    def getPassiveFiberElasticForceAlongTendon(self, s: State) -> float: ...
    def getPassiveFiberForce(self, s: State) -> float: ...
    def getPassiveFiberForceAlongTendon(self, s: State) -> float: ...
    def getPassiveForceMultiplier(self, s: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(self, s: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(self, s: State) -> float: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(self, s: State) -> float: ...
    def getTendonLength(self, s: State) -> float: ...
    def getTendonPotentialEnergy(self, s: State) -> float: ...
    def getTendonPower(self, s: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(self, s: State) -> float: ...
    def getTendonStrain(self, s: State) -> float: ...
    def getTendonVelocity(self, s: State) -> float: ...
    def get_activation_dynamics_smoothing(self, i: int) -> Any: ...
    @overload
    def get_activation_dynamics_smoothing(self) -> Any: ...
    def get_activation_time_constant(self, i: int) -> Any: ...
    @overload
    def get_activation_time_constant(self) -> Any: ...
    def get_active_force_width_scale(self, i: int) -> Any: ...
    @overload
    def get_active_force_width_scale(self) -> Any: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_deactivation_time_constant(self, i: int) -> Any: ...
    @overload
    def get_deactivation_time_constant(self) -> Any: ...
    def get_default_activation(self, i: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_normalized_tendon_force(self, i: int) -> Any: ...
    @overload
    def get_default_normalized_tendon_force(self) -> Any: ...
    def get_fiber_damping(self, i: int) -> Any: ...
    @overload
    def get_fiber_damping(self) -> Any: ...
    def get_ignore_activation_dynamics(self, i: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_passive_fiber_force(self, i: int) -> Any: ...
    @overload
    def get_ignore_passive_fiber_force(self) -> Any: ...
    def get_ignore_tendon_compliance(self, i: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(self, i: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(self, i: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_fiber_length(self, i: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_passive_fiber_strain_at_one_norm_force(self, i: int) -> Any: ...
    @overload
    def get_passive_fiber_strain_at_one_norm_force(self) -> Any: ...
    def get_path(self, i: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(self, i: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_compliance_dynamics_mode(self, i: int) -> Any: ...
    @overload
    def get_tendon_compliance_dynamics_mode(self) -> str: ...
    def get_tendon_slack_length(self, i: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def get_tendon_strain_at_one_norm_force(self, i: int) -> Any: ...
    @overload
    def get_tendon_strain_at_one_norm_force(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printCurvesToSTOFiles(self, *args, **kwargs) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def replaceMuscles(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNormalizedTendonForce(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_activation_dynamics_smoothing(self, *args, **kwargs) -> Any: ...
    def set_activation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_active_force_width_scale(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_deactivation_time_constant(self, *args, **kwargs) -> Any: ...
    def set_default_activation(self, *args, **kwargs) -> Any: ...
    def set_default_normalized_tendon_force(self, *args, **kwargs) -> Any: ...
    def set_fiber_damping(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_passive_fiber_force(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_passive_fiber_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_compliance_dynamics_mode(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def set_tendon_strain_at_one_norm_force(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_activation_dynamics_smoothing(self, i: int) -> float: ...
    @overload
    def upd_activation_dynamics_smoothing(self) -> Any: ...
    def upd_activation_time_constant(self, i: int) -> float: ...
    @overload
    def upd_activation_time_constant(self) -> Any: ...
    def upd_active_force_width_scale(self, i: int) -> float: ...
    @overload
    def upd_active_force_width_scale(self) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_deactivation_time_constant(self, i: int) -> float: ...
    @overload
    def upd_deactivation_time_constant(self) -> Any: ...
    def upd_default_activation(self, i: int) -> float: ...
    @overload
    def upd_default_activation(self) -> Any: ...
    def upd_default_normalized_tendon_force(self, i: int) -> float: ...
    @overload
    def upd_default_normalized_tendon_force(self) -> Any: ...
    def upd_fiber_damping(self, i: int) -> float: ...
    @overload
    def upd_fiber_damping(self) -> Any: ...
    def upd_ignore_activation_dynamics(self, i: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_passive_fiber_force(self, i: int) -> bool: ...
    @overload
    def upd_ignore_passive_fiber_force(self) -> Any: ...
    def upd_ignore_tendon_compliance(self, i: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_max_contraction_velocity(self, i: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(self, i: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_fiber_length(self, i: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_passive_fiber_strain_at_one_norm_force(self, i: int) -> float: ...
    @overload
    def upd_passive_fiber_strain_at_one_norm_force(self) -> Any: ...
    def upd_path(self, i: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(self, i: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_compliance_dynamics_mode(self, i: int) -> str: ...
    @overload
    def upd_tendon_compliance_dynamics_mode(self) -> Any: ...
    def upd_tendon_slack_length(self, i: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def upd_tendon_strain_at_one_norm_force(self, i: int) -> float: ...
    @overload
    def upd_tendon_strain_at_one_norm_force(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class McKibbenActuator:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, num_turns: float, thread_length: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_cord_length(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_number_of_turns(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_path(self, value: AbstractGeometryPath) -> int: ...
    def append_thread_length(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(self, s: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(self, s: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_cord_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_number_of_turns(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_thread_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_cord_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_number_of_turns(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_thread_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCordLength(self) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getGeometryPath(self) -> Any: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(self, s: State) -> float: ...
    def getLengtheningSpeed(self, s: State) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getNumberOfTurns(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPath(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getThreadLength(self) -> float: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_cord_length(self, i: int) -> Any: ...
    @overload
    def get_cord_length(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_number_of_turns(self, i: int) -> Any: ...
    @overload
    def get_number_of_turns(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(self, i: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_thread_length(self, i: int) -> Any: ...
    @overload
    def get_thread_length(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setCordLength(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNumberOfTurns(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setThreadLength(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_cord_length(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_number_of_turns(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_thread_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_cord_length(self, i: int) -> float: ...
    @overload
    def upd_cord_length(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_number_of_turns(self, i: int) -> float: ...
    @overload
    def upd_number_of_turns(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(self, i: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_thread_length(self, i: int) -> float: ...
    @overload
    def upd_thread_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class Millard2012AccelerationMuscle:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aName: str, aMaxIsometricForce: float, aOptimalFiberLength: float, aTendonSlackLength: float, aPennationAngle: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_ActiveForceLengthCurve(self, value: ActiveForceLengthCurve) -> int: ...
    def append_FiberCompressiveForceCosPennationCurve(self, value: FiberCompressiveForceCosPennationCurve) -> int: ...
    def append_FiberCompressiveForceLengthCurve(self, value: FiberCompressiveForceLengthCurve) -> int: ...
    def append_FiberForceLengthCurve(self, value: FiberForceLengthCurve) -> int: ...
    def append_ForceVelocityCurve(self, value: ForceVelocityCurve) -> int: ...
    def append_MuscleFirstOrderActivationDynamicModel(self, value: MuscleFirstOrderActivationDynamicModel) -> int: ...
    def append_TendonForceLengthCurve(self, value: TendonForceLengthCurve) -> int: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_default_activation(self, value: Any) -> int: ...
    def append_default_fiber_length(self, value: Any) -> int: ...
    def append_default_fiber_velocity(self, value: Any) -> int: ...
    def append_fiber_compressive_force_cos_pennation_damping(self, value: Any) -> int: ...
    def append_fiber_compressive_force_length_damping(self, value: Any) -> int: ...
    def append_fiber_damping(self, value: Any) -> int: ...
    def append_fiber_force_length_damping(self, value: Any) -> int: ...
    def append_ignore_activation_dynamics(self, value: Any) -> int: ...
    def append_ignore_tendon_compliance(self, value: Any) -> int: ...
    def append_mass(self, value: Any) -> int: ...
    def append_max_contraction_velocity(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_max_isometric_force(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_fiber_length(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_path(self, value: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(self, value: Any) -> int: ...
    def append_tendon_force_length_damping(self, value: Any) -> int: ...
    def append_tendon_slack_length(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcActiveFiberForceAlongTendon(self, activation: float, fiberLength: float, fiberVelocity: float) -> float: ...
    def calcInextensibleTendonActiveFiberForce(self, s: State, aActivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(self, s: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeInitialFiberEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(self, s: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_ActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_FiberCompressiveForceCosPennationCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_FiberCompressiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_FiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_ForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_MuscleFirstOrderActivationDynamicModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_TendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_default_fiber_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_fiber_compressive_force_cos_pennation_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_fiber_compressive_force_length_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_fiber_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_fiber_force_length_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_mass(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_force_length_damping(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_ActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_FiberCompressiveForceCosPennationCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_FiberCompressiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_FiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_ForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_MuscleFirstOrderActivationDynamicModel(self, *args, **kwargs) -> Any: ...
    def copyProperty_TendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_activation(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_default_fiber_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_fiber_compressive_force_cos_pennation_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_fiber_compressive_force_length_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_fiber_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_fiber_force_length_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_mass(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_force_length_damping(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def extendPostScale(self, *args, **kwargs) -> Any: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(self, s: State) -> float: ...
    def getActivationModel(self) -> Any: ...
    def getActivationRate(self, s: State) -> float: ...
    def getActiveFiberForce(self, s: State) -> float: ...
    def getActiveFiberForceAlongTendon(self, s: State) -> float: ...
    def getActiveForceLengthCurve(self) -> Any: ...
    def getActiveForceLengthMultiplier(self, s: State) -> float: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(self, s: State) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultActivation(self) -> float: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultFiberLength(self) -> float: ...
    def getDefaultFiberVelocity(self) -> float: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(self, s: State) -> float: ...
    def getFiberAcceleration(self, s: State) -> float: ...
    def getFiberActivePower(self, s: State) -> float: ...
    def getFiberCompressiveForceCosPennationCurve(self) -> Any: ...
    def getFiberCompressiveForceCosPennationMultiplier(self, s: State) -> float: ...
    def getFiberCompressiveForceLengthCurve(self) -> Any: ...
    def getFiberCompressiveForceLengthMultiplier(self, s: State) -> float: ...
    def getFiberForce(self, s: State) -> float: ...
    def getFiberForceAlongTendon(self, s: State) -> float: ...
    def getFiberForceLengthCurve(self) -> Any: ...
    def getFiberLength(self, s: State) -> float: ...
    def getFiberLengthAlongTendon(self, s: State) -> float: ...
    def getFiberPassivePower(self, s: State) -> float: ...
    def getFiberPotentialEnergy(self, s: State) -> float: ...
    def getFiberStiffness(self, s: State) -> float: ...
    def getFiberStiffnessAlongTendon(self, s: State) -> float: ...
    def getFiberVelocity(self, s: State) -> float: ...
    def getFiberVelocityAlongTendon(self, s: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityCurve(self) -> Any: ...
    def getForceVelocityMultiplier(self, s: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(self, s: State) -> bool: ...
    def getIgnoreTendonCompliance(self, s: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(self, s: State) -> float: ...
    def getLengtheningSpeed(self, s: State) -> float: ...
    def getMass(self) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(self, s: State) -> float: ...
    def getMusclePower(self, s: State) -> float: ...
    def getMuscleStiffness(self, s: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(self, s: State) -> float: ...
    def getNormalizedFiberVelocity(self, s: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(self, s: State) -> float: ...
    def getPassiveFiberForceAlongTendon(self, s: State) -> float: ...
    def getPassiveForceMultiplier(self, s: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(self, s: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(self, s: State) -> float: ...
    def getPennationModel(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(self, s: State) -> float: ...
    def getTendonForceLengthCurve(self) -> Any: ...
    def getTendonForceMultiplier(self, s: State) -> float: ...
    def getTendonLength(self, s: State) -> float: ...
    def getTendonPotentialEnergy(self, s: State) -> float: ...
    def getTendonPower(self, s: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(self, s: State) -> float: ...
    def getTendonStrain(self, s: State) -> float: ...
    def getTendonVelocity(self, s: State) -> float: ...
    def get_ActiveForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def get_ActiveForceLengthCurve(self) -> Any: ...
    def get_FiberCompressiveForceCosPennationCurve(self, i: int) -> Any: ...
    @overload
    def get_FiberCompressiveForceCosPennationCurve(self) -> Any: ...
    def get_FiberCompressiveForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def get_FiberCompressiveForceLengthCurve(self) -> Any: ...
    def get_FiberForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def get_FiberForceLengthCurve(self) -> Any: ...
    def get_ForceVelocityCurve(self, i: int) -> Any: ...
    @overload
    def get_ForceVelocityCurve(self) -> Any: ...
    def get_MuscleFirstOrderActivationDynamicModel(self, i: int) -> Any: ...
    @overload
    def get_MuscleFirstOrderActivationDynamicModel(self) -> Any: ...
    def get_TendonForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def get_TendonForceLengthCurve(self) -> Any: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_default_activation(self, i: int) -> Any: ...
    @overload
    def get_default_activation(self) -> Any: ...
    def get_default_fiber_length(self, i: int) -> Any: ...
    @overload
    def get_default_fiber_length(self) -> Any: ...
    def get_default_fiber_velocity(self, i: int) -> Any: ...
    @overload
    def get_default_fiber_velocity(self) -> Any: ...
    def get_fiber_compressive_force_cos_pennation_damping(self, i: int) -> Any: ...
    @overload
    def get_fiber_compressive_force_cos_pennation_damping(self) -> Any: ...
    def get_fiber_compressive_force_length_damping(self, i: int) -> Any: ...
    @overload
    def get_fiber_compressive_force_length_damping(self) -> Any: ...
    def get_fiber_damping(self, i: int) -> Any: ...
    @overload
    def get_fiber_damping(self) -> Any: ...
    def get_fiber_force_length_damping(self, i: int) -> Any: ...
    @overload
    def get_fiber_force_length_damping(self) -> Any: ...
    def get_ignore_activation_dynamics(self, i: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(self, i: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_mass(self, i: int) -> Any: ...
    @overload
    def get_mass(self) -> Any: ...
    def get_max_contraction_velocity(self, i: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(self, i: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_fiber_length(self, i: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_path(self, i: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(self, i: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_force_length_damping(self, i: int) -> Any: ...
    @overload
    def get_tendon_force_length_damping(self) -> Any: ...
    def get_tendon_slack_length(self, i: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActivationModel(self, *args, **kwargs) -> Any: ...
    def setActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDefaultActivation(self, *args, **kwargs) -> Any: ...
    def setDefaultFiberLength(self, *args, **kwargs) -> Any: ...
    def setDefaultFiberVelocity(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setFiberCompressiveForceCosPennationCurve(self, *args, **kwargs) -> Any: ...
    def setFiberCompressiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setFiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setFiberLength(self, *args, **kwargs) -> Any: ...
    def setFiberVelocity(self, *args, **kwargs) -> Any: ...
    def setForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMass(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_ActiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_FiberCompressiveForceCosPennationCurve(self, *args, **kwargs) -> Any: ...
    def set_FiberCompressiveForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_FiberForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_ForceVelocityCurve(self, *args, **kwargs) -> Any: ...
    def set_MuscleFirstOrderActivationDynamicModel(self, *args, **kwargs) -> Any: ...
    def set_TendonForceLengthCurve(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_default_activation(self, *args, **kwargs) -> Any: ...
    def set_default_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_default_fiber_velocity(self, *args, **kwargs) -> Any: ...
    def set_fiber_compressive_force_cos_pennation_damping(self, *args, **kwargs) -> Any: ...
    def set_fiber_compressive_force_length_damping(self, *args, **kwargs) -> Any: ...
    def set_fiber_damping(self, *args, **kwargs) -> Any: ...
    def set_fiber_force_length_damping(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_mass(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_force_length_damping(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_ActiveForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def upd_ActiveForceLengthCurve(self) -> Any: ...
    def upd_FiberCompressiveForceCosPennationCurve(self, i: int) -> Any: ...
    @overload
    def upd_FiberCompressiveForceCosPennationCurve(self) -> Any: ...
    def upd_FiberCompressiveForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def upd_FiberCompressiveForceLengthCurve(self) -> Any: ...
    def upd_FiberForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def upd_FiberForceLengthCurve(self) -> Any: ...
    def upd_ForceVelocityCurve(self, i: int) -> Any: ...
    @overload
    def upd_ForceVelocityCurve(self) -> Any: ...
    def upd_MuscleFirstOrderActivationDynamicModel(self, i: int) -> Any: ...
    @overload
    def upd_MuscleFirstOrderActivationDynamicModel(self) -> Any: ...
    def upd_TendonForceLengthCurve(self, i: int) -> Any: ...
    @overload
    def upd_TendonForceLengthCurve(self) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_default_activation(self, i: int) -> float: ...
    @overload
    def upd_default_activation(self) -> Any: ...
    def upd_default_fiber_length(self, i: int) -> float: ...
    @overload
    def upd_default_fiber_length(self) -> Any: ...
    def upd_default_fiber_velocity(self, i: int) -> float: ...
    @overload
    def upd_default_fiber_velocity(self) -> Any: ...
    def upd_fiber_compressive_force_cos_pennation_damping(self, i: int) -> float: ...
    @overload
    def upd_fiber_compressive_force_cos_pennation_damping(self) -> Any: ...
    def upd_fiber_compressive_force_length_damping(self, i: int) -> float: ...
    @overload
    def upd_fiber_compressive_force_length_damping(self) -> Any: ...
    def upd_fiber_damping(self, i: int) -> float: ...
    @overload
    def upd_fiber_damping(self) -> Any: ...
    def upd_fiber_force_length_damping(self, i: int) -> float: ...
    @overload
    def upd_fiber_force_length_damping(self) -> Any: ...
    def upd_ignore_activation_dynamics(self, i: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_tendon_compliance(self, i: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_mass(self, i: int) -> float: ...
    @overload
    def upd_mass(self) -> Any: ...
    def upd_max_contraction_velocity(self, i: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(self, i: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_fiber_length(self, i: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_path(self, i: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(self, i: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_force_length_damping(self, i: int) -> float: ...
    @overload
    def upd_tendon_force_length_damping(self) -> Any: ...
    def upd_tendon_slack_length(self, i: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpAddExternalLoads:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, filepath: str) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpAddReserves:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, optimalForce: float) -> None: ...
    @overload
    def __init__(self, optimalForce: float, bound: float) -> None: ...
    @overload
    def __init__(self, optimalForce: float, bounds: float, skipCoordsWithActu: bool) -> None: ...
    @overload
    def __init__(self, optimalForce: float, bounds: float, skipCoordsWithActu: bool, skipResidualCoords: bool) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpAddResiduals:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, rotOptimalForce: float, transOptimalForce: float) -> None: ...
    @overload
    def __init__(self, rotOptimalForce: float, transOptimalForce: float, bound: float) -> None: ...
    @overload
    def __init__(self, rotOptimalForce: float, transOptimalForce: float, bounds: float, skipCoordsWithActu: bool) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpIgnoreActivationDynamics:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpIgnoreTendonCompliance:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpPrescribeCoordinateValues:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, table: TableProcessor) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpRemoveMuscles:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpReplaceJointsWithWelds:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, paths: Any) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpReplaceMusclesWithPathActuators:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpReplacePathsWithFunctionBasedPaths:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, pathsFile: str) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModOpScaleMaxIsometricForce:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, scaleFactor: float) -> None: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelFactory:
    def __init__(self) -> None: ...
    def createDoublePendulum(self) -> Any: ...
    def createNLinkPendulum(self, numLinks: int) -> Any: ...
    def createPendulum(self) -> Any: ...
    def createPlanarPointMass(self) -> Any: ...
    def createReserveActuators(self, *args, **kwargs) -> Any: ...
    def createResidualActuators(self, *args, **kwargs) -> Any: ...
    def createSlidingPointMass(self) -> Any: ...
    def removeMuscles(self, *args, **kwargs) -> Any: ...
    def replaceJointWithWeldJoint(self, *args, **kwargs) -> Any: ...
    def replaceMusclesWithPathActuators(self, *args, **kwargs) -> Any: ...
    def replacePathsWithFunctionBasedPaths(self, *args, **kwargs) -> Any: ...
    thisown: Any

class ModelOperator:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def operate(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class ModelProcessor:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, model: Model) -> None: ...
    @overload
    def __init__(self, filepath: str) -> None: ...
    def append(self, op: ModelOperator) -> Any: ...
    def append_filepath(self, value: str) -> int: ...
    def append_operators(self, value: ModelOperator) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_filepath(self, *args, **kwargs) -> Any: ...
    def constructProperty_operators(self, *args, **kwargs) -> Any: ...
    def copyProperty_filepath(self, *args, **kwargs) -> Any: ...
    def copyProperty_operators(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getModel(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_filepath(self, i: int) -> Any: ...
    @overload
    def get_filepath(self) -> str: ...
    def get_operators(self, i: int) -> Any: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def process(self, relativeToDirectory: str) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_filepath(self, *args, **kwargs) -> Any: ...
    def set_operators(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updModel(self) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_filepath(self, i: int) -> str: ...
    @overload
    def upd_filepath(self) -> Any: ...
    def upd_operators(self, i: int) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PointActuator:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, bodyName: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_body(self, value: str) -> int: ...
    def append_direction(self, value: Vec3) -> int: ...
    def append_force_is_global(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_point(self, value: Vec3) -> int: ...
    def append_point_is_global(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_body(self, *args, **kwargs) -> Any: ...
    def constructProperty_direction(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_is_global(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_point(self, *args, **kwargs) -> Any: ...
    def constructProperty_point_is_global(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_body(self, *args, **kwargs) -> Any: ...
    def copyProperty_direction(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_is_global(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_point(self, *args, **kwargs) -> Any: ...
    def copyProperty_point_is_global(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_body(self, i: int) -> Any: ...
    @overload
    def get_body(self) -> str: ...
    def get_direction(self, i: int) -> Any: ...
    @overload
    def get_direction(self) -> Any: ...
    def get_force_is_global(self, i: int) -> Any: ...
    @overload
    def get_force_is_global(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_point(self, i: int) -> Any: ...
    @overload
    def get_point(self) -> Any: ...
    def get_point_is_global(self, i: int) -> Any: ...
    @overload
    def get_point_is_global(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_body(self, *args, **kwargs) -> Any: ...
    def set_direction(self, *args, **kwargs) -> Any: ...
    def set_force_is_global(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_point(self, *args, **kwargs) -> Any: ...
    def set_point_is_global(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_body(self, i: int) -> str: ...
    @overload
    def upd_body(self) -> Any: ...
    def upd_direction(self, i: int) -> Any: ...
    @overload
    def upd_direction(self) -> Any: ...
    def upd_force_is_global(self, i: int) -> bool: ...
    @overload
    def upd_force_is_global(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_point(self, i: int) -> Any: ...
    @overload
    def upd_point(self) -> Any: ...
    def upd_point_is_global(self, i: int) -> bool: ...
    @overload
    def upd_point_is_global(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PointToPointActuator:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, bodyNameA: str, bodyNameB: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_bodyA(self, value: str) -> int: ...
    def append_bodyB(self, value: str) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_pointA(self, value: Vec3) -> int: ...
    def append_pointB(self, value: Vec3) -> int: ...
    def append_points_are_global(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_bodyA(self, *args, **kwargs) -> Any: ...
    def constructProperty_bodyB(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_pointA(self, *args, **kwargs) -> Any: ...
    def constructProperty_pointB(self, *args, **kwargs) -> Any: ...
    def constructProperty_points_are_global(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_bodyA(self, *args, **kwargs) -> Any: ...
    def copyProperty_bodyB(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_pointA(self, *args, **kwargs) -> Any: ...
    def copyProperty_pointB(self, *args, **kwargs) -> Any: ...
    def copyProperty_points_are_global(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPointA(self) -> Any: ...
    def getPointB(self) -> Any: ...
    def getPointsAreGlobal(self) -> bool: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_bodyA(self, i: int) -> Any: ...
    @overload
    def get_bodyA(self) -> str: ...
    def get_bodyB(self, i: int) -> Any: ...
    @overload
    def get_bodyB(self) -> str: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_pointA(self, i: int) -> Any: ...
    @overload
    def get_pointA(self) -> Any: ...
    def get_pointB(self, i: int) -> Any: ...
    @overload
    def get_pointB(self) -> Any: ...
    def get_points_are_global(self, i: int) -> Any: ...
    @overload
    def get_points_are_global(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPointA(self, *args, **kwargs) -> Any: ...
    def setPointB(self, *args, **kwargs) -> Any: ...
    def setPointsAreGlobal(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_bodyA(self, *args, **kwargs) -> Any: ...
    def set_bodyB(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_pointA(self, *args, **kwargs) -> Any: ...
    def set_pointB(self, *args, **kwargs) -> Any: ...
    def set_points_are_global(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_bodyA(self, i: int) -> str: ...
    @overload
    def upd_bodyA(self) -> Any: ...
    def upd_bodyB(self, i: int) -> str: ...
    @overload
    def upd_bodyB(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_pointA(self, i: int) -> Any: ...
    @overload
    def upd_pointA(self) -> Any: ...
    def upd_pointB(self, i: int) -> Any: ...
    @overload
    def upd_pointB(self) -> Any: ...
    def upd_points_are_global(self, i: int) -> bool: ...
    @overload
    def upd_points_are_global(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PolynomialPathFitter:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg2: PolynomialPathFitter) -> None: ...
    @overload
    def __init__(self, arg2: PolynomialPathFitter) -> None: ...
    def appendCoordinateSamplingBounds(self, *args, **kwargs) -> Any: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def dump(self) -> str: ...
    def evaluateFunctionBasedPaths(self, *args, **kwargs) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGlobalCoordinateSamplingBounds(self) -> Any: ...
    def getIncludeLengtheningSpeedFunction(self) -> bool: ...
    def getIncludeMomentArmFunctions(self) -> bool: ...
    def getInlined(self) -> bool: ...
    def getLatinHypercubeAlgorithm(self) -> str: ...
    def getMaximumPolynomialOrder(self) -> int: ...
    def getMinimumPolynomialOrder(self) -> int: ...
    def getMomentArmThreshold(self) -> float: ...
    def getMomentArmTolerance(self) -> float: ...
    def getName(self) -> str: ...
    def getNumParallelThreads(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSamplesPerFrame(self) -> int: ...
    def getOutputDirectory(self) -> str: ...
    def getPathLengthTolerance(self) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getUseStepwiseRegression(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def run(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setCoordinateValues(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setGlobalCoordinateSamplingBounds(self, *args, **kwargs) -> Any: ...
    def setIncludeLengtheningSpeedFunction(self, *args, **kwargs) -> Any: ...
    def setIncludeMomentArmFunctions(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setLatinHypercubeAlgorithm(self, *args, **kwargs) -> Any: ...
    def setMaximumPolynomialOrder(self, *args, **kwargs) -> Any: ...
    def setMinimumPolynomialOrder(self, *args, **kwargs) -> Any: ...
    def setModel(self, *args, **kwargs) -> Any: ...
    def setMomentArmThreshold(self, *args, **kwargs) -> Any: ...
    def setMomentArmTolerance(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setNumParallelThreads(self, *args, **kwargs) -> Any: ...
    def setNumSamplesPerFrame(self, *args, **kwargs) -> Any: ...
    def setOutputDirectory(self, *args, **kwargs) -> Any: ...
    def setPathLengthTolerance(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setUseStepwiseRegression(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class PolynomialPathFitterBounds:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, coordinatePath: str, bounds: Vec2) -> None: ...
    def append_bounds(self, value: Vec2) -> int: ...
    def append_coordinate_path(self, value: str) -> int: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def constructProperty_bounds(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_bounds(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate_path(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def get_bounds(self, i: int) -> Any: ...
    @overload
    def get_bounds(self) -> Any: ...
    def get_coordinate_path(self, i: int) -> Any: ...
    @overload
    def get_coordinate_path(self) -> str: ...
    def hasProperty(self, name: str) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def set_bounds(self, *args, **kwargs) -> Any: ...
    def set_coordinate_path(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def upd_bounds(self, i: int) -> Any: ...
    @overload
    def upd_bounds(self) -> Any: ...
    def upd_coordinate_path(self, i: int) -> str: ...
    @overload
    def upd_coordinate_path(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class RigidTendonMuscle:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, name: str, maxIsometricForce: float, optimalFiberLength: float, tendonSlackLength: float, pennationAngle: float) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addNewPathPoint(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_active_force_length_curve(self, value: Function) -> int: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_force_velocity_curve(self, value: Function) -> int: ...
    def append_ignore_activation_dynamics(self, value: Any) -> int: ...
    def append_ignore_tendon_compliance(self, value: Any) -> int: ...
    def append_max_contraction_velocity(self, value: Any) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_max_isometric_force(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_fiber_length(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_passive_force_length_curve(self, value: Function) -> int: ...
    def append_path(self, value: AbstractGeometryPath) -> int: ...
    def append_pennation_angle_at_optimal(self, value: Any) -> int: ...
    def append_tendon_slack_length(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def calcInextensibleTendonActiveFiberForce(self, s: State, aActivation: float) -> float: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeActuation(self, s: State) -> float: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def computeMomentArm(self, s: State, aCoord: Coordinate) -> float: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_active_force_length_curve(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_force_velocity_curve(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def constructProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_passive_force_length_curve(self, *args, **kwargs) -> Any: ...
    def constructProperty_path(self, *args, **kwargs) -> Any: ...
    def constructProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def constructProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_active_force_length_curve(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_force_velocity_curve(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def copyProperty_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_passive_force_length_curve(self, *args, **kwargs) -> Any: ...
    def copyProperty_path(self, *args, **kwargs) -> Any: ...
    def copyProperty_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def copyProperty_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActivation(self, s: State) -> float: ...
    def getActiveFiberForce(self, s: State) -> float: ...
    def getActiveFiberForceAlongTendon(self, s: State) -> float: ...
    def getActiveForceLengthMultiplier(self, s: State) -> float: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getCosPennationAngle(self, s: State) -> float: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getExcitation(self, s: State) -> float: ...
    def getFiberActivePower(self, s: State) -> float: ...
    def getFiberForce(self, s: State) -> float: ...
    def getFiberForceAlongTendon(self, s: State) -> float: ...
    def getFiberLength(self, s: State) -> float: ...
    def getFiberLengthAlongTendon(self, s: State) -> float: ...
    def getFiberPassivePower(self, s: State) -> float: ...
    def getFiberPotentialEnergy(self, s: State) -> float: ...
    def getFiberStiffness(self, s: State) -> float: ...
    def getFiberStiffnessAlongTendon(self, s: State) -> float: ...
    def getFiberVelocity(self, s: State) -> float: ...
    def getFiberVelocityAlongTendon(self, s: State) -> float: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getForceVelocityMultiplier(self, s: State) -> float: ...
    def getGeometryPath(self) -> Any: ...
    def getIgnoreActivationDynamics(self, s: State) -> bool: ...
    def getIgnoreTendonCompliance(self, s: State) -> bool: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getLength(self, s: State) -> float: ...
    def getLengtheningSpeed(self, s: State) -> float: ...
    def getMaxContractionVelocity(self) -> float: ...
    def getMaxControl(self) -> float: ...
    def getMaxIsometricForce(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getMusclePotentialEnergy(self, s: State) -> float: ...
    def getMusclePower(self, s: State) -> float: ...
    def getMuscleStiffness(self, s: State) -> float: ...
    def getName(self) -> str: ...
    def getNormalizedFiberLength(self, s: State) -> float: ...
    def getNormalizedFiberVelocity(self, s: State) -> float: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalFiberLength(self) -> float: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPassiveFiberForce(self, s: State) -> float: ...
    def getPassiveFiberForceAlongTendon(self, s: State) -> float: ...
    def getPassiveForceMultiplier(self, s: State) -> float: ...
    def getPath(self) -> Any: ...
    def getPennationAngle(self, s: State) -> float: ...
    def getPennationAngleAtOptimalFiberLength(self) -> float: ...
    def getPennationAngularVelocity(self, s: State) -> float: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTendonForce(self, s: State) -> float: ...
    def getTendonLength(self, s: State) -> float: ...
    def getTendonPotentialEnergy(self, s: State) -> float: ...
    def getTendonPower(self, s: State) -> float: ...
    def getTendonSlackLength(self) -> float: ...
    def getTendonStiffness(self, s: State) -> float: ...
    def getTendonStrain(self, s: State) -> float: ...
    def getTendonVelocity(self, s: State) -> float: ...
    def get_active_force_length_curve(self, i: int) -> Any: ...
    @overload
    def get_active_force_length_curve(self) -> Any: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_force_velocity_curve(self, i: int) -> Any: ...
    @overload
    def get_force_velocity_curve(self) -> Any: ...
    def get_ignore_activation_dynamics(self, i: int) -> Any: ...
    @overload
    def get_ignore_activation_dynamics(self) -> Any: ...
    def get_ignore_tendon_compliance(self, i: int) -> Any: ...
    @overload
    def get_ignore_tendon_compliance(self) -> Any: ...
    def get_max_contraction_velocity(self, i: int) -> Any: ...
    @overload
    def get_max_contraction_velocity(self) -> Any: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_max_isometric_force(self, i: int) -> Any: ...
    @overload
    def get_max_isometric_force(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_fiber_length(self, i: int) -> Any: ...
    @overload
    def get_optimal_fiber_length(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_passive_force_length_curve(self, i: int) -> Any: ...
    @overload
    def get_passive_force_length_curve(self) -> Any: ...
    def get_path(self, i: int) -> Any: ...
    @overload
    def get_path(self) -> Any: ...
    def get_pennation_angle_at_optimal(self, i: int) -> Any: ...
    @overload
    def get_pennation_angle_at_optimal(self) -> Any: ...
    def get_tendon_slack_length(self, i: int) -> Any: ...
    @overload
    def get_tendon_slack_length(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActivation(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setExcitation(self, *args, **kwargs) -> Any: ...
    def setIgnoreActivationDynamics(self, *args, **kwargs) -> Any: ...
    def setIgnoreTendonCompliance(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxContractionVelocity(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMaxIsometricForce(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPennationAngleAtOptimalFiberLength(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTendonSlackLength(self, *args, **kwargs) -> Any: ...
    def set_active_force_length_curve(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_force_velocity_curve(self, *args, **kwargs) -> Any: ...
    def set_ignore_activation_dynamics(self, *args, **kwargs) -> Any: ...
    def set_ignore_tendon_compliance(self, *args, **kwargs) -> Any: ...
    def set_max_contraction_velocity(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_max_isometric_force(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_fiber_length(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_passive_force_length_curve(self, *args, **kwargs) -> Any: ...
    def set_path(self, *args, **kwargs) -> Any: ...
    def set_pennation_angle_at_optimal(self, *args, **kwargs) -> Any: ...
    def set_tendon_slack_length(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updGeometryPath(self) -> Any: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPath(self) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_active_force_length_curve(self, i: int) -> Any: ...
    @overload
    def upd_active_force_length_curve(self) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_force_velocity_curve(self, i: int) -> Any: ...
    @overload
    def upd_force_velocity_curve(self) -> Any: ...
    def upd_ignore_activation_dynamics(self, i: int) -> bool: ...
    @overload
    def upd_ignore_activation_dynamics(self) -> Any: ...
    def upd_ignore_tendon_compliance(self, i: int) -> bool: ...
    @overload
    def upd_ignore_tendon_compliance(self) -> Any: ...
    def upd_max_contraction_velocity(self, i: int) -> float: ...
    @overload
    def upd_max_contraction_velocity(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_max_isometric_force(self, i: int) -> float: ...
    @overload
    def upd_max_isometric_force(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_fiber_length(self, i: int) -> float: ...
    @overload
    def upd_optimal_fiber_length(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_passive_force_length_curve(self, i: int) -> Any: ...
    @overload
    def upd_passive_force_length_curve(self) -> Any: ...
    def upd_path(self, i: int) -> Any: ...
    @overload
    def upd_path(self) -> Any: ...
    def upd_pennation_angle_at_optimal(self, i: int) -> float: ...
    @overload
    def upd_pennation_angle_at_optimal(self) -> Any: ...
    def upd_tendon_slack_length(self, i: int) -> float: ...
    @overload
    def upd_tendon_slack_length(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SetFunctionBasedPaths:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    SetIterator: Any
    def __init__(self) -> None: ...
    @overload
    def __init__(self, aFileName: str, aUpdateFromXMLNode: bool) -> None: ...
    @overload
    def __init__(self, aSet: Set) -> None: ...
    def addGroup(self, *args, **kwargs) -> Any: ...
    def addObjectToGroup(self, *args, **kwargs) -> Any: ...
    def adoptAndAppend(self, aObject: FunctionBasedPath) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearAndDestroy(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def cloneAndAppend(self, aObject: FunctionBasedPath) -> bool: ...
    def contains(self, aName: str) -> bool: ...
    def dump(self) -> str: ...
    def get(self, aIndex: int) -> Any: ...
    @overload
    def get(self, aName: str) -> Any: ...
    def getAuthors(self) -> str: ...
    def getClassName(self) -> str: ...
    def getConcreteClassName(self) -> str: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getGroup(self, aGroupName: str) -> Any: ...
    @overload
    def getGroup(self, aIndex: int) -> Any: ...
    def getGroupNames(self, *args, **kwargs) -> Any: ...
    def getGroupNamesContaining(self, *args, **kwargs) -> Any: ...
    def getIndex(self, aObject: FunctionBasedPath, aStartIndex: int) -> int: ...
    @overload
    def getIndex(self, aName: str, aStartIndex: int) -> int: ...
    def getInlined(self) -> bool: ...
    def getName(self) -> str: ...
    def getNames(self, *args, **kwargs) -> Any: ...
    def getNumGroups(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSize(self) -> int: ...
    def hasProperty(self, name: str) -> bool: ...
    def insert(self, aIndex: int, aObject: FunctionBasedPath) -> bool: ...
    def isA(self, type: str) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def items(self, *args, **kwargs) -> Any: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def remove(self, aIndex: int) -> bool: ...
    @overload
    def remove(self, aObject: FunctionBasedPath) -> bool: ...
    def removeGroup(self, *args, **kwargs) -> Any: ...
    def renameGroup(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def set(self, aIndex: int, aObject: FunctionBasedPath, preserveGroups: bool) -> bool: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMemoryOwner(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setSize(self, aSize: int) -> bool: ...
    def setupGroups(self, *args, **kwargs) -> Any: ...
    thisown: Any
    def toString(self) -> str: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SpringGeneralizedForce:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self, coordinateName: str) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_coordinate(self, value: str) -> int: ...
    def append_rest_length(self, value: Any) -> int: ...
    def append_stiffness(self, value: Any) -> int: ...
    def append_viscosity(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def constructProperty_rest_length(self, *args, **kwargs) -> Any: ...
    def constructProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def constructProperty_viscosity(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_coordinate(self, *args, **kwargs) -> Any: ...
    def copyProperty_rest_length(self, *args, **kwargs) -> Any: ...
    def copyProperty_stiffness(self, *args, **kwargs) -> Any: ...
    def copyProperty_viscosity(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getAuthors(self) -> str: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOwner(self) -> Any: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRestLength(self) -> float: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStiffness(self) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getViscosity(self) -> float: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_coordinate(self, i: int) -> Any: ...
    @overload
    def get_coordinate(self) -> str: ...
    def get_rest_length(self, i: int) -> Any: ...
    @overload
    def get_rest_length(self) -> Any: ...
    def get_stiffness(self, i: int) -> Any: ...
    @overload
    def get_stiffness(self) -> Any: ...
    def get_viscosity(self, i: int) -> Any: ...
    @overload
    def get_viscosity(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setRestLength(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setStiffness(self, *args, **kwargs) -> Any: ...
    def setViscosity(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_coordinate(self, *args, **kwargs) -> Any: ...
    def set_rest_length(self, *args, **kwargs) -> Any: ...
    def set_stiffness(self, *args, **kwargs) -> Any: ...
    def set_viscosity(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_coordinate(self, i: int) -> str: ...
    @overload
    def upd_coordinate(self) -> Any: ...
    def upd_rest_length(self, i: int) -> float: ...
    @overload
    def upd_rest_length(self) -> Any: ...
    def upd_stiffness(self, i: int) -> float: ...
    @overload
    def upd_stiffness(self) -> Any: ...
    def upd_viscosity(self, i: int) -> float: ...
    @overload
    def upd_viscosity(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

class SwigPyIterator:
    def __init__(self, *args, **kwargs) -> Any: ...
    def advance(self, n: Any) -> Any: ...
    def copy(self) -> Any: ...
    def decr(self, n: Any) -> Any: ...
    def distance(self, x: Any) -> Any: ...
    def equal(self, x: Any) -> bool: ...
    def incr(self, n: Any) -> Any: ...
    def next(self) -> Any: ...
    def previous(self) -> Any: ...
    thisown: Any
    def value(self) -> Any: ...

class TorqueActuator:
    def PrintPropertyInfo(self, os: Any, classNameDotPropertyName: str, printFlagInfo: bool) -> bool: ...
    @overload
    def PrintPropertyInfo(self, os: Any, className: str, propertyName: str, printFlagInfo: bool) -> bool: ...
    def RegisterType(self, *args, **kwargs) -> Any: ...
    def RenameType(self, *args, **kwargs) -> Any: ...
    def SafeCopy(self, aObject: Object) -> Any: ...
    def __init__(self) -> None: ...
    @overload
    def __init__(self, bodyA: PhysicalFrame, bodyB: PhysicalFrame, axis: Vec3, axisInGround: bool) -> None: ...
    def addComponent(self, *args, **kwargs) -> Any: ...
    def addInControls(self, *args, **kwargs) -> Any: ...
    def addToSystem(self, *args, **kwargs) -> Any: ...
    def append_appliesForce(self, value: Any) -> int: ...
    def append_axis(self, value: Vec3) -> int: ...
    def append_bodyA(self, value: str) -> int: ...
    def append_bodyB(self, value: str) -> int: ...
    def append_max_control(self, value: Any) -> int: ...
    def append_min_control(self, value: Any) -> int: ...
    def append_optimal_force(self, value: Any) -> int: ...
    def append_torque_is_global(self, value: Any) -> int: ...
    def appliesForce(self, s: State) -> bool: ...
    def assign(self, *args, **kwargs) -> Any: ...
    def clearConnections(self, *args, **kwargs) -> Any: ...
    def clone(self) -> Any: ...
    def computeEquilibrium(self, *args, **kwargs) -> Any: ...
    def computeForce(self, *args, **kwargs) -> Any: ...
    def connectToModel(self, *args, **kwargs) -> Any: ...
    def constructProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def constructProperty_axis(self, *args, **kwargs) -> Any: ...
    def constructProperty_bodyA(self, *args, **kwargs) -> Any: ...
    def constructProperty_bodyB(self, *args, **kwargs) -> Any: ...
    def constructProperty_max_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_min_control(self, *args, **kwargs) -> Any: ...
    def constructProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def constructProperty_torque_is_global(self, *args, **kwargs) -> Any: ...
    def copyProperty_appliesForce(self, *args, **kwargs) -> Any: ...
    def copyProperty_axis(self, *args, **kwargs) -> Any: ...
    def copyProperty_bodyA(self, *args, **kwargs) -> Any: ...
    def copyProperty_bodyB(self, *args, **kwargs) -> Any: ...
    def copyProperty_max_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_min_control(self, *args, **kwargs) -> Any: ...
    def copyProperty_optimal_force(self, *args, **kwargs) -> Any: ...
    def copyProperty_torque_is_global(self, *args, **kwargs) -> Any: ...
    def dump(self) -> str: ...
    def finalizeConnections(self, *args, **kwargs) -> Any: ...
    def finalizeFromProperties(self, *args, **kwargs) -> Any: ...
    def findComponent(self, pathToFind: ComponentPath) -> Any: ...
    @overload
    def findComponent(self, pathToFind: str) -> Any: ...
    def generateDecorations(self, *args, **kwargs) -> Any: ...
    def getAbsolutePath(self) -> Any: ...
    def getAbsolutePathString(self) -> str: ...
    def getActuation(self, s: State) -> float: ...
    def getAuthors(self) -> str: ...
    def getAxis(self) -> Any: ...
    def getBodyA(self) -> Any: ...
    def getBodyB(self) -> Any: ...
    def getCacheVariableIndex(self, name: str) -> CacheEntryIndex: ...
    def getClassName(self) -> str: ...
    def getComponent(self, pathname: str) -> Any: ...
    def getComponentsList(self) -> Any: ...
    def getConcreteClassName(self) -> str: ...
    def getConnectee(self, name: str) -> Any: ...
    @overload
    def getConnectee(self, name: str, index: int) -> Any: ...
    def getControl(self, s: State) -> float: ...
    def getControls(self, *args, **kwargs) -> Any: ...
    def getDebugLevel(self) -> int: ...
    def getDefaultControls(self) -> Any: ...
    def getDefaultInstanceOfType(self, concreteClassName: str) -> Any: ...
    def getDescription(self) -> str: ...
    def getDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def getDiscreteVariableNames(self) -> Any: ...
    def getDiscreteVariableValue(self, state: State, path: str) -> float: ...
    def getDocumentFileName(self) -> str: ...
    def getDocumentFileVersion(self) -> int: ...
    def getForceIndex(self) -> ForceIndex: ...
    def getInlined(self) -> bool: ...
    def getInput(self, name: str) -> Any: ...
    def getInputNames(self) -> Any: ...
    def getMaxControl(self) -> float: ...
    def getMinControl(self) -> float: ...
    def getModel(self) -> Any: ...
    def getModelingOption(self, state: State, path: str) -> int: ...
    @overload
    def getModelingOption(self, state: State, path: ComponentPath) -> int: ...
    def getModelingOptionNames(self) -> Any: ...
    def getName(self) -> str: ...
    def getNumInputs(self) -> int: ...
    def getNumOutputs(self) -> int: ...
    def getNumProperties(self) -> int: ...
    def getNumSockets(self) -> int: ...
    def getNumStateVariables(self) -> int: ...
    def getOptimalForce(self) -> float: ...
    def getOutput(self, name: str) -> Any: ...
    def getOutputNames(self) -> Any: ...
    def getOverrideActuation(self, s: State) -> float: ...
    def getOwner(self) -> Any: ...
    def getPower(self, s: State) -> float: ...
    def getPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def getPropertyByName(self, name: str) -> Any: ...
    def getRecordLabels(self) -> Any: ...
    def getRecordValues(self, state: State) -> Any: ...
    def getReferences(self) -> str: ...
    def getRegisteredTypenames(self, *args, **kwargs) -> Any: ...
    def getRelativePath(self, wrt: Component) -> Any: ...
    def getRelativePathString(self, wrt: Component) -> str: ...
    def getRoot(self) -> Any: ...
    def getSerializeAllDefaults(self) -> bool: ...
    def getSocket(self, name: str) -> Any: ...
    def getSocketNames(self) -> Any: ...
    def getSpeed(self, s: State) -> float: ...
    def getStateVariableDerivativeValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableDerivativeValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableNames(self) -> Any: ...
    def getStateVariableValue(self, state: State, name: str) -> float: ...
    @overload
    def getStateVariableValue(self, state: State, path: ComponentPath) -> float: ...
    def getStateVariableValues(self, state: State) -> Any: ...
    def getStress(self, s: State) -> float: ...
    def getSystem(self) -> MultibodySystem: ...
    def getTorqueIsGlobal(self) -> bool: ...
    def get_appliesForce(self, i: int) -> Any: ...
    @overload
    def get_appliesForce(self) -> Any: ...
    def get_axis(self, i: int) -> Any: ...
    @overload
    def get_axis(self) -> Any: ...
    def get_bodyA(self, i: int) -> Any: ...
    @overload
    def get_bodyA(self) -> str: ...
    def get_bodyB(self, i: int) -> Any: ...
    @overload
    def get_bodyB(self) -> str: ...
    def get_max_control(self, i: int) -> Any: ...
    @overload
    def get_max_control(self) -> Any: ...
    def get_min_control(self, i: int) -> Any: ...
    @overload
    def get_min_control(self) -> Any: ...
    def get_optimal_force(self, i: int) -> Any: ...
    @overload
    def get_optimal_force(self) -> Any: ...
    def get_torque_is_global(self, i: int) -> Any: ...
    @overload
    def get_torque_is_global(self) -> Any: ...
    def hasComponent(self, pathname: str) -> bool: ...
    def hasModel(self) -> bool: ...
    def hasOwner(self) -> bool: ...
    def hasProperty(self, name: str) -> bool: ...
    def hasSystem(self) -> bool: ...
    def hasVisualPath(self) -> bool: ...
    def initStateFromProperties(self, *args, **kwargs) -> Any: ...
    def isA(self, type: str) -> bool: ...
    def isActuationOverridden(self, s: State) -> bool: ...
    def isCacheVariableValid(self, state: State, name: str) -> bool: ...
    def isComponentInOwnershipTree(self, component: Component) -> bool: ...
    def isEqualTo(self, aObject: Object) -> bool: ...
    def isKindOf(self, type: str) -> bool: ...
    def isObjectUpToDateWithProperties(self) -> bool: ...
    def makeObjectFromFile(self, fileName: str) -> Any: ...
    def markCacheVariableInvalid(self, *args, **kwargs) -> Any: ...
    def markCacheVariableValid(self, *args, **kwargs) -> Any: ...
    def newInstanceOfType(self, concreteClassName: str) -> Any: ...
    def numControls(self) -> int: ...
    def overrideActuation(self, *args, **kwargs) -> Any: ...
    def postScale(self, *args, **kwargs) -> Any: ...
    def preScale(self, *args, **kwargs) -> Any: ...
    def printComponentsMatching(self, substring: str) -> Any: ...
    def printInputInfo(self, *args, **kwargs) -> Any: ...
    def printOutputInfo(self, *args, **kwargs) -> Any: ...
    def printSocketInfo(self, *args, **kwargs) -> Any: ...
    def printSubcomponentInfo(self, *args, **kwargs) -> Any: ...
    def printToXML(self, fileName: str) -> bool: ...
    def produceForces(self, *args, **kwargs) -> Any: ...
    def readObjectFromXMLNodeOrFile(self, *args, **kwargs) -> Any: ...
    def registerType(self, *args, **kwargs) -> Any: ...
    def renameType(self, *args, **kwargs) -> Any: ...
    def resolveVariableNameAndOwner(self, path: ComponentPath, varName: Any) -> Any: ...
    def safeDownCast(self, obj: Object) -> Any: ...
    def scale(self, *args, **kwargs) -> Any: ...
    def setActuation(self, *args, **kwargs) -> Any: ...
    def setAllPropertiesUseDefault(self, *args, **kwargs) -> Any: ...
    def setAppliesForce(self, *args, **kwargs) -> Any: ...
    def setAuthors(self, *args, **kwargs) -> Any: ...
    def setAxis(self, *args, **kwargs) -> Any: ...
    def setBodyA(self, *args, **kwargs) -> Any: ...
    def setBodyB(self, *args, **kwargs) -> Any: ...
    def setControls(self, *args, **kwargs) -> Any: ...
    def setDebugLevel(self, *args, **kwargs) -> Any: ...
    def setDescription(self, *args, **kwargs) -> Any: ...
    def setDiscreteVariableValue(self, *args, **kwargs) -> Any: ...
    def setInlined(self, *args, **kwargs) -> Any: ...
    def setMaxControl(self, *args, **kwargs) -> Any: ...
    def setMinControl(self, *args, **kwargs) -> Any: ...
    def setModelingOption(self, *args, **kwargs) -> Any: ...
    def setName(self, *args, **kwargs) -> Any: ...
    def setOptimalForce(self, *args, **kwargs) -> Any: ...
    def setOverrideActuation(self, *args, **kwargs) -> Any: ...
    def setPropertiesFromState(self, *args, **kwargs) -> Any: ...
    def setReferences(self, *args, **kwargs) -> Any: ...
    def setSerializeAllDefaults(self, *args, **kwargs) -> Any: ...
    def setStateVariableValue(self, *args, **kwargs) -> Any: ...
    def setStateVariableValues(self, *args, **kwargs) -> Any: ...
    def setTorqueIsGlobal(self, *args, **kwargs) -> Any: ...
    def set_appliesForce(self, *args, **kwargs) -> Any: ...
    def set_axis(self, *args, **kwargs) -> Any: ...
    def set_bodyA(self, *args, **kwargs) -> Any: ...
    def set_bodyB(self, *args, **kwargs) -> Any: ...
    def set_max_control(self, *args, **kwargs) -> Any: ...
    def set_min_control(self, *args, **kwargs) -> Any: ...
    def set_optimal_force(self, *args, **kwargs) -> Any: ...
    def set_torque_is_global(self, *args, **kwargs) -> Any: ...
    def shouldBeParallelized(self) -> bool: ...
    thisown: Any
    def toString(self) -> str: ...
    def tryGetOutput(self, name: str) -> Any: ...
    def tryGetSocket(self, name: str) -> Any: ...
    def tryUpdOutput(self, name: str) -> Any: ...
    def tryUpdSocket(self, name: str) -> Any: ...
    def updComponent(self, pathname: str) -> Any: ...
    def updDiscreteVariableAbstractValue(self, state: State, path: str) -> AbstractValue: ...
    def updInput(self, name: str) -> Any: ...
    def updModel(self) -> Any: ...
    def updOutput(self, name: str) -> Any: ...
    def updPropertyByIndex(self, propertyIndex: int) -> Any: ...
    def updPropertyByName(self, name: str) -> Any: ...
    def updSocket(self, name: str) -> Any: ...
    def upd_appliesForce(self, i: int) -> bool: ...
    @overload
    def upd_appliesForce(self) -> Any: ...
    def upd_axis(self, i: int) -> Any: ...
    @overload
    def upd_axis(self) -> Any: ...
    def upd_bodyA(self, i: int) -> str: ...
    @overload
    def upd_bodyA(self) -> Any: ...
    def upd_bodyB(self, i: int) -> str: ...
    @overload
    def upd_bodyB(self) -> Any: ...
    def upd_max_control(self, i: int) -> float: ...
    @overload
    def upd_max_control(self) -> Any: ...
    def upd_min_control(self, i: int) -> float: ...
    @overload
    def upd_min_control(self) -> Any: ...
    def upd_optimal_force(self, i: int) -> float: ...
    @overload
    def upd_optimal_force(self) -> Any: ...
    def upd_torque_is_global(self, i: int) -> bool: ...
    @overload
    def upd_torque_is_global(self) -> Any: ...
    def updateFromXMLNode(self, *args, **kwargs) -> Any: ...
    def updateXMLNode(self, *args, **kwargs) -> Any: ...

