name: Wheels
# Build distribution wheels with OpenSim dependencies

on:
  workflow_dispatch:
    inputs:
      build_ubuntu:
        description: 'Build Ubuntu wheels'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS wheels'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows wheels'
        required: false
        default: true
        type: boolean
  # pull_request:
  # push:
  #   branches:
  #     - master
  #     - main
  # release:
  #   types:
  #     - published

env:
  FORCE_COLOR: 3

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - build only selected platforms
            matrix="[]"
            if [ "${{ inputs.build_ubuntu }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "ubuntu-latest"}]')
            fi
            if [ "${{ inputs.build_macos }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "macos-latest"}]')
            fi
            if [ "${{ inputs.build_windows }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "windows-latest"}]')
            fi
          else
            # Automatic trigger - build all platforms
            matrix='[{"os": "ubuntu-latest"}, {"os": "macos-latest"}, {"os": "windows-latest"}]'
          fi
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT


  build_opensim:
    name: Build OpenSim on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get OpenSim Core submodule SHA
        id: opensim-sha
        run: |
          OPENSIM_SHA=$(git rev-parse HEAD:src/opensim-core)
          echo "opensim_sha=$OPENSIM_SHA" >> $GITHUB_OUTPUT
          echo "OpenSim Core SHA: $OPENSIM_SHA"
        shell: bash

      - name: Cache OpenSim build
        id: cache-opensim
        uses: actions/cache@v4
        with:
          path: |
            build/opensim-workspace
          key: opensim-${{ matrix.os }}-${{ steps.opensim-sha.outputs.opensim_sha }}
          restore-keys: |
            opensim-${{ matrix.os }}-

      - name: Setup system dependencies  
        if: steps.cache-opensim.outputs.cache-hit != 'true'
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake git libpcre2-dev libpcre3-dev
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install cmake git
          fi
        shell: bash

      - name: Build OpenSim dependencies
        if: steps.cache-opensim.outputs.cache-hit != 'true'
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            chmod +x ./scripts/opensim/setup_opensim_linux.sh && ./scripts/opensim/setup_opensim_linux.sh
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            chmod +x ./scripts/opensim/setup_opensim_macos.sh && ./scripts/opensim/setup_opensim_macos.sh
          elif [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            powershell.exe -ExecutionPolicy Bypass -File ./scripts/opensim/setup_opensim_windows.ps1
          fi
        shell: bash

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: [matrix_prep, build_opensim]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get OpenSim Core submodule SHA
        id: opensim-sha
        run: |
          OPENSIM_SHA=$(git rev-parse HEAD:src/opensim-core)
          echo "opensim_sha=$OPENSIM_SHA" >> $GITHUB_OUTPUT
          echo "OpenSim Core SHA: $OPENSIM_SHA"
        shell: bash

      - name: Restore OpenSim build cache
        uses: actions/cache@v4
        with:
          path: |
            build/opensim-workspace
          key: opensim-${{ matrix.os }}-${{ steps.opensim-sha.outputs.opensim_sha }}
          restore-keys: |
            opensim-${{ matrix.os }}-

      - name: Clean build artifacts
        run: |
          echo "Cleaning build artifacts to prevent linking conflicts..."
          # Remove any .so, .o, and .pyc files that could cause issues
          find . -name "*.so" -not -path "./.venv/*" -not -path "./venv/*" -delete 2>/dev/null || true
          find . -name "*.o" -delete 2>/dev/null || true
          find . -name "*.pyc" -delete 2>/dev/null || true
          find . -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true
          # Clean any Python build directories that might have been created
          rm -rf build/temp* build/lib* build/bdist* 2>/dev/null || true
          # Clean opensim-workspace build artifacts but preserve the built libraries
          if [ -d "build/opensim-workspace" ]; then
            echo "Cleaning opensim-workspace build artifacts..."
            # Remove the problematic intermediate .so files from build directories
            rm -f build/opensim-workspace/opensim-build/lib*.so 2>/dev/null || true
            rm -f build/opensim-workspace/dependencies-build/simbody/build/lib*.so 2>/dev/null || true
            rm -f build/opensim-workspace/dependencies-build/ezc3d/build/lib*.so 2>/dev/null || true
            # Remove object files and CMake cache
            find build/opensim-workspace -name "*.o" -delete 2>/dev/null || true
            find build/opensim-workspace -name "CMakeFiles" -type d -exec rm -rf {} + 2>/dev/null || true
            find build/opensim-workspace -name "CMakeCache.txt" -delete 2>/dev/null || true
            # Clean specific build directories that can cause conflicts
            rm -rf build/opensim-workspace/opensim-build/CMakeFiles 2>/dev/null || true
            rm -rf build/opensim-workspace/dependencies-build/*/CMakeFiles 2>/dev/null || true
            rm -rf build/opensim-workspace/dependencies-build/*/build/CMakeFiles 2>/dev/null || true
          fi
          echo "Build artifact cleanup completed"
        shell: bash

      - uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS_MACOS: universal2
          CIBW_ARCHS_WINDOWS: auto ARM64
          CIBW_ARCHS_LINUX: auto aarch64
          # Use manylinux_2_28 for broader compatibility while still having modern tooling
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_28  
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_S390X_IMAGE: manylinux_2_28
          CIBW_TEST_SKIP: "*linux*"
          # Install specific SWIG 4.1.1 version to match CMake requirements
          CIBW_BEFORE_ALL_LINUX: |
            yum install -y wget pcre-devel autoconf automake libtool bison &&
            cd /tmp &&
            wget https://github.com/swig/swig/archive/v4.1.1.tar.gz &&
            tar xzf v4.1.1.tar.gz &&
            cd swig-4.1.1 &&
            ./autogen.sh &&
            ./configure --prefix=/usr/local &&
            make -j$(nproc) &&
            make install &&
            ln -sf /usr/local/bin/swig /usr/bin/swig &&
            swig -version
          CIBW_BEFORE_ALL_MACOS: |
            brew uninstall --ignore-dependencies swig || true &&
            brew install autoconf automake libtool pcre &&
            cd /tmp &&
            wget https://github.com/swig/swig/archive/v4.1.1.tar.gz &&
            tar xzf v4.1.1.tar.gz &&
            cd swig-4.1.1 &&
            ./autogen.sh &&
            ./configure --prefix=/usr/local &&
            make -j$(sysctl -n hw.ncpu) &&
            make install &&
            swig -version
          CIBW_BEFORE_ALL_WINDOWS: |
            mkdir -p C:\temp &&
            cd C:\temp &&
            curl -L -o swig-4.1.1-win.zip https://sourceforge.net/projects/swig/files/swigwin/swigwin-4.1.1/swigwin-4.1.1.zip/download &&
            unzip -o swig-4.1.1-win.zip &&
            cp -r swigwin-4.1.1/* C:\Windows\System32\ &&
            swig -version
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=10.15 
            CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
            REPAIR_LIBRARY_PATH=./build/opensim-workspace/opensim-install/sdk/Simbody/lib
          CIBW_ENVIRONMENT_LINUX: >
            LD_LIBRARY_PATH=/host$(pwd)/build/opensim-workspace/opensim-install/sdk/lib:/host$(pwd)/build/opensim-workspace/opensim-install/sdk/Simbody/lib:/host$(pwd)/build/opensim-workspace/opensim-install/sdk/Simbody/lib64:/host$(pwd)/build/opensim-workspace/dependencies-install/simbody/lib:/host$(pwd)/build/opensim-workspace/dependencies-install/simbody/lib64:/host$(pwd)/build/opensim-workspace/dependencies-install/ezc3d/lib:/host$(pwd)/build/opensim-workspace/dependencies-install/ezc3d/lib64:/host$(pwd)/build/opensim-workspace/dependencies-install/spdlog/lib:/host$(pwd)/build/opensim-workspace/dependencies-install/spdlog/lib64:/host$(pwd)/build/opensim-workspace/opensim-install/sdk/spdlog/lib:/host$(pwd)/build/opensim-workspace/opensim-install/sdk/spdlog/lib64
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            echo "=== Architecture Check ===" &&
            file ./build/opensim-workspace/opensim-install/sdk/Simbody/lib/libSimTKmath.3.8.dylib &&
            file ./build/opensim-workspace/opensim-install/sdk/Simbody/lib/libSimTKsimbody.3.8.dylib &&
            echo "=== Delocating Wheel ===" &&
            DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH 
            delocate-wheel -w {dest_dir} -v {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: wheelhouse/*.whl


  upload_all:
    name: Upload if release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1