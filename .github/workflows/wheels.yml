name: Wheels
# Build distribution wheels with OpenSim dependencies

on:
  workflow_dispatch:
    inputs:
      build_ubuntu:
        description: 'Build Ubuntu wheels'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS wheels'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows wheels'
        required: false
        default: true
        type: boolean
  # pull_request:
  # push:
  #   branches:
  #     - master
  #     - main
  # release:
  #   types:
  #     - published

env:
  FORCE_COLOR: 3

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - build only selected platforms
            matrix="[]"
            if [ "${{ inputs.build_ubuntu }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "ubuntu-latest"}]')
            fi
            if [ "${{ inputs.build_macos }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "macos-latest"}]')
            fi
            if [ "${{ inputs.build_windows }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "windows-latest"}]')
            fi
          else
            # Automatic trigger - build all platforms
            matrix='[{"os": "ubuntu-latest"}, {"os": "macos-latest"}, {"os": "windows-latest"}]'
          fi
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT


  build_wheels:
    name: Wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup system dependencies  
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            sudo apt-get update
            sudo apt-get install -y cmake git libpcre2-dev libpcre3-dev
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            brew install cmake git
          fi
        shell: bash

      - name: Get OpenSim Core submodule SHA
        id: opensim-sha
        run: |
          OPENSIM_SHA=$(git rev-parse HEAD:src/opensim-core)
          echo "opensim_sha=$OPENSIM_SHA" >> $GITHUB_OUTPUT
          echo "OpenSim Core SHA: $OPENSIM_SHA"
        shell: bash


      - uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS_MACOS: universal2
          CIBW_ARCHS_WINDOWS: auto ARM64
          CIBW_ARCHS_LINUX: auto aarch64
          # Use manylinux_2_28 for broader compatibility while still having modern tooling
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_28  
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_S390X_IMAGE: manylinux_2_28
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=10.15 
            CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
            REPAIR_LIBRARY_PATH=./build/opensim-workspace/opensim-install/sdk/Simbody/lib
            FORCE_REBUILD_OPENSIM=true
          CIBW_ENVIRONMENT_LINUX: >
            LD_LIBRARY_PATH=$(pwd)/build/opensim-workspace/opensim-install/sdk/lib:$(pwd)/build/opensim-workspace/opensim-install/sdk/Simbody/lib:$(pwd)/build/opensim-workspace/opensim-install/sdk/Simbody/lib64:$(pwd)/build/opensim-workspace/dependencies-install/simbody/lib:$(pwd)/build/opensim-workspace/dependencies-install/simbody/lib64:$(pwd)/build/opensim-workspace/dependencies-install/ezc3d/lib:$(pwd)/build/opensim-workspace/dependencies-install/ezc3d/lib64:$(pwd)/build/opensim-workspace/dependencies-install/spdlog/lib:$(pwd)/build/opensim-workspace/dependencies-install/spdlog/lib64:$(pwd)/build/opensim-workspace/opensim-install/sdk/spdlog/lib:$(pwd)/build/opensim-workspace/opensim-install/sdk/spdlog/lib64:$(pwd)/build/opensim-workspace/dependencies-build/simbody/build:$(pwd)/build/opensim-workspace/dependencies-build/ezc3d/build:$(pwd)/build/opensim-workspace/opensim-build
            FORCE_REBUILD_OPENSIM=true
          CIBW_ENVIRONMENT_WINDOWS: >
            FORCE_REBUILD_OPENSIM=true
          CIBW_BEFORE_BUILD_MACOS: chmod +x ./scripts/opensim/setup_opensim_macos.sh && ./scripts/opensim/setup_opensim_macos.sh
          CIBW_BEFORE_BUILD_LINUX: chmod +x ./scripts/opensim/setup_opensim_linux.sh && ./scripts/opensim/setup_opensim_linux.sh
          CIBW_BEFORE_BUILD_WINDOWS: powershell.exe -ExecutionPolicy Bypass -File ./scripts/opensim/setup_opensim_windows.ps1
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            echo "=== Architecture Check ===" &&
            file ./build/opensim-workspace/opensim-install/sdk/Simbody/lib/libSimTKmath.3.8.dylib &&
            file ./build/opensim-workspace/opensim-install/sdk/Simbody/lib/libSimTKsimbody.3.8.dylib &&
            echo "=== Delocating Wheel ===" &&
            DYLD_LIBRARY_PATH=$REPAIR_LIBRARY_PATH 
            delocate-wheel -w {dest_dir} -v {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            echo "=== Debug: Working Directory ===" &&
            pwd &&
            echo "=== Debug: LD_LIBRARY_PATH ===" &&
            echo "LD_LIBRARY_PATH=$LD_LIBRARY_PATH" &&
            echo "=== Debug: Verifying library directories exist ===" &&
            for dir in $(echo $LD_LIBRARY_PATH | tr ':' '\n'); do
              if [ -d "$dir" ]; then
                echo "✓ Found directory: $dir"
                ls -la "$dir"/*.so* 2>/dev/null | head -3 || echo "  (no .so files found)"
              else
                echo "✗ Missing directory: $dir"
              fi
            done &&
            echo "=== Debug: Checking for specific problem libraries ===" &&
            find ./build/opensim-workspace -name "libezc3d.so*" 2>/dev/null | head -3 &&
            find ./build/opensim-workspace -name "libosim*.so*" 2>/dev/null | head -5 &&
            echo "=== Repairing Wheel ===" &&
            auditwheel repair -w {dest_dir} {wheel}

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: wheelhouse/*.whl


  upload_all:
    name: Upload if release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1