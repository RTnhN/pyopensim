name: Wheels
# Build distribution wheels with OpenSim dependencies

on:
  workflow_dispatch:
    inputs:
      build_ubuntu:
        description: 'Build Ubuntu wheels'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS wheels'
        required: false
        default: true
        type: boolean
      build_windows:
        description: 'Build Windows wheels'
        required: false
        default: true
        type: boolean
  # pull_request:
  # push:
  #   branches:
  #     - master
  #     - main
  # release:
  #   types:
  #     - published

env:
  FORCE_COLOR: 3

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  matrix_prep:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - build only selected platforms
            matrix="[]"
            if [ "${{ inputs.build_ubuntu }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "ubuntu-latest"}]')
            fi
            if [ "${{ inputs.build_macos }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "macos-latest"}]')
            fi
            if [ "${{ inputs.build_windows }}" = "true" ]; then
              matrix=$(echo $matrix | jq '. += [{"os": "windows-latest"}]')
            fi
          else
            # Automatic trigger - build all platforms
            matrix='[{"os": "ubuntu-latest"}, {"os": "macos-latest"}, {"os": "windows-latest"}]'
          fi
          echo "matrix={\"include\":$(echo $matrix)}" >> $GITHUB_OUTPUT


  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: matrix_prep
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix_prep.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get OpenSim Core submodule SHA
        id: opensim-sha
        run: |
          OPENSIM_SHA=$(git rev-parse HEAD:src/opensim-core)
          echo "opensim_sha=$OPENSIM_SHA" >> $GITHUB_OUTPUT
          echo "OpenSim Core SHA: $OPENSIM_SHA"
        shell: bash


      # Cache OpenSim build per container environment and architecture
      - name: Cache OpenSim build
        uses: actions/cache@v4
        with:
          path: |
            opensim-cache
          key: opensim-${{ matrix.os }}-${{ runner.arch }}-${{ steps.opensim-sha.outputs.opensim_sha }}-v3
          restore-keys: |
            opensim-${{ matrix.os }}-${{ runner.arch }}-${{ steps.opensim-sha.outputs.opensim_sha }}-
            opensim-${{ matrix.os }}-${{ runner.arch }}-

      - uses: pypa/cibuildwheel@v3.1.3
        env:
          CIBW_ARCHS_MACOS: universal2
          CIBW_ARCHS_WINDOWS: auto ARM64
          CIBW_ARCHS_LINUX: auto aarch64
          # Use manylinux_2_28 for broader compatibility while still having modern tooling
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_I686_IMAGE: manylinux_2_28  
          CIBW_MANYLINUX_AARCH64_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_PPC64LE_IMAGE: manylinux_2_28
          CIBW_MANYLINUX_S390X_IMAGE: manylinux_2_28
          CIBW_TEST_SKIP: "*linux*"
          OPENSIM_SHA: ${{ steps.opensim-sha.outputs.opensim_sha }}
          
          # Linux: Build OpenSim inside manylinux container
          CIBW_BEFORE_BUILD_LINUX: >
            echo "=== Building OpenSim inside manylinux container ===" &&
            CACHE_DIR="/host$(pwd)/opensim-cache/linux-$(uname -m)" &&
            OPENSIM_INSTALL="$CACHE_DIR/opensim-install" &&
            if [ -d "$OPENSIM_INSTALL" ] && [ -f "$OPENSIM_INSTALL/.build_complete" ]; then
              echo "✓ Using cached OpenSim build from $OPENSIM_INSTALL" &&
              ls -la "$OPENSIM_INSTALL/sdk/lib/" || true;
            else
              echo "Building OpenSim from scratch..." &&
              dnf install -y gcc gcc-c++ make cmake autoconf automake libtool pkgconfig openblas-devel lapack-devel freeglut-devel libXi-devel libXmu-devel python3-devel git openssl-devel pcre-devel pcre2-devel gcc-gfortran patchelf java-1.8.0-openjdk-devel wget bison byacc &&
              mkdir -p "$CACHE_DIR" &&
              cd "$CACHE_DIR" &&
              curl -L https://github.com/swig/swig/archive/v4.1.1.tar.gz | tar xz &&
              cd swig-4.1.1 &&
              ./autogen.sh &&
              ./configure --prefix="$CACHE_DIR/swig" &&
              make -j$(nproc) &&
              make install &&
              cd .. &&
              rm -rf swig-4.1.1 &&
              export PATH="$CACHE_DIR/swig/bin:$PATH" &&
              mkdir -p dependencies-build &&
              cd dependencies-build &&
              cmake "/host$(pwd)/src/opensim-core/dependencies" -DCMAKE_INSTALL_PREFIX="$CACHE_DIR/dependencies-install" -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-pthread -fPIC" -DCMAKE_C_FLAGS="-pthread -fPIC" -DSUPERBUILD_ezc3d=ON -DOPENSIM_WITH_CASADI=OFF &&
              cmake --build . --config Release -j$(nproc) &&
              cd .. &&
              mkdir -p opensim-build &&
              cd opensim-build &&
              cmake "/host$(pwd)/src/opensim-core" -DCMAKE_INSTALL_PREFIX="$OPENSIM_INSTALL" -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="-pthread -Wno-array-bounds -fPIC" -DCMAKE_C_FLAGS="-pthread -fPIC" -DCMAKE_EXE_LINKER_FLAGS="-pthread" -DCMAKE_SHARED_LINKER_FLAGS="-pthread" -DOPENSIM_DEPENDENCIES_DIR="$CACHE_DIR/dependencies-install" -DCMAKE_PREFIX_PATH="$CACHE_DIR/dependencies-install" -DBUILD_JAVA_WRAPPING=OFF -DBUILD_PYTHON_WRAPPING=OFF -DBUILD_TESTING=OFF -DBUILD_API_EXAMPLES=OFF -DOPENSIM_C3D_PARSER=ezc3d -DOPENSIM_WITH_CASADI=OFF -DOPENSIM_WITH_TROPTER=OFF -DOPENSIM_WITH_MOCO=OFF -DOPENSIM_INSTALL_UNIX_FHS=OFF -DSWIG_DIR="$CACHE_DIR/swig/share/swig" -DSWIG_EXECUTABLE="$CACHE_DIR/swig/bin/swig" &&
              cmake --build . --config Release -j$(nproc) &&
              cmake --install . &&
              touch "$OPENSIM_INSTALL/.build_complete" &&
              echo "✓ OpenSim build complete";
            fi &&
            echo "Setting up build environment..." &&
            export PATH="$CACHE_DIR/swig/bin:$PATH" &&
            export OPENSIM_INSTALL_DIR="$OPENSIM_INSTALL" &&
            swig -version
            
          # macOS: Build OpenSim natively  
          CIBW_BEFORE_BUILD_MACOS: >
            echo "=== Building OpenSim for macOS ===" &&
            PROJECT_ROOT="$(pwd)" &&
            CACHE_DIR="$PROJECT_ROOT/opensim-cache/macos-universal2" &&
            OPENSIM_INSTALL="$CACHE_DIR/opensim-install" &&
            if [ -d "$OPENSIM_INSTALL" ] && [ -f "$OPENSIM_INSTALL/.build_complete" ]; then
              echo "✓ Using cached OpenSim build from $OPENSIM_INSTALL";
            else
              echo "Building OpenSim from scratch..." &&
              brew install cmake autoconf automake libtool pkgconfig &&
              mkdir -p "$CACHE_DIR" &&
              cd "$CACHE_DIR" &&
              curl -L https://github.com/swig/swig/archive/v4.1.1.tar.gz | tar xz &&
              cd swig-4.1.1 &&
              ./autogen.sh &&
              ./configure --prefix="$CACHE_DIR/swig" &&
              make -j$(sysctl -n hw.ncpu) &&
              make install &&
              cd .. &&
              rm -rf swig-4.1.1 &&
              export PATH="$CACHE_DIR/swig/bin:$PATH" &&
              mkdir -p dependencies-build &&
              cd dependencies-build &&
              cmake "$PROJECT_ROOT/src/opensim-core/dependencies" -DCMAKE_INSTALL_PREFIX="$CACHE_DIR/dependencies-install" -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 -DSUPERBUILD_ezc3d=ON -DOPENSIM_WITH_CASADI=OFF &&
              cmake --build . --config Release -j$(sysctl -n hw.ncpu) &&
              cd .. &&
              mkdir -p opensim-build &&
              cd opensim-build &&
              cmake "$PROJECT_ROOT/src/opensim-core" -DCMAKE_INSTALL_PREFIX="$OPENSIM_INSTALL" -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_ARCHITECTURES="x86_64;arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET=14.0 -DOPENSIM_DEPENDENCIES_DIR="$CACHE_DIR/dependencies-install" -DCMAKE_PREFIX_PATH="$CACHE_DIR/dependencies-install" -DBUILD_JAVA_WRAPPING=OFF -DBUILD_PYTHON_WRAPPING=OFF -DBUILD_TESTING=OFF -DBUILD_API_EXAMPLES=OFF -DOPENSIM_C3D_PARSER=ezc3d -DOPENSIM_WITH_CASADI=OFF -DOPENSIM_WITH_TROPTER=OFF -DOPENSIM_WITH_MOCO=OFF -DOPENSIM_INSTALL_UNIX_FHS=OFF -DSWIG_DIR="$CACHE_DIR/swig/share/swig" -DSWIG_EXECUTABLE="$CACHE_DIR/swig/bin/swig" &&
              cmake --build . --config Release -j$(sysctl -n hw.ncpu) &&
              cmake --install . &&
              touch "$OPENSIM_INSTALL/.build_complete" &&
              echo "✓ OpenSim build complete";
            fi &&
            export PATH="$CACHE_DIR/swig/bin:$PATH" &&
            export OPENSIM_INSTALL_DIR="$OPENSIM_INSTALL"
            
          # Windows: Build OpenSim natively (PowerShell) 
          CIBW_BEFORE_BUILD_WINDOWS: >
            Write-Host "=== Building OpenSim for Windows ===" ;
            $PROJECT_ROOT = "$(pwd)" ;
            $CACHE_DIR = "$PROJECT_ROOT/opensim-cache/windows-$($env:PROCESSOR_ARCHITECTURE)" ;
            $OPENSIM_INSTALL = "$CACHE_DIR/opensim-install" ;
            if ((Test-Path "$OPENSIM_INSTALL") -and (Test-Path "$OPENSIM_INSTALL/.build_complete")) {
              Write-Host "✓ Using cached OpenSim build from $OPENSIM_INSTALL" ;
            } else {
              Write-Host "Building OpenSim from scratch..." ;
              New-Item -ItemType Directory -Force -Path "$CACHE_DIR" ;
              Set-Location "$CACHE_DIR" ;
              Write-Host "Downloading precompiled SWIG for Windows..." ;
              Invoke-WebRequest -Uri "http://prdownloads.sourceforge.net/swig/swigwin-4.1.1.zip" -OutFile "swig.zip" ;
              Expand-Archive -Path "swig.zip" -DestinationPath "." ;
              Move-Item "swigwin-4.1.1" "swig" ;
              Remove-Item "swig.zip" ;
              $env:PATH = "$CACHE_DIR/swig;$env:PATH" ;
              New-Item -ItemType Directory -Force -Path dependencies-build ;
              Set-Location dependencies-build ;
              cmake "$PROJECT_ROOT/src/opensim-core/dependencies" -DCMAKE_INSTALL_PREFIX="$CACHE_DIR/dependencies-install" -DCMAKE_BUILD_TYPE=Release -DSUPERBUILD_ezc3d=ON -DOPENSIM_WITH_CASADI=OFF ;
              cmake --build . --config Release -j$([Environment]::ProcessorCount) ;
              Set-Location .. ;
              New-Item -ItemType Directory -Force -Path opensim-build ;
              Set-Location opensim-build ;
              cmake "$PROJECT_ROOT/src/opensim-core" -DCMAKE_INSTALL_PREFIX="$OPENSIM_INSTALL" -DCMAKE_BUILD_TYPE=Release -DOPENSIM_DEPENDENCIES_DIR="$CACHE_DIR/dependencies-install" -DCMAKE_PREFIX_PATH="$CACHE_DIR/dependencies-install" -DBUILD_JAVA_WRAPPING=OFF -DBUILD_PYTHON_WRAPPING=OFF -DBUILD_TESTING=OFF -DBUILD_API_EXAMPLES=OFF -DOPENSIM_C3D_PARSER=ezc3d -DOPENSIM_WITH_CASADI=OFF -DOPENSIM_WITH_TROPTER=OFF -DOPENSIM_WITH_MOCO=OFF -DOPENSIM_INSTALL_UNIX_FHS=OFF -DSWIG_DIR="$CACHE_DIR/swig/Lib" -DSWIG_EXECUTABLE="$CACHE_DIR/swig/swig.exe" ;
              cmake --build . --config Release -j$([Environment]::ProcessorCount) ;
              cmake --install . ;
              New-Item -ItemType File -Force -Path "$OPENSIM_INSTALL/.build_complete" ;
              Write-Host "✓ OpenSim build complete" ;
            } ;
            $env:PATH = "$CACHE_DIR/swig;$env:PATH" ;
            $env:OPENSIM_INSTALL_DIR = "$OPENSIM_INSTALL"

          # Environment variables for build
          CIBW_ENVIRONMENT_MACOS: >
            MACOSX_DEPLOYMENT_TARGET=14.0 
            CMAKE_OSX_ARCHITECTURES="x86_64;arm64"
            OPENSIM_INSTALL_DIR="$(pwd)/opensim-cache/macos-universal2/opensim-install"
          CIBW_ENVIRONMENT_LINUX: >
            PATH="/host$(pwd)/opensim-cache/linux-$(uname -m)/swig/bin:$PATH"
            OPENSIM_INSTALL_DIR="/host$(pwd)/opensim-cache/linux-$(uname -m)/opensim-install"
          CIBW_ENVIRONMENT_WINDOWS: >
            PATH="$(pwd)/opensim-cache/windows-$($env:PROCESSOR_ARCHITECTURE)/swig;$env:PATH"
            OPENSIM_INSTALL_DIR="$(pwd)/opensim-cache/windows-$($env:PROCESSOR_ARCHITECTURE)/opensim-install"
            
          # Repair wheel commands 
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            echo "=== Repairing macOS wheel ===" &&
            OPENSIM_INSTALL="$(pwd)/opensim-cache/macos-universal2/opensim-install" &&
            DYLD_LIBRARY_PATH="$OPENSIM_INSTALL/sdk/lib:$OPENSIM_INSTALL/sdk/Simbody/lib" delocate-wheel -w {dest_dir} -v {wheel}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: auditwheel repair -w {dest_dir} {wheel}

      - name: Verify clean directory
        run: git diff --exit-code
        shell: bash

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: wheelhouse/*.whl


  upload_all:
    name: Upload if release
    needs: [build_wheels]
    runs-on: ubuntu-latest
    if: github.event_name == 'release' && github.event.action == 'published'
    environment: pypi
    permissions:
      id-token: write

    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - uses: actions/download-artifact@v4
        with:
          pattern: dist-*
          merge-multiple: true
          path: dist

      - uses: pypa/gh-action-pypi-publish@release/v1